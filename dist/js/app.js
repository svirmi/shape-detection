/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/cross-validate.js":
/*!******************************************************!*\
  !*** ./node_modules/brain.js/dist/cross-validate.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CrossValidate = function () {\n\n  /**\n   *\n   * @param {NeuralNetwork|constructor} Classifier\n   * @param {object} [options]\n   */\n  function CrossValidate(Classifier, options) {\n    _classCallCheck(this, CrossValidate);\n\n    this.Classifier = Classifier;\n    this.options = options;\n    this.json = null;\n  }\n\n  /**\n   *\n   * @param {object} trainOpts\n   * @param {object} trainSet\n   * @param {object} testSet\n   * @returns {void|*}\n   */\n\n\n  _createClass(CrossValidate, [{\n    key: 'testPartition',\n    value: function testPartition(trainOpts, trainSet, testSet) {\n      var classifier = new this.Classifier(this.options);\n      var beginTrain = Date.now();\n      var trainingStats = classifier.train(trainSet, trainOpts);\n      var beginTest = Date.now();\n      var testStats = classifier.test(testSet);\n      var endTest = Date.now();\n      var stats = Object.assign({}, testStats, {\n        trainTime: beginTest - beginTrain,\n        testTime: endTest - beginTest,\n        iterations: trainingStats.iterations,\n        error: trainingStats.error,\n        total: testStats.total,\n        learningRate: classifier.trainOpts.learningRate,\n        hiddenLayers: classifier.hiddenLayers,\n        network: classifier.toJSON()\n      });\n\n      return stats;\n    }\n\n    /**\n     * Randomize array element order in-place.\n     * Using Durstenfeld shuffle algorithm.\n     * source: http://stackoverflow.com/a/12646864/1324039\n     */\n\n  }, {\n    key: 'shuffleArray',\n    value: function shuffleArray(array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n      return array;\n    }\n\n    /**\n     *\n     * @param {object} data\n     * @param {object} trainOpts\n     * @param {number} [k]\n     * @returns {\n     *  {\n     *    avgs: {\n     *      error: number,\n     *      trainTime: number,\n     *      testTime: number,\n     *      iterations: number,\n     *      error: number\n     *    },\n     *    stats: {\n     *      truePos: number,\n     *      trueNeg: number,\n     *      falsePos: number,\n     *      falseNeg: number,\n     *      total: number\n     *    },\n     *    sets: Array\n     *  }\n     * }\n     */\n\n  }, {\n    key: 'train',\n    value: function train(data) {\n      var trainOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var k = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n\n      if (data.length < k) {\n        throw new Error('Training set size is too small for ' + data.length + ' k folds of ' + k);\n      }\n\n      var size = data.length / k;\n\n      if (data.constructor === Array) {\n        this.shuffleArray(data);\n      } else {\n        var newData = {};\n        this.shuffleArray(Object.keys(data)).forEach(function (key) {\n          newData[key] = data[key];\n        });\n        data = newData;\n      }\n\n      var avgs = {\n        trainTime: 0,\n        testTime: 0,\n        iterations: 0,\n        error: 0\n      };\n\n      var stats = {\n        total: 0\n      };\n\n      var binaryStats = {\n        total: 0,\n        truePos: 0,\n        trueNeg: 0,\n        falsePos: 0,\n        falseNeg: 0\n      };\n\n      var results = [];\n      var stat = void 0;\n      var isBinary = null;\n\n      for (var i = 0; i < k; i++) {\n        var dclone = data.slice(0);\n        var testSet = dclone.splice(i * size, size);\n        var trainSet = dclone;\n        var result = this.testPartition(trainOpts, trainSet, testSet);\n\n        if (isBinary === null) {\n          isBinary = result.hasOwnProperty('falseNeg') && result.hasOwnProperty('falsePos') && result.hasOwnProperty('trueNeg') && result.hasOwnProperty('truePos');\n          if (isBinary) {\n            Object.assign(stats, binaryStats);\n          }\n        }\n\n        for (stat in avgs) {\n          if (stat in avgs) {\n            avgs[stat] += result[stat];\n          }\n        }\n\n        for (stat in stats) {\n          if (stat in stats) {\n            stats[stat] += result[stat];\n          }\n        }\n\n        results.push(result);\n      }\n\n      for (stat in avgs) {\n        if (stat in avgs) {\n          avgs[stat] /= k;\n        }\n      }\n\n      if (isBinary) {\n        stats.precision = stats.truePos / (stats.truePos + stats.falsePos);\n        stats.recall = stats.truePos / (stats.truePos + stats.falseNeg);\n        stats.accuracy = (stats.trueNeg + stats.truePos) / stats.total;\n      }\n\n      stats.testSize = size;\n      stats.trainSize = data.length - size;\n\n      return this.json = {\n        avgs: avgs,\n        stats: stats,\n        sets: results\n      };\n    }\n  }, {\n    key: 'toNeuralNetwork',\n    value: function toNeuralNetwork() {\n      return this.fromJSON(this.json);\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return this.json;\n    }\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(crossValidateJson) {\n      var Classifier = this.Classifier;\n      var json = crossValidateJson.sets.reduce(function (prev, cur) {\n        return prev.error < cur.error ? prev : cur;\n      }, { error: Infinity }).network;\n      if (Classifier.fromJSON) {\n        return Classifier.fromJSON(json);\n      }\n      var instance = new Classifier();\n      instance.fromJSON(json);\n      return instance;\n    }\n  }]);\n\n  return CrossValidate;\n}();\n\nexports.default = CrossValidate;\n//# sourceMappingURL=cross-validate.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/cross-validate.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/likely.js":
/*!**********************************************!*\
  !*** ./node_modules/brain.js/dist/likely.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = likely;\n/**\n *\n * @param {*} input\n * @param {brain.NeuralNetwork} net\n * @returns {*}\n */\nfunction likely(input, net) {\n  var output = net.run(input);\n  var maxProp = null;\n  var maxValue = -1;\n  for (var prop in output) {\n    var value = output[prop];\n    if (value > maxValue) {\n      maxProp = prop;\n      maxValue = value;\n    }\n  }\n  return maxProp;\n}\n//# sourceMappingURL=likely.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/likely.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/lookup.js":
/*!**********************************************!*\
  !*** ./node_modules/brain.js/dist/lookup.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* Functions for turning sparse hashes into arrays and vice versa */\nvar lookup = function () {\n  function lookup() {\n    _classCallCheck(this, lookup);\n  }\n\n  _createClass(lookup, null, [{\n    key: 'toTable',\n\n    /**\n     * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`\n     * @param {Object} hashes\n     * @returns {Object}\n     */\n    value: function toTable(hashes) {\n      var hash = hashes.reduce(function (memo, hash) {\n        return Object.assign(memo, hash);\n      }, {});\n\n      return lookup.toHash(hash);\n    }\n\n    /**\n     * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`\n     * @param {Object} objects2D\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toTable2D',\n    value: function toTable2D(objects2D) {\n      var table = {};\n      var valueIndex = 0;\n      for (var i = 0; i < objects2D.length; i++) {\n        var objects = objects2D[i];\n        for (var j = 0; j < objects.length; j++) {\n          var object = objects[j];\n          for (var p in object) {\n            if (object.hasOwnProperty(p) && !table.hasOwnProperty(p)) {\n              table[p] = valueIndex++;\n            }\n          }\n        }\n      }\n      return table;\n    }\n  }, {\n    key: 'toInputTable',\n    value: function toInputTable(data) {\n      var table = {};\n      var tableIndex = 0;\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        for (var p in data[dataIndex].input) {\n          if (!table.hasOwnProperty(p)) {\n            table[p] = tableIndex++;\n          }\n        }\n      }\n      return table;\n    }\n  }, {\n    key: 'toInputTable2D',\n    value: function toInputTable2D(data) {\n      var table = {};\n      var tableIndex = 0;\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        var input = data[dataIndex].input;\n        for (var i = 0; i < input.length; i++) {\n          var object = input[i];\n          for (var p in object) {\n            if (!table.hasOwnProperty(p)) {\n              table[p] = tableIndex++;\n            }\n          }\n        }\n      }\n      return table;\n    }\n  }, {\n    key: 'toOutputTable',\n    value: function toOutputTable(data) {\n      var table = {};\n      var tableIndex = 0;\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        for (var p in data[dataIndex].output) {\n          if (!table.hasOwnProperty(p)) {\n            table[p] = tableIndex++;\n          }\n        }\n      }\n      return table;\n    }\n  }, {\n    key: 'toOutputTable2D',\n    value: function toOutputTable2D(data) {\n      var table = {};\n      var tableIndex = 0;\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        var output = data[dataIndex].output;\n        for (var i = 0; i < output.length; i++) {\n          var object = output[i];\n          for (var p in object) {\n            if (!table.hasOwnProperty(p)) {\n              table[p] = tableIndex++;\n            }\n          }\n        }\n      }\n      return table;\n    }\n\n    /**\n     * performs `{a: 6, b: 7} -> {a: 0, b: 1}`\n     * @param {Object} hash\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toHash',\n    value: function toHash(hash) {\n      var lookup = {};\n      var index = 0;\n      for (var i in hash) {\n        lookup[i] = index++;\n      }\n      return lookup;\n    }\n\n    /**\n     * performs `{a: 0, b: 1}, {a: 6} -> [6, 0]`\n     * @param {*} lookup\n     * @param {*} object\n     * @param {*} arrayLength\n     * @returns {Float32Array}\n     */\n\n  }, {\n    key: 'toArray',\n    value: function toArray(lookup, object, arrayLength) {\n      var result = new Float32Array(arrayLength);\n      for (var p in lookup) {\n        result[lookup[p]] = object.hasOwnProperty(p) ? object[p] : 0;\n      }\n      return result;\n    }\n  }, {\n    key: 'toArrayShort',\n    value: function toArrayShort(lookup, object) {\n      var result = [];\n      for (var p in lookup) {\n        if (!object.hasOwnProperty(p)) break;\n        result[lookup[p]] = object[p];\n      }\n      return Float32Array.from(result);\n    }\n  }, {\n    key: 'toArrays',\n    value: function toArrays(lookup, objects, arrayLength) {\n      var result = [];\n      for (var i = 0; i < objects.length; i++) {\n        result.push(this.toArray(lookup, objects[i], arrayLength));\n      }\n      return result;\n    }\n\n    /**\n     * performs `{a: 0, b: 1}, [6, 7] -> {a: 6, b: 7}`\n     * @param {Object} lookup\n     * @param {Array} array\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toObject',\n    value: function toObject(lookup, array) {\n      var object = {};\n      for (var p in lookup) {\n        object[p] = array[lookup[p]];\n      }\n      return object;\n    }\n  }, {\n    key: 'toObjectPartial',\n    value: function toObjectPartial(lookup, array) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var object = {};\n      var i = 0;\n      for (var p in lookup) {\n        if (offset > 0) {\n          if (i++ < offset) continue;\n        }\n        if (limit > 0) {\n          if (i++ >= limit) continue;\n        }\n        object[p] = array[lookup[p] - offset];\n      }\n      return object;\n    }\n\n    /**\n     *\n     * @param {Array} array\n     * @returns {*}\n     */\n\n  }, {\n    key: 'lookupFromArray',\n    value: function lookupFromArray(array) {\n      var lookup = {};\n      var z = 0;\n      var i = array.length;\n      while (i-- > 0) {\n        lookup[array[i]] = z++;\n      }\n      return lookup;\n    }\n  }, {\n    key: 'dataShape',\n    value: function dataShape(data) {\n      var shape = [];\n\n      if (data.input) {\n        shape.push('datum');\n        data = data.input;\n      } else if (Array.isArray(data)) {\n        if (data[0].input) {\n          shape.push('array', 'datum');\n          data = data[0].input;\n        } else {\n          shape.push('array');\n          data = data[0];\n        }\n      }\n\n      var p = void 0;\n      while (data) {\n        for (p in data) {\n          break;\n        }\n        if (!data.hasOwnProperty(p)) break;\n        if (Array.isArray(data) || data.buffer instanceof ArrayBuffer) {\n          shape.push('array');\n          data = data[p];\n        } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n          shape.push('object');\n          data = data[p];\n        } else {\n          throw new Error('unhandled signature');\n        }\n      }\n      shape.push(typeof data === 'undefined' ? 'undefined' : _typeof(data));\n      return shape;\n    }\n  }, {\n    key: 'addKeys',\n    value: function addKeys(value, table) {\n      if (Array.isArray(value)) return;\n      table = table || {};\n      var i = Object.keys(table).length;\n      for (var p in value) {\n        if (!value.hasOwnProperty(p)) continue;\n        if (table.hasOwnProperty(p)) continue;\n        table[p] = i++;\n      }\n      return table;\n    }\n  }]);\n\n  return lookup;\n}();\n\nexports.default = lookup;\n//# sourceMappingURL=lookup.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/lookup.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/neural-network-gpu.js":
/*!**********************************************************!*\
  !*** ./node_modules/brain.js/dist/neural-network-gpu.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _neuralNetwork = __webpack_require__(/*! ./neural-network */ \"./node_modules/brain.js/dist/neural-network.js\");\n\nvar _neuralNetwork2 = _interopRequireDefault(_neuralNetwork);\n\nvar _lookup = __webpack_require__(/*! ./lookup */ \"./node_modules/brain.js/dist/lookup.js\");\n\nvar _lookup2 = _interopRequireDefault(_lookup);\n\nvar _gpu = __webpack_require__(/*! gpu.js */ \"./node_modules/gpu.js/dist/index.js\");\n\nvar _gpu2 = _interopRequireDefault(_gpu);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n *\n * @param {object} options\n * @constructor\n */\nvar NeuralNetworkGPU = function (_NeuralNetwork) {\n  _inherits(NeuralNetworkGPU, _NeuralNetwork);\n\n  function NeuralNetworkGPU() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NeuralNetworkGPU);\n\n    var _this = _possibleConstructorReturn(this, (NeuralNetworkGPU.__proto__ || Object.getPrototypeOf(NeuralNetworkGPU)).call(this, options));\n\n    _this.forwardPropagate = [];\n    _this.backwardPropagate = [];\n    _this.changesPropagate = [];\n    _this.biasesPropagate = [];\n    _this.biasCopies = [];\n    _this.copyBias = [];\n    _this.changesCopies = [];\n    _this.copyChanges = [];\n    _this.weightsCopies = [];\n    _this.copyWeights = [];\n    _this.errorCheckInterval = 100;\n    _this.gpu = new _gpu2.default({ mode: options.mode });\n    return _this;\n  }\n\n  /**\n   *\n   */\n\n\n  _createClass(NeuralNetworkGPU, [{\n    key: 'initialize',\n    value: function initialize() {\n      _get(NeuralNetworkGPU.prototype.__proto__ || Object.getPrototypeOf(NeuralNetworkGPU.prototype), 'initialize', this).call(this);\n      this.buildRunInput();\n      this.buildCalculateDeltas();\n      this.buildGetChanges();\n      this.buildChangeBiases();\n      this.buildGetMSE();\n    }\n  }, {\n    key: 'setActivation',\n    value: function setActivation() {}\n\n    /**\n     *\n     * @param value\n     * @param logErrorRate\n     */\n\n  }, {\n    key: 'trainPattern',\n    value: function trainPattern(value, logErrorRate) {\n      // forward propagate\n      this.runInput(value.input);\n\n      // back propagate\n      this.calculateDeltas(value.output);\n      this.adjustWeights();\n\n      if (logErrorRate) {\n        return this.getMSE(this.errors[this.outputLayer])[0];\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: 'adjustWeights',\n    value: function adjustWeights() {\n      this.getChanges();\n      this.changeBiases();\n    }\n  }, {\n    key: 'buildRunInput',\n    value: function buildRunInput() {\n      var weightedSum = null;\n\n      switch (this.activation) {\n        case 'sigmoid':\n          weightedSum = weightedSumSigmoid;\n          break;\n        case 'relu':\n          weightedSum = weightedSumRelu;\n          break;\n        case 'leaky-relu':\n          weightedSum = weightedSumLeakyRelu;\n          break;\n        case 'tanh':\n          weightedSum = weightedSumTanh;\n          break;\n        default:\n          throw new Error('unknown activation ' + this.activation);\n      }\n\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        this.forwardPropagate[layer] = this.gpu.createKernel(weightedSum, {\n          output: [this.sizes[layer]],\n          outputToTexture: true,\n          hardcodeConstants: true,\n          constants: {\n            size: this.sizes[layer - 1]\n          }\n        });\n      }\n\n      this.texturizeInputData = this.gpu.createKernel(function (value) {\n        return value[this.thread.x];\n      }, {\n        output: [this.sizes[1]],\n        outputToTexture: true,\n        hardcodeConstants: true,\n        outputImmutable: true\n      });\n    }\n\n    /**\n     *\n     * @param input\n     * @returns {*}\n     */\n\n  }, {\n    key: 'runInput',\n    value: function runInput(input) {\n      var output = void 0;\n      this.outputs[0] = input;\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        this.outputs[layer] = this.forwardPropagate[layer](this.weights[layer], this.biases[layer], input);\n        output = input = this.outputs[layer];\n      }\n      return output;\n    }\n  }, {\n    key: 'buildCalculateDeltas',\n    value: function buildCalculateDeltas() {\n      var calcDeltas = null;\n\n      switch (this.activation) {\n        case 'sigmoid':\n          calcDeltas = calcDeltasSigmoid;\n          break;\n        case 'relu':\n          calcDeltas = calcDeltasRelu;\n          break;\n        case 'leaky-relu':\n          calcDeltas = calcDeltasLeakyRelu;\n          break;\n        case 'tanh':\n          calcDeltas = calcDeltasTanh;\n          break;\n        default:\n          throw new Error('unknown activation ' + this.activation);\n      }\n\n      for (var layer = this.outputLayer; layer > 0; layer--) {\n        if (layer === this.outputLayer) {\n          this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: _gpu2.default.alias('calcErrorOutput', calcErrorOutput),\n            deltas: _gpu2.default.alias('calcDeltas', calcDeltas)\n          }, function (outputs, targets) {\n            var output = outputs[this.thread.x];\n            return calcDeltas(calcErrorOutput(output, targets), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true,\n            hardcodeConstants: true\n          });\n        } else {\n          this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: _gpu2.default.alias('calcError', calcError),\n            deltas: _gpu2.default.alias('calcDeltas', calcDeltas)\n          }, function (nextWeights, outputs, nextDeltas) {\n            var output = outputs[this.thread.x];\n            return calcDeltas(calcError(nextWeights, nextDeltas), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true,\n            hardcodeConstants: true,\n            constants: {\n              size: this.deltas[layer + 1].length\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: 'calculateDeltas',\n    value: function calculateDeltas(target) {\n      for (var layer = this.outputLayer; layer > 0; layer--) {\n        var output = void 0;\n\n        if (layer === this.outputLayer) {\n          output = this.backwardPropagate[layer](this.outputs[layer], target);\n        } else {\n          output = this.backwardPropagate[layer](this.weights[layer + 1], this.outputs[layer], this.deltas[layer + 1]);\n        }\n\n        this.deltas[layer] = output.deltas;\n        this.errors[layer] = output.error;\n      }\n    }\n  }, {\n    key: 'buildGetChanges',\n    value: function buildGetChanges() {\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        this.changesPropagate[layer] = this.gpu.createKernelMap({\n          weights: _gpu2.default.alias('addWeights', addWeights),\n          changes: _gpu2.default.alias('calcChanges', calcChanges)\n        }, function (previousOutputs, deltas, weights, changes) {\n          var change = calcChanges(changes, deltas, previousOutputs);\n\n          return addWeights(change, weights);\n        }, {\n          output: [this.sizes[layer - 1], this.sizes[layer]],\n          outputToTexture: true,\n          hardcodeConstants: true,\n          constants: {\n            size: this.outputs[layer - 1].length,\n            learningRate: this.trainOpts.learningRate,\n            momentum: this.trainOpts.momentum\n          }\n        });\n\n        this.copyChanges[layer] = this.gpu.createKernel(function (value) {\n          return value[this.thread.y][this.thread.x];\n        }, {\n          output: this.changesPropagate[layer].output,\n          outputToTexture: true,\n          hardCodeConstants: true\n        });\n\n        this.copyWeights[layer] = this.gpu.createKernel(function (value) {\n          return value[this.thread.y][this.thread.x];\n        }, {\n          output: this.changesPropagate[layer].output,\n          outputToTexture: true,\n          hardCodeConstants: true\n        });\n      }\n    }\n  }, {\n    key: 'getChanges',\n    value: function getChanges() {\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        var output = this.changesPropagate[layer](this.outputs[layer - 1], this.deltas[layer], this.weightsCopies[layer] || this.weights[layer], this.changesCopies[layer] || this.changes[layer]);\n        this.changes[layer] = output.changes;\n        this.weights[layer] = output.weights;\n\n        this.changesCopies[layer] = this.copyChanges[layer](output.changes);\n        this.weightsCopies[layer] = this.copyWeights[layer](output.weights);\n      }\n    }\n  }, {\n    key: 'buildChangeBiases',\n    value: function buildChangeBiases() {\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        this.biasesPropagate[layer] = this.gpu.createKernel(addBiases, {\n          output: [this.sizes[layer]],\n          outputToTexture: true,\n          hardcodeConstants: true,\n          constants: {\n            learningRate: this.trainOpts.learningRate\n          }\n        });\n        this.copyBias[layer] = this.gpu.createKernel(function (value) {\n          return value[this.thread.x];\n        }, {\n          output: this.biasesPropagate[layer].output,\n          outputToTexture: true,\n          hardCodeConstants: true\n        });\n      }\n    }\n  }, {\n    key: 'changeBiases',\n    value: function changeBiases() {\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        this.biases[layer] = this.biasesPropagate[layer](this.biasCopies[layer] || this.biases[layer], this.deltas[layer]);\n        this.biasCopies[layer] = this.copyBias[layer](this.biases[layer]);\n      }\n    }\n  }, {\n    key: 'buildGetMSE',\n    value: function buildGetMSE() {\n      this.getMSE = this.gpu.createKernel(mse, {\n        output: [1],\n        hardcodeConstants: true,\n        constants: {\n          size: this.sizes[this.outputLayer]\n        }\n      });\n    }\n\n    /**\n     *\n     * @param input\n     * @returns {*}\n     */\n\n  }, {\n    key: 'run',\n    value: function run(input) {\n      if (!this.isRunnable) return null;\n      if (this.inputLookup) {\n        input = _lookup2.default.toArray(this.inputLookup, input, this.inputLookupLength);\n      }\n      var inputTexture = this.texturizeInputData(input);\n      var outputTextures = this.runInput(inputTexture);\n      var output = void 0;\n      if (outputTextures.toArray) {\n        output = outputTextures.toArray(this.gpu);\n      } else {\n        output = outputTextures;\n      }\n\n      if (this.outputLookup) {\n        output = _lookup2.default.toObject(this.outputLookup, output);\n      }\n      return output;\n    }\n\n    /**\n     *\n     * @param data\n     * @param options\n     * @protected\n     * @return { data, status, endTime }\n     */\n\n  }, {\n    key: 'prepTraining',\n    value: function prepTraining(data, options) {\n      var _this2 = this;\n\n      this.updateTrainingOptions(options);\n      data = this.formatData(data);\n      var endTime = Date.now() + this.trainOpts.timeout;\n\n      var status = {\n        error: 1,\n        iterations: 0\n      };\n\n      this.verifyIsInitialized(data);\n\n      var texturizeOutputData = this.gpu.createKernel(function (value) {\n        return value[this.thread.x];\n      }, {\n        output: [data[0].output.length],\n        outputToTexture: true,\n        hardcodeConstants: true,\n        outputImmutable: true\n      });\n\n      return {\n        data: data.map(function (set) {\n          return {\n            input: _this2.texturizeInputData(set.input),\n            output: texturizeOutputData(set.output)\n          };\n        }),\n        status: status,\n        endTime: endTime\n      };\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var _this3 = this;\n\n      if (!this.weights[1].toArray) {\n        // in fallback mode\n        return _get(NeuralNetworkGPU.prototype.__proto__ || Object.getPrototypeOf(NeuralNetworkGPU.prototype), 'toJSON', this).call(this);\n      }\n\n      // in GPU mode\n      var weights = [];\n      var biases = [];\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        weights[layer] = Array.from(this.weights[layer].toArray(this.gpu));\n        biases[layer] = Array.from(this.biases[layer].toArray(this.gpu));\n      }\n\n      // pseudo lo-fi decorator\n      return _neuralNetwork2.default.prototype.toJSON.call({\n        inputLookup: this.inputLookup,\n        outputLookup: this.outputLookup,\n        outputLayer: this.outputLayer,\n        sizes: this.sizes,\n        getTrainOptsJSON: function getTrainOptsJSON() {\n          return _this3.getTrainOptsJSON();\n        },\n        weights: weights,\n        biases: biases\n      });\n    }\n  }]);\n\n  return NeuralNetworkGPU;\n}(_neuralNetwork2.default);\n\nexports.default = NeuralNetworkGPU;\n\n\nfunction weightedSumSigmoid(weights, biases, inputs) {\n  var sum = biases[this.thread.x];\n  for (var k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //sigmoid\n  return 1 / (1 + Math.exp(-sum));\n}\n\nfunction weightedSumRelu(weights, biases, inputs) {\n  var sum = biases[this.thread.x];\n  for (var k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //relu\n  return sum < 0 ? 0 : sum;\n}\n\nfunction weightedSumLeakyRelu(weights, biases, inputs) {\n  var sum = biases[this.thread.x];\n  for (var k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //leaky relu\n  return sum < 0 ? 0 : 0.01 * sum;\n}\n\nfunction weightedSumTanh(weights, biases, inputs) {\n  var sum = biases[this.thread.x];\n  for (var k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //tanh\n  return Math.tanh(sum);\n}\n\nfunction calcErrorOutput(output, targets) {\n  return targets[this.thread.x] - output;\n}\n\nfunction calcDeltasSigmoid(error, output) {\n  //sigmoid derivative\n  return error * output * (1 - output);\n}\n\nfunction calcDeltasRelu(error, output) {\n  //relu derivative\n  return output > 0 ? error : 0;\n}\n\nfunction calcDeltasLeakyRelu(error, output) {\n  //leaky relu derivative\n  return output > 0 ? error : 0.01 * error;\n}\n\nfunction calcDeltasTanh(error, output) {\n  //tanh derivative\n  return (1 - output * output) * error;\n}\n\nfunction calcError(nextWeights, nextDeltas) {\n  var error = 0;\n  for (var k = 0; k < this.constants.size; k++) {\n    error += nextDeltas[k] * nextWeights[k][this.thread.x];\n  }\n  return error;\n}\n\nfunction calcChanges(previousChanges, deltas, previousOutputs) {\n  return this.constants.learningRate * deltas[this.thread.y] * previousOutputs[this.thread.x] + this.constants.momentum * previousChanges[this.thread.y][this.thread.x];\n}\n\nfunction addWeights(change, weights) {\n  return change + weights[this.thread.y][this.thread.x];\n}\n\nfunction addBiases(biases, deltas) {\n  return biases[this.thread.x] + deltas[this.thread.x] * this.constants.learningRate;\n}\n\n// mean squared error, reimplemented for GPU\nfunction mse(errors) {\n  var sum = 0;\n  for (var i = 0; i < this.constants.size; i++) {\n    sum += Math.pow(errors[i], 2);\n  }\n  return sum / this.constants.size;\n}\n//# sourceMappingURL=neural-network-gpu.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/neural-network-gpu.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/neural-network.js":
/*!******************************************************!*\
  !*** ./node_modules/brain.js/dist/neural-network.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _thaw = __webpack_require__(/*! thaw.js */ \"./node_modules/thaw.js/dist/index.js\");\n\nvar _thaw2 = _interopRequireDefault(_thaw);\n\nvar _lookup2 = __webpack_require__(/*! ./lookup */ \"./node_modules/brain.js/dist/lookup.js\");\n\nvar _lookup3 = _interopRequireDefault(_lookup2);\n\nvar _max = __webpack_require__(/*! ./utilities/max */ \"./node_modules/brain.js/dist/utilities/max.js\");\n\nvar _max2 = _interopRequireDefault(_max);\n\nvar _mse = __webpack_require__(/*! ./utilities/mse */ \"./node_modules/brain.js/dist/utilities/mse.js\");\n\nvar _mse2 = _interopRequireDefault(_mse);\n\nvar _randos = __webpack_require__(/*! ./utilities/randos */ \"./node_modules/brain.js/dist/utilities/randos.js\");\n\nvar _randos2 = _interopRequireDefault(_randos);\n\nvar _range = __webpack_require__(/*! ./utilities/range */ \"./node_modules/brain.js/dist/utilities/range.js\");\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _toArray = __webpack_require__(/*! ./utilities/to-array */ \"./node_modules/brain.js/dist/utilities/to-array.js\");\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nvar _zeros = __webpack_require__(/*! ./utilities/zeros */ \"./node_modules/brain.js/dist/utilities/zeros.js\");\n\nvar _zeros2 = _interopRequireDefault(_zeros);\n\nvar _lookupTable = __webpack_require__(/*! ./utilities/lookup-table */ \"./node_modules/brain.js/dist/utilities/lookup-table.js\");\n\nvar _lookupTable2 = _interopRequireDefault(_lookupTable);\n\nvar _cast = __webpack_require__(/*! ./utilities/cast */ \"./node_modules/brain.js/dist/utilities/cast.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @param {object} options\n * @constructor\n */\nvar NeuralNetwork = function () {\n  _createClass(NeuralNetwork, null, [{\n    key: 'trainDefaults',\n    get: function get() {\n      return {\n        iterations: 20000, // the maximum times to iterate the training data\n        errorThresh: 0.005, // the acceptable error percentage from training data\n        log: false, // true to use console.log, when a function is supplied it is used\n        logPeriod: 10, // iterations between logging out\n        learningRate: 0.3, // multiply's against the input and the delta then adds to momentum\n        momentum: 0.1, // multiply's against the specified \"change\" then adds to learning rate for change\n        callback: null, // a periodic call back that can be triggered while training\n        callbackPeriod: 10, // the number of iterations through the training data between callback calls\n        timeout: Infinity, // the max number of milliseconds to train for\n        praxis: null,\n        beta1: 0.9,\n        beta2: 0.999,\n        epsilon: 1e-8\n      };\n    }\n  }, {\n    key: 'defaults',\n    get: function get() {\n      return {\n        leakyReluAlpha: 0.01,\n        binaryThresh: 0.5,\n        hiddenLayers: null, // array of ints for the sizes of the hidden layers in the network\n        activation: 'sigmoid' // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']\n      };\n    }\n  }]);\n\n  function NeuralNetwork() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NeuralNetwork);\n\n    Object.assign(this, this.constructor.defaults, options);\n    this.trainOpts = {};\n    this.updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));\n\n    this.sizes = null;\n    this.outputLayer = null;\n    this.biases = null; // weights for bias nodes\n    this.weights = null;\n    this.outputs = null;\n\n    // state for training\n    this.deltas = null;\n    this.changes = null; // for momentum\n    this.errors = null;\n    this.errorCheckInterval = 1;\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\n      this.runInput = null;\n    }\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\n      this.calculateDeltas = null;\n    }\n    this.inputLookup = null;\n    this.inputLookupLength = null;\n    this.outputLookup = null;\n    this.outputLookupLength = null;\n  }\n\n  /**\n   *\n   * Expects this.sizes to have been set\n   */\n\n\n  _createClass(NeuralNetwork, [{\n    key: 'initialize',\n    value: function initialize() {\n      if (!this.sizes) throw new Error('Sizes must be set before initializing');\n\n      this.outputLayer = this.sizes.length - 1;\n      this.biases = []; // weights for bias nodes\n      this.weights = [];\n      this.outputs = [];\n\n      // state for training\n      this.deltas = [];\n      this.changes = []; // for momentum\n      this.errors = [];\n\n      for (var layer = 0; layer <= this.outputLayer; layer++) {\n        var size = this.sizes[layer];\n        this.deltas[layer] = (0, _zeros2.default)(size);\n        this.errors[layer] = (0, _zeros2.default)(size);\n        this.outputs[layer] = (0, _zeros2.default)(size);\n\n        if (layer > 0) {\n          this.biases[layer] = (0, _randos2.default)(size);\n          this.weights[layer] = new Array(size);\n          this.changes[layer] = new Array(size);\n\n          for (var node = 0; node < size; node++) {\n            var prevSize = this.sizes[layer - 1];\n            this.weights[layer][node] = (0, _randos2.default)(prevSize);\n            this.changes[layer][node] = (0, _zeros2.default)(prevSize);\n          }\n        }\n      }\n\n      this.setActivation();\n      if (this.trainOpts.praxis === 'adam') {\n        this._setupAdam();\n      }\n    }\n\n    /**\n     *\n     * @param activation supported inputs: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n     */\n\n  }, {\n    key: 'setActivation',\n    value: function setActivation(activation) {\n      this.activation = activation ? activation : this.activation;\n      switch (this.activation) {\n        case 'sigmoid':\n          this.runInput = this.runInput || this._runInputSigmoid;\n          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;\n          break;\n        case 'relu':\n          this.runInput = this.runInput || this._runInputRelu;\n          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;\n          break;\n        case 'leaky-relu':\n          this.runInput = this.runInput || this._runInputLeakyRelu;\n          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;\n          break;\n        case 'tanh':\n          this.runInput = this.runInput || this._runInputTanh;\n          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;\n          break;\n        default:\n          throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\\'sigmoid\\', \\'relu\\', \\'leaky-relu\\', \\'tanh\\']');\n      }\n    }\n\n    /**\n     *\n     * @returns boolean\n     */\n\n  }, {\n    key: 'run',\n\n\n    /**\n     *\n     * @param input\n     * @returns {*}\n     */\n    value: function run(input) {\n      if (!this.isRunnable) return null;\n      if (this.inputLookup) {\n        input = _lookup3.default.toArray(this.inputLookup, input, this.inputLookupLength);\n      }\n\n      var output = this.runInput(input).slice(0);\n\n      if (this.outputLookup) {\n        output = _lookup3.default.toObject(this.outputLookup, output);\n      }\n      return output;\n    }\n\n    /**\n     * trains via sigmoid\n     * @param input\n     * @returns {*}\n     */\n\n  }, {\n    key: '_runInputSigmoid',\n    value: function _runInputSigmoid(input) {\n      this.outputs[0] = input; // set output state of input layer\n\n      var output = null;\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var weights = this.weights[layer][node];\n\n          var sum = this.biases[layer][node];\n          for (var k = 0; k < weights.length; k++) {\n            sum += weights[k] * input[k];\n          }\n          //sigmoid\n          this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\n        }\n        output = input = this.outputs[layer];\n      }\n      return output;\n    }\n  }, {\n    key: '_runInputRelu',\n    value: function _runInputRelu(input) {\n      this.outputs[0] = input; // set output state of input layer\n\n      var output = null;\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var weights = this.weights[layer][node];\n\n          var sum = this.biases[layer][node];\n          for (var k = 0; k < weights.length; k++) {\n            sum += weights[k] * input[k];\n          }\n          //relu\n          this.outputs[layer][node] = sum < 0 ? 0 : sum;\n        }\n        output = input = this.outputs[layer];\n      }\n      return output;\n    }\n  }, {\n    key: '_runInputLeakyRelu',\n    value: function _runInputLeakyRelu(input) {\n      this.outputs[0] = input; // set output state of input layer\n      var alpha = this.leakyReluAlpha;\n      var output = null;\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var weights = this.weights[layer][node];\n\n          var sum = this.biases[layer][node];\n          for (var k = 0; k < weights.length; k++) {\n            sum += weights[k] * input[k];\n          }\n          //leaky relu\n          this.outputs[layer][node] = sum < 0 ? 0 : alpha * sum;\n        }\n        output = input = this.outputs[layer];\n      }\n      return output;\n    }\n  }, {\n    key: '_runInputTanh',\n    value: function _runInputTanh(input) {\n      this.outputs[0] = input; // set output state of input layer\n\n      var output = null;\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var weights = this.weights[layer][node];\n\n          var sum = this.biases[layer][node];\n          for (var k = 0; k < weights.length; k++) {\n            sum += weights[k] * input[k];\n          }\n          //tanh\n          this.outputs[layer][node] = Math.tanh(sum);\n        }\n        output = input = this.outputs[layer];\n      }\n      return output;\n    }\n\n    /**\n     *\n     * @param data\n     * Verifies network sizes are initialized\n     * If they are not it will initialize them based off the data set.\n     */\n\n  }, {\n    key: 'verifyIsInitialized',\n    value: function verifyIsInitialized(data) {\n      var _this = this;\n\n      if (this.sizes) return;\n\n      this.sizes = [];\n      this.sizes.push(data[0].input.length);\n      if (!this.hiddenLayers) {\n        this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));\n      } else {\n        this.hiddenLayers.forEach(function (size) {\n          _this.sizes.push(size);\n        });\n      }\n      this.sizes.push(data[0].output.length);\n\n      this.initialize();\n    }\n\n    /**\n     *\n     * @param options\n     *    Supports all `trainDefaults` properties\n     *    also supports:\n     *       learningRate: (number),\n     *       momentum: (number),\n     *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n     */\n\n  }, {\n    key: 'updateTrainingOptions',\n    value: function updateTrainingOptions(options) {\n      var trainDefaults = this.constructor.trainDefaults;\n      for (var p in trainDefaults) {\n        if (!trainDefaults.hasOwnProperty(p)) continue;\n        this.trainOpts[p] = options.hasOwnProperty(p) ? options[p] : trainDefaults[p];\n      }\n      this.validateTrainingOptions(this.trainOpts);\n      this.setLogMethod(options.log || this.trainOpts.log);\n      this.activation = options.activation || this.activation;\n    }\n\n    /**\n     *\n     * @param options\n     */\n\n  }, {\n    key: 'validateTrainingOptions',\n    value: function validateTrainingOptions(options) {\n      var validations = {\n        iterations: function iterations(val) {\n          return typeof val === 'number' && val > 0;\n        },\n        errorThresh: function errorThresh(val) {\n          return typeof val === 'number' && val > 0 && val < 1;\n        },\n        log: function log(val) {\n          return typeof val === 'function' || typeof val === 'boolean';\n        },\n        logPeriod: function logPeriod(val) {\n          return typeof val === 'number' && val > 0;\n        },\n        learningRate: function learningRate(val) {\n          return typeof val === 'number' && val > 0 && val < 1;\n        },\n        momentum: function momentum(val) {\n          return typeof val === 'number' && val > 0 && val < 1;\n        },\n        callback: function callback(val) {\n          return typeof val === 'function' || val === null;\n        },\n        callbackPeriod: function callbackPeriod(val) {\n          return typeof val === 'number' && val > 0;\n        },\n        timeout: function timeout(val) {\n          return typeof val === 'number' && val > 0;\n        }\n      };\n      for (var p in validations) {\n        if (!validations.hasOwnProperty(p)) continue;\n        if (!options.hasOwnProperty(p)) continue;\n        if (!validations[p](options[p])) {\n          throw new Error('[' + p + ', ' + options[p] + '] is out of normal training range, your network will probably not train.');\n        }\n      }\n    }\n\n    /**\n     *\n     *  Gets JSON of trainOpts object\n     *    NOTE: Activation is stored directly on JSON object and not in the training options\n     */\n\n  }, {\n    key: 'getTrainOptsJSON',\n    value: function getTrainOptsJSON() {\n      var _this2 = this;\n\n      return Object.keys(this.constructor.trainDefaults).reduce(function (opts, opt) {\n        if (opt === 'timeout' && _this2.trainOpts[opt] === Infinity) return opts;\n        if (opt === 'callback') return opts;\n        if (_this2.trainOpts[opt]) opts[opt] = _this2.trainOpts[opt];\n        if (opt === 'log') opts.log = typeof opts.log === 'function';\n        return opts;\n      }, {});\n    }\n\n    /**\n     *\n     * @param log\n     * if a method is passed in method is used\n     * if false passed in nothing is logged\n     * @returns error\n     */\n\n  }, {\n    key: 'setLogMethod',\n    value: function setLogMethod(log) {\n      if (typeof log === 'function') {\n        this.trainOpts.log = log;\n      } else if (log) {\n        this.trainOpts.log = console.log;\n      } else {\n        this.trainOpts.log = false;\n      }\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {Number} error\n     */\n\n  }, {\n    key: 'calculateTrainingError',\n    value: function calculateTrainingError(data) {\n      var sum = 0;\n      for (var i = 0; i < data.length; ++i) {\n        sum += this.trainPattern(data[i], true);\n      }\n      return sum / data.length;\n    }\n\n    /**\n     * @param data\n     */\n\n  }, {\n    key: 'trainPatterns',\n    value: function trainPatterns(data) {\n      for (var i = 0; i < data.length; ++i) {\n        this.trainPattern(data[i]);\n      }\n    }\n\n    /**\n     *\n     * @param {object} data\n     * @param {object} status { iterations: number, error: number }\n     * @param endTime\n     */\n\n  }, {\n    key: 'trainingTick',\n    value: function trainingTick(data, status, endTime) {\n      if (status.iterations >= this.trainOpts.iterations || status.error <= this.trainOpts.errorThresh || Date.now() >= endTime) {\n        return false;\n      }\n\n      status.iterations++;\n\n      if (this.trainOpts.log && status.iterations % this.trainOpts.logPeriod === 0) {\n        status.error = this.calculateTrainingError(data);\n        this.trainOpts.log('iterations: ' + status.iterations + ', training error: ' + status.error);\n      } else {\n        if (status.iterations % this.errorCheckInterval === 0) {\n          status.error = this.calculateTrainingError(data);\n        } else {\n          this.trainPatterns(data);\n        }\n      }\n\n      if (this.trainOpts.callback && status.iterations % this.trainOpts.callbackPeriod === 0) {\n        this.trainOpts.callback({\n          iterations: status.iterations,\n          error: status.error\n        });\n      }\n      return true;\n    }\n\n    /**\n     *\n     * @param data\n     * @param options\n     * @protected\n     * @return {object} { data, status, endTime }\n     */\n\n  }, {\n    key: 'prepTraining',\n    value: function prepTraining(data, options) {\n      this.updateTrainingOptions(options);\n      data = this.formatData(data);\n      var endTime = Date.now() + this.trainOpts.timeout;\n\n      var status = {\n        error: 1,\n        iterations: 0\n      };\n\n      this.verifyIsInitialized(data);\n\n      return {\n        data: data,\n        status: status,\n        endTime: endTime\n      };\n    }\n\n    /**\n     *\n     * @param data\n     * @param options\n     * @returns {object} {error: number, iterations: number}\n     */\n\n  }, {\n    key: 'train',\n    value: function train(data) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var status = void 0,\n          endTime = void 0;\n\n      var _prepTraining = this.prepTraining(data, options);\n\n      data = _prepTraining.data;\n      status = _prepTraining.status;\n      endTime = _prepTraining.endTime;\n\n\n      while (this.trainingTick(data, status, endTime)) {}\n      return status;\n    }\n\n    /**\n     *\n     * @param data\n     * @param options\n     * @returns {Promise}\n     * @resolves {{error: number, iterations: number}}\n     * @rejects {{trainError: string, status: {error: number, iterations: number}}\n     */\n\n  }, {\n    key: 'trainAsync',\n    value: function trainAsync(data) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var status = void 0,\n          endTime = void 0;\n\n      var _prepTraining2 = this.prepTraining(data, options);\n\n      data = _prepTraining2.data;\n      status = _prepTraining2.status;\n      endTime = _prepTraining2.endTime;\n\n\n      return new Promise(function (resolve, reject) {\n        try {\n          var thawedTrain = new _thaw2.default(new Array(_this3.trainOpts.iterations), {\n            delay: true,\n            each: function each() {\n              return _this3.trainingTick(data, status, endTime) || thawedTrain.stop();\n            },\n            done: function done() {\n              return resolve(status);\n            }\n          });\n          thawedTrain.tick();\n        } catch (trainError) {\n          reject({ trainError: trainError, status: status });\n        }\n      });\n    }\n\n    /**\n     *\n     * @param {object} value\n     * @param {boolean} [logErrorRate]\n     */\n\n  }, {\n    key: 'trainPattern',\n    value: function trainPattern(value, logErrorRate) {\n      // forward propagate\n      this.runInput(value.input);\n\n      // back propagate\n      this.calculateDeltas(value.output);\n      this.adjustWeights();\n\n      if (logErrorRate) {\n        return (0, _mse2.default)(this.errors[this.outputLayer]);\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     *\n     * @param target\n     */\n\n  }, {\n    key: '_calculateDeltasSigmoid',\n    value: function _calculateDeltasSigmoid(target) {\n      for (var layer = this.outputLayer; layer >= 0; layer--) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var output = this.outputs[layer][node];\n\n          var error = 0;\n          if (layer === this.outputLayer) {\n            error = target[node] - output;\n          } else {\n            var deltas = this.deltas[layer + 1];\n            for (var k = 0; k < deltas.length; k++) {\n              error += deltas[k] * this.weights[layer + 1][k][node];\n            }\n          }\n          this.errors[layer][node] = error;\n          this.deltas[layer][node] = error * output * (1 - output);\n        }\n      }\n    }\n\n    /**\n     *\n     * @param target\n     */\n\n  }, {\n    key: '_calculateDeltasRelu',\n    value: function _calculateDeltasRelu(target) {\n      for (var layer = this.outputLayer; layer >= 0; layer--) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var output = this.outputs[layer][node];\n\n          var error = 0;\n          if (layer === this.outputLayer) {\n            error = target[node] - output;\n          } else {\n            var deltas = this.deltas[layer + 1];\n            for (var k = 0; k < deltas.length; k++) {\n              error += deltas[k] * this.weights[layer + 1][k][node];\n            }\n          }\n          this.errors[layer][node] = error;\n          this.deltas[layer][node] = output > 0 ? error : 0;\n        }\n      }\n    }\n\n    /**\n     *\n     * @param target\n     */\n\n  }, {\n    key: '_calculateDeltasLeakyRelu',\n    value: function _calculateDeltasLeakyRelu(target) {\n      var alpha = this.leakyReluAlpha;\n      for (var layer = this.outputLayer; layer >= 0; layer--) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var output = this.outputs[layer][node];\n\n          var error = 0;\n          if (layer === this.outputLayer) {\n            error = target[node] - output;\n          } else {\n            var deltas = this.deltas[layer + 1];\n            for (var k = 0; k < deltas.length; k++) {\n              error += deltas[k] * this.weights[layer + 1][k][node];\n            }\n          }\n          this.errors[layer][node] = error;\n          this.deltas[layer][node] = output > 0 ? error : alpha * error;\n        }\n      }\n    }\n\n    /**\n     *\n     * @param target\n     */\n\n  }, {\n    key: '_calculateDeltasTanh',\n    value: function _calculateDeltasTanh(target) {\n      for (var layer = this.outputLayer; layer >= 0; layer--) {\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var output = this.outputs[layer][node];\n\n          var error = 0;\n          if (layer === this.outputLayer) {\n            error = target[node] - output;\n          } else {\n            var deltas = this.deltas[layer + 1];\n            for (var k = 0; k < deltas.length; k++) {\n              error += deltas[k] * this.weights[layer + 1][k][node];\n            }\n          }\n          this.errors[layer][node] = error;\n          this.deltas[layer][node] = (1 - output * output) * error;\n        }\n      }\n    }\n\n    /**\n     *\n     * Changes weights of networks\n     */\n\n  }, {\n    key: 'adjustWeights',\n    value: function adjustWeights() {\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        var incoming = this.outputs[layer - 1];\n\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var delta = this.deltas[layer][node];\n\n          for (var k = 0; k < incoming.length; k++) {\n            var change = this.changes[layer][node][k];\n\n            change = this.trainOpts.learningRate * delta * incoming[k] + this.trainOpts.momentum * change;\n\n            this.changes[layer][node][k] = change;\n            this.weights[layer][node][k] += change;\n          }\n          this.biases[layer][node] += this.trainOpts.learningRate * delta;\n        }\n      }\n    }\n  }, {\n    key: '_setupAdam',\n    value: function _setupAdam() {\n      this.biasChangesLow = [];\n      this.biasChangesHigh = [];\n      this.changesLow = [];\n      this.changesHigh = [];\n      this.iterations = 0;\n\n      for (var layer = 0; layer <= this.outputLayer; layer++) {\n        var size = this.sizes[layer];\n        if (layer > 0) {\n          this.biasChangesLow[layer] = (0, _zeros2.default)(size);\n          this.biasChangesHigh[layer] = (0, _zeros2.default)(size);\n          this.changesLow[layer] = new Array(size);\n          this.changesHigh[layer] = new Array(size);\n\n          for (var node = 0; node < size; node++) {\n            var prevSize = this.sizes[layer - 1];\n            this.changesLow[layer][node] = (0, _zeros2.default)(prevSize);\n            this.changesHigh[layer][node] = (0, _zeros2.default)(prevSize);\n          }\n        }\n      }\n\n      this.adjustWeights = this._adjustWeightsAdam;\n    }\n  }, {\n    key: '_adjustWeightsAdam',\n    value: function _adjustWeightsAdam() {\n      var trainOpts = this.trainOpts;\n      this.iterations++;\n\n      for (var layer = 1; layer <= this.outputLayer; layer++) {\n        var incoming = this.outputs[layer - 1];\n\n        for (var node = 0; node < this.sizes[layer]; node++) {\n          var delta = this.deltas[layer][node];\n\n          for (var k = 0; k < incoming.length; k++) {\n            var gradient = delta * incoming[k];\n            var changeLow = this.changesLow[layer][node][k] * trainOpts.beta1 + (1 - trainOpts.beta1) * gradient;\n            var changeHigh = this.changesHigh[layer][node][k] * trainOpts.beta2 + (1 - trainOpts.beta2) * gradient * gradient;\n\n            var momentumCorrection = changeLow / (1 - Math.pow(trainOpts.beta1, this.iterations));\n            var gradientCorrection = changeHigh / (1 - Math.pow(trainOpts.beta2, this.iterations));\n\n            this.changesLow[layer][node][k] = changeLow;\n            this.changesHigh[layer][node][k] = changeHigh;\n            this.weights[layer][node][k] += this.trainOpts.learningRate * momentumCorrection / (Math.sqrt(gradientCorrection) + trainOpts.epsilon);\n          }\n\n          var biasGradient = this.deltas[layer][node];\n          var biasChangeLow = this.biasChangesLow[layer][node] * trainOpts.beta1 + (1 - trainOpts.beta1) * biasGradient;\n          var biasChangeHigh = this.biasChangesHigh[layer][node] * trainOpts.beta2 + (1 - trainOpts.beta2) * biasGradient * biasGradient;\n\n          var biasMomentumCorrection = this.biasChangesLow[layer][node] / (1 - Math.pow(trainOpts.beta1, this.iterations));\n          var biasGradientCorrection = this.biasChangesHigh[layer][node] / (1 - Math.pow(trainOpts.beta2, this.iterations));\n\n          this.biasChangesLow[layer][node] = biasChangeLow;\n          this.biasChangesHigh[layer][node] = biasChangeHigh;\n          this.biases[layer][node] += trainOpts.learningRate * biasMomentumCorrection / (Math.sqrt(biasGradientCorrection) + trainOpts.epsilon);\n        }\n      }\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {*}\n     */\n\n  }, {\n    key: 'formatData',\n    value: function formatData(data) {\n      if (!Array.isArray(data)) {\n        // turn stream datum into array\n        data = [data];\n      }\n\n      if (!Array.isArray(data[0].input)) {\n        if (this.inputLookup) {\n          this.inputLookupLength = Object.keys(this.inputLookup).length;\n        } else {\n          var inputLookup = new _lookupTable2.default(data, 'input');\n          this.inputLookup = inputLookup.table;\n          this.inputLookupLength = inputLookup.length;\n        }\n      }\n\n      if (!Array.isArray(data[0].output)) {\n        if (this.outputLookup) {\n          this.outputLookupLength = Object.keys(this.outputLookup).length;\n        } else {\n          var _lookup = new _lookupTable2.default(data, 'output');\n          this.outputLookup = _lookup.table;\n          this.outputLookupLength = _lookup.length;\n        }\n      }\n\n      if (typeof this._formatInput === 'undefined') {\n        this._formatInput = getTypedArrayFn(data[0].input, this.inputLookup);\n        this._formatOutput = getTypedArrayFn(data[0].output, this.outputLookup);\n      }\n\n      // turn sparse hash input into arrays with 0s as filler\n      if (this._formatInput && this._formatOutput) {\n        var result = [];\n        for (var i = 0; i < data.length; i++) {\n          result.push({\n            input: this._formatInput(data[i].input),\n            output: this._formatOutput(data[i].output)\n          });\n        }\n        return result;\n      } else if (this._formatInput) {\n        var _result = [];\n        for (var _i = 0; _i < data.length; _i++) {\n          _result.push({\n            input: this._formatInput(data[_i].input),\n            output: data[_i].output\n          });\n        }\n        return _result;\n      } else if (this._formatOutput) {\n        var _result2 = [];\n        for (var _i2 = 0; _i2 < data.length; _i2++) {\n          _result2.push({\n            input: data[_i2].input,\n            output: this._formatOutput(data[_i2].output)\n          });\n        }\n        return _result2;\n      }\n      return data;\n    }\n  }, {\n    key: 'addFormat',\n    value: function addFormat(data) {\n      this.inputLookup = _lookup3.default.addKeys(data.input, this.inputLookup);\n      if (this.inputLookup) {\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\n      }\n      this.outputLookup = _lookup3.default.addKeys(data.output, this.outputLookup);\n      if (this.outputLookup) {\n        this.outputLookupLength = Object.keys(this.outputLookup).length;\n      }\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {\n     *  {\n     *    error: number,\n     *    misclasses: Array,\n     *  }\n     * }\n     */\n\n  }, {\n    key: 'test',\n    value: function test(data) {\n      var _this4 = this;\n\n      data = this.formatData(data);\n      // for binary classification problems with one output node\n      var isBinary = data[0].output.length === 1;\n      // for classification problems\n      var misclasses = [];\n      // run each pattern through the trained network and collect\n      // error and misclassification statistics\n      var errorSum = 0;\n\n      if (isBinary) {\n        var falsePos = 0;\n        var falseNeg = 0;\n        var truePos = 0;\n        var trueNeg = 0;\n\n        var _loop = function _loop(i) {\n          var output = _this4.runInput(data[i].input);\n          var target = data[i].output;\n          var actual = output[0] > _this4.binaryThresh ? 1 : 0;\n          var expected = target[0];\n\n          if (actual !== expected) {\n            var misclass = data[i];\n            misclasses.push({\n              input: misclass.input,\n              output: misclass.output,\n              actual: actual,\n              expected: expected\n            });\n          }\n\n          if (actual === 0 && expected === 0) {\n            trueNeg++;\n          } else if (actual === 1 && expected === 1) {\n            truePos++;\n          } else if (actual === 0 && expected === 1) {\n            falseNeg++;\n          } else if (actual === 1 && expected === 0) {\n            falsePos++;\n          }\n\n          errorSum += (0, _mse2.default)(output.map(function (value, i) {\n            return target[i] - value;\n          }));\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop(i);\n        }\n\n        return {\n          error: errorSum / data.length,\n          misclasses: misclasses,\n          total: data.length,\n          trueNeg: trueNeg,\n          truePos: truePos,\n          falseNeg: falseNeg,\n          falsePos: falsePos,\n          precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,\n          recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,\n          accuracy: (trueNeg + truePos) / data.length\n        };\n      }\n\n      var _loop2 = function _loop2(i) {\n        var output = _this4.runInput(data[i].input);\n        var target = data[i].output;\n        var actual = output.indexOf((0, _max2.default)(output));\n        var expected = target.indexOf((0, _max2.default)(target));\n\n        if (actual !== expected) {\n          var misclass = data[i];\n          misclasses.push({\n            input: misclass.input,\n            output: misclass.output,\n            actual: actual,\n            expected: expected\n          });\n        }\n\n        errorSum += (0, _mse2.default)(output.map(function (value, i) {\n          return target[i] - value;\n        }));\n      };\n\n      for (var i = 0; i < data.length; i++) {\n        _loop2(i);\n      }\n      return {\n        error: errorSum / data.length,\n        misclasses: misclasses,\n        total: data.length\n      };\n    }\n\n    /**\n     *\n     * @returns\n     *  {\n     *    layers: [\n     *      {\n     *        x: {},\n     *        y: {}\n     *      },\n     *      {\n     *        '0': {\n     *          bias: -0.98771313,\n     *          weights: {\n     *            x: 0.8374838,\n     *            y: 1.245858\n     *          },\n     *        '1': {\n     *          bias: 3.48192004,\n     *          weights: {\n     *            x: 1.7825821,\n     *            y: -2.67899\n     *          }\n     *        }\n     *      },\n     *      {\n     *        f: {\n     *          bias: 0.27205739,\n     *          weights: {\n     *            '0': 1.3161821,\n     *            '1': 2.00436\n     *          }\n     *        }\n     *      }\n     *    ]\n     *  }\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var layers = [];\n      for (var layer = 0; layer <= this.outputLayer; layer++) {\n        layers[layer] = {};\n\n        var nodes = void 0;\n        // turn any internal arrays back into hashes for readable json\n        if (layer === 0 && this.inputLookup) {\n          nodes = Object.keys(this.inputLookup);\n        } else if (this.outputLookup && layer === this.outputLayer) {\n          nodes = Object.keys(this.outputLookup);\n        } else {\n          nodes = (0, _range2.default)(0, this.sizes[layer]);\n        }\n\n        for (var j = 0; j < nodes.length; j++) {\n          var node = nodes[j];\n          layers[layer][node] = {};\n\n          if (layer > 0) {\n            layers[layer][node].bias = this.biases[layer][j];\n            layers[layer][node].weights = {};\n            for (var k in layers[layer - 1]) {\n              var index = k;\n              if (layer === 1 && this.inputLookup) {\n                index = this.inputLookup[k];\n              }\n              layers[layer][node].weights[k] = this.weights[layer][j][index];\n            }\n          }\n        }\n      }\n      return {\n        sizes: this.sizes.slice(0),\n        layers: layers,\n        outputLookup: this.outputLookup !== null,\n        inputLookup: this.inputLookup !== null,\n        activation: this.activation,\n        trainOpts: this.getTrainOptsJSON()\n      };\n    }\n\n    /**\n     *\n     * @param json\n     * @returns {NeuralNetwork}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      Object.assign(this, this.constructor.defaults, json);\n      this.sizes = json.sizes;\n      this.initialize();\n\n      for (var i = 0; i <= this.outputLayer; i++) {\n        var layer = json.layers[i];\n        if (i === 0 && (!layer[0] || json.inputLookup)) {\n          this.inputLookup = _lookup3.default.toHash(layer);\n          this.inputLookupLength = Object.keys(this.inputLookup).length;\n        } else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\n          this.outputLookup = _lookup3.default.toHash(layer);\n        }\n        if (i > 0) {\n          var nodes = Object.keys(layer);\n          this.sizes[i] = nodes.length;\n          for (var j in nodes) {\n            var node = nodes[j];\n            this.biases[i][j] = layer[node].bias;\n            this.weights[i][j] = (0, _toArray2.default)(layer[node].weights);\n          }\n        }\n      }\n      if (json.hasOwnProperty('trainOpts')) {\n        this.updateTrainingOptions(json.trainOpts);\n      }\n      return this;\n    }\n\n    /**\n     *\n     * @returns {Function}\n     */\n\n  }, {\n    key: 'toFunction',\n    value: function toFunction() {\n      var activation = this.activation;\n      var leakyReluAlpha = this.leakyReluAlpha;\n      var needsVar = false;\n      function nodeHandle(layers, layerNumber, nodeKey) {\n        if (layerNumber === 0) {\n          return typeof nodeKey === 'string' ? 'input[\\'' + nodeKey + '\\']' : 'input[' + nodeKey + ']';\n        }\n\n        var layer = layers[layerNumber];\n        var node = layer[nodeKey];\n        var result = ['(', node.bias];\n        for (var w in node.weights) {\n          if (node.weights[w] < 0) {\n            result.push(node.weights[w] + '*' + nodeHandle(layers, layerNumber - 1, w));\n          } else {\n            result.push('+' + node.weights[w] + '*' + nodeHandle(layers, layerNumber - 1, w));\n          }\n        }\n        result.push(')');\n\n        switch (activation) {\n          case 'sigmoid':\n            return '1/(1+1/Math.exp(' + result.join('') + '))';\n          case 'relu':\n            {\n              needsVar = true;\n              return '((v=' + result.join('') + ')<0?0:v)';\n            }\n          case 'leaky-relu':\n            {\n              needsVar = true;\n              return '((v=' + result.join('') + ')<0?0:' + leakyReluAlpha + '*v)';\n            }\n          case 'tanh':\n            return 'Math.tanh(' + result.join('') + ')';\n          default:\n            throw new Error('unknown activation type ' + activation);\n        }\n      }\n\n      var layers = this.toJSON().layers;\n      var layersAsMath = [];\n      var result = void 0;\n      for (var i in layers[layers.length - 1]) {\n        layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\n      }\n      if (this.outputLookup) {\n        result = '{' + Object.keys(this.outputLookup).map(function (key, i) {\n          return '\\'' + key + '\\':' + layersAsMath[i];\n        }) + '}';\n      } else {\n        result = '[' + layersAsMath.join(',') + ']';\n      }\n\n      return new Function('input', (needsVar ? 'var v;' : '') + 'return ' + result + ';');\n    }\n  }, {\n    key: 'isRunnable',\n    get: function get() {\n      var _this5 = this;\n\n      if (!this.runInput) {\n        console.error('Activation function has not been initialized, did you run train()?');\n        return false;\n      }\n\n      var checkFns = ['sizes', 'outputLayer', 'biases', 'weights', 'outputs', 'deltas', 'changes', 'errors'].filter(function (c) {\n        return _this5[c] === null;\n      });\n\n      if (checkFns.length > 0) {\n        console.error('Some settings have not been initialized correctly, did you run train()? Found issues with: ' + checkFns.join(', '));\n        return false;\n      }\n      return true;\n    }\n  }]);\n\n  return NeuralNetwork;\n}();\n\nexports.default = NeuralNetwork;\n\n\nfunction getTypedArrayFn(value, table) {\n  if (value.buffer instanceof ArrayBuffer) {\n    return null;\n  } else if (Array.isArray(value)) {\n    return _cast.arrayToFloat32Array;\n  } else {\n    var length = Object.keys(table).length;\n    return function (v) {\n      var array = new Float32Array(length);\n      for (var p in table) {\n        array[table[p]] = v[p] || 0;\n      }\n      return array;\n    };\n  }\n}\n//# sourceMappingURL=neural-network.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/neural-network.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/gru-time-step.js":
/*!***************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/gru-time-step.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _matrix = __webpack_require__(/*! ./matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _gru = __webpack_require__(/*! ./gru */ \"./node_modules/brain.js/dist/recurrent/gru.js\");\n\nvar _gru2 = _interopRequireDefault(_gru);\n\nvar _rnnTimeStep = __webpack_require__(/*! ./rnn-time-step */ \"./node_modules/brain.js/dist/recurrent/rnn-time-step.js\");\n\nvar _rnnTimeStep2 = _interopRequireDefault(_rnnTimeStep);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar GRUTimeStep = function (_RNNTimeStep) {\n  _inherits(GRUTimeStep, _RNNTimeStep);\n\n  function GRUTimeStep() {\n    _classCallCheck(this, GRUTimeStep);\n\n    return _possibleConstructorReturn(this, (GRUTimeStep.__proto__ || Object.getPrototypeOf(GRUTimeStep)).apply(this, arguments));\n  }\n\n  _createClass(GRUTimeStep, [{\n    key: 'getModel',\n    value: function getModel(hiddenSize, prevSize) {\n      return _gru2.default.prototype.getModel(hiddenSize, prevSize);\n    }\n\n    /**\n     *\n     * @param {Equation} equation\n     * @param {Matrix} inputMatrix\n     * @param {Matrix} previousResult\n     * @param {Object} hiddenLayer\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'getEquation',\n    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n      return _gru2.default.prototype.getEquation(equation, inputMatrix, previousResult, hiddenLayer);\n    }\n  }]);\n\n  return GRUTimeStep;\n}(_rnnTimeStep2.default);\n\nexports.default = GRUTimeStep;\n//# sourceMappingURL=gru-time-step.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/gru-time-step.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/gru.js":
/*!*****************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/gru.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _matrix = __webpack_require__(/*! ./matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _randomMatrix = __webpack_require__(/*! ./matrix/random-matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/random-matrix.js\");\n\nvar _randomMatrix2 = _interopRequireDefault(_randomMatrix);\n\nvar _rnn = __webpack_require__(/*! ./rnn */ \"./node_modules/brain.js/dist/recurrent/rnn.js\");\n\nvar _rnn2 = _interopRequireDefault(_rnn);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar GRU = function (_RNN) {\n  _inherits(GRU, _RNN);\n\n  function GRU() {\n    _classCallCheck(this, GRU);\n\n    return _possibleConstructorReturn(this, (GRU.__proto__ || Object.getPrototypeOf(GRU)).apply(this, arguments));\n  }\n\n  _createClass(GRU, [{\n    key: 'getModel',\n    value: function getModel(hiddenSize, prevSize) {\n      return {\n        // update Gate\n        //wzxh\n        updateGateInputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wzhh\n        updateGateHiddenMatrix: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bz\n        updateGateBias: new _matrix2.default(hiddenSize, 1),\n\n        // reset Gate\n        //wrxh\n        resetGateInputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wrhh\n        resetGateHiddenMatrix: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //br\n        resetGateBias: new _matrix2.default(hiddenSize, 1),\n\n        // cell write parameters\n        //wcxh\n        cellWriteInputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wchh\n        cellWriteHiddenMatrix: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bc\n        cellWriteBias: new _matrix2.default(hiddenSize, 1)\n      };\n    }\n\n    /**\n     *\n     * @param {Equation} equation\n     * @param {Matrix} inputMatrix\n     * @param {Matrix} previousResult\n     * @param {Object} hiddenLayer\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'getEquation',\n    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n      var sigmoid = equation.sigmoid.bind(equation);\n      var add = equation.add.bind(equation);\n      var multiply = equation.multiply.bind(equation);\n      var multiplyElement = equation.multiplyElement.bind(equation);\n      var tanh = equation.tanh.bind(equation);\n      var allOnes = equation.allOnes.bind(equation);\n      var cloneNegative = equation.cloneNegative.bind(equation);\n\n      // update gate\n      var updateGate = sigmoid(add(add(multiply(hiddenLayer.updateGateInputMatrix, inputMatrix), multiply(hiddenLayer.updateGateHiddenMatrix, previousResult)), hiddenLayer.updateGateBias));\n\n      // reset gate\n      var resetGate = sigmoid(add(add(multiply(hiddenLayer.resetGateInputMatrix, inputMatrix), multiply(hiddenLayer.resetGateHiddenMatrix, previousResult)), hiddenLayer.resetGateBias));\n\n      // cell\n      var cell = tanh(add(add(multiply(hiddenLayer.cellWriteInputMatrix, inputMatrix), multiply(hiddenLayer.cellWriteHiddenMatrix, multiplyElement(resetGate, previousResult))), hiddenLayer.cellWriteBias));\n\n      // compute hidden state as gated, saturated cell activations\n      // negate updateGate\n      return add(multiplyElement(add(allOnes(updateGate.rows, updateGate.columns), cloneNegative(updateGate)), cell), multiplyElement(previousResult, updateGate));\n    }\n  }]);\n\n  return GRU;\n}(_rnn2.default);\n\nexports.default = GRU;\n//# sourceMappingURL=gru.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/gru.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/lstm-time-step.js":
/*!****************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/lstm-time-step.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _matrix = __webpack_require__(/*! ./matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _lstm = __webpack_require__(/*! ./lstm */ \"./node_modules/brain.js/dist/recurrent/lstm.js\");\n\nvar _lstm2 = _interopRequireDefault(_lstm);\n\nvar _rnnTimeStep = __webpack_require__(/*! ./rnn-time-step */ \"./node_modules/brain.js/dist/recurrent/rnn-time-step.js\");\n\nvar _rnnTimeStep2 = _interopRequireDefault(_rnnTimeStep);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LSTMTimeStep = function (_RNNTimeStep) {\n  _inherits(LSTMTimeStep, _RNNTimeStep);\n\n  function LSTMTimeStep() {\n    _classCallCheck(this, LSTMTimeStep);\n\n    return _possibleConstructorReturn(this, (LSTMTimeStep.__proto__ || Object.getPrototypeOf(LSTMTimeStep)).apply(this, arguments));\n  }\n\n  _createClass(LSTMTimeStep, [{\n    key: 'getModel',\n    value: function getModel(hiddenSize, prevSize) {\n      return _lstm2.default.prototype.getModel.call(this, hiddenSize, prevSize);\n    }\n\n    /**\n     *\n     * @param {Equation} equation\n     * @param {Matrix} inputMatrix\n     * @param {Matrix} previousResult\n     * @param {Object} hiddenLayer\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'getEquation',\n    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n      return _lstm2.default.prototype.getEquation.call(this, equation, inputMatrix, previousResult, hiddenLayer);\n    }\n  }]);\n\n  return LSTMTimeStep;\n}(_rnnTimeStep2.default);\n\nexports.default = LSTMTimeStep;\n//# sourceMappingURL=lstm-time-step.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/lstm-time-step.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/lstm.js":
/*!******************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/lstm.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _matrix = __webpack_require__(/*! ./matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _randomMatrix = __webpack_require__(/*! ./matrix/random-matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/random-matrix.js\");\n\nvar _randomMatrix2 = _interopRequireDefault(_randomMatrix);\n\nvar _rnn = __webpack_require__(/*! ./rnn */ \"./node_modules/brain.js/dist/recurrent/rnn.js\");\n\nvar _rnn2 = _interopRequireDefault(_rnn);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LSTM = function (_RNN) {\n  _inherits(LSTM, _RNN);\n\n  function LSTM() {\n    _classCallCheck(this, LSTM);\n\n    return _possibleConstructorReturn(this, (LSTM.__proto__ || Object.getPrototypeOf(LSTM)).apply(this, arguments));\n  }\n\n  _createClass(LSTM, [{\n    key: 'getModel',\n    value: function getModel(hiddenSize, prevSize) {\n      return {\n        // gates parameters\n        //wix\n        inputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wih\n        inputHidden: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bi\n        inputBias: new _matrix2.default(hiddenSize, 1),\n\n        //wfx\n        forgetMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wfh\n        forgetHidden: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bf\n        forgetBias: new _matrix2.default(hiddenSize, 1),\n\n        //wox\n        outputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //woh\n        outputHidden: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bo\n        outputBias: new _matrix2.default(hiddenSize, 1),\n\n        // cell write params\n        //wcx\n        cellActivationMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wch\n        cellActivationHidden: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bc\n        cellActivationBias: new _matrix2.default(hiddenSize, 1)\n      };\n    }\n\n    /**\n     *\n     * @param {Equation} equation\n     * @param {Matrix} inputMatrix\n     * @param {Matrix} previousResult\n     * @param {Object} hiddenLayer\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'getEquation',\n    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n      var sigmoid = equation.sigmoid.bind(equation);\n      var add = equation.add.bind(equation);\n      var multiply = equation.multiply.bind(equation);\n      var multiplyElement = equation.multiplyElement.bind(equation);\n      var tanh = equation.tanh.bind(equation);\n\n      var inputGate = sigmoid(add(add(multiply(hiddenLayer.inputMatrix, inputMatrix), multiply(hiddenLayer.inputHidden, previousResult)), hiddenLayer.inputBias));\n\n      var forgetGate = sigmoid(add(add(multiply(hiddenLayer.forgetMatrix, inputMatrix), multiply(hiddenLayer.forgetHidden, previousResult)), hiddenLayer.forgetBias));\n\n      // output gate\n      var outputGate = sigmoid(add(add(multiply(hiddenLayer.outputMatrix, inputMatrix), multiply(hiddenLayer.outputHidden, previousResult)), hiddenLayer.outputBias));\n\n      // write operation on cells\n      var cellWrite = tanh(add(add(multiply(hiddenLayer.cellActivationMatrix, inputMatrix), multiply(hiddenLayer.cellActivationHidden, previousResult)), hiddenLayer.cellActivationBias));\n\n      // compute new cell activation\n      var retainCell = multiplyElement(forgetGate, previousResult); // what do we keep from cell\n      var writeCell = multiplyElement(inputGate, cellWrite); // what do we write to cell\n      var cell = add(retainCell, writeCell); // new cell contents\n\n      // compute hidden state as gated, saturated cell activations\n      return multiplyElement(outputGate, tanh(cell));\n    }\n  }]);\n\n  return LSTM;\n}(_rnn2.default);\n\nexports.default = LSTM;\n//# sourceMappingURL=lstm.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/lstm.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/add-b.js":
/*!**************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/add-b.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addB;\n/**\n * adds {from} deltas to {left} and {right} deltas\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Matrix} right\n */\nfunction addB(product, left, right) {\n  for (var i = 0; i < product.deltas.length; i++) {\n    left.deltas[i] = product.deltas[i];\n    right.deltas[i] = product.deltas[i];\n  }\n}\n//# sourceMappingURL=add-b.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/add-b.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/add.js":
/*!************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/add.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = add;\n/**\n * add {left} and {right} matrix weights into {into}\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Matrix} right\n */\nfunction add(product, left, right) {\n  for (var i = 0; i < left.weights.length; i++) {\n    product.weights[i] = left.weights[i] + right.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n//# sourceMappingURL=add.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/add.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/all-ones.js":
/*!*****************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/all-ones.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = allOnes;\n/**\n * makes matrix weights and deltas all ones\n * @param {Matrix} product\n */\nfunction allOnes(product) {\n  for (var i = 0; i < product.weights.length; i++) {\n    product.weights[i] = 1;\n    product.deltas[i] = 0;\n  }\n}\n//# sourceMappingURL=all-ones.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/all-ones.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/clone-negative.js":
/*!***********************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/clone-negative.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cloneNegative;\n/**\n *\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction cloneNegative(product, left) {\n  product.rows = parseInt(left.rows);\n  product.columns = parseInt(left.columns);\n  product.weights = left.weights.slice(0);\n  product.deltas = left.deltas.slice(0);\n  for (var i = 0; i < left.weights.length; i++) {\n    product.weights[i] = -left.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n//# sourceMappingURL=clone-negative.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/clone-negative.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/copy.js":
/*!*************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/copy.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = copy;\n/*\n *\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction copy(product, left) {\n  product.rows = parseInt(left.rows);\n  product.columns = parseInt(left.columns);\n  product.weights = left.weights.slice(0);\n  product.deltas = left.deltas.slice(0);\n}\n//# sourceMappingURL=copy.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/copy.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/equation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/equation.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = __webpack_require__(/*! ./ */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _2 = _interopRequireDefault(_);\n\nvar _onesMatrix = __webpack_require__(/*! ./ones-matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/ones-matrix.js\");\n\nvar _onesMatrix2 = _interopRequireDefault(_onesMatrix);\n\nvar _copy = __webpack_require__(/*! ./copy */ \"./node_modules/brain.js/dist/recurrent/matrix/copy.js\");\n\nvar _copy2 = _interopRequireDefault(_copy);\n\nvar _cloneNegative2 = __webpack_require__(/*! ./clone-negative */ \"./node_modules/brain.js/dist/recurrent/matrix/clone-negative.js\");\n\nvar _cloneNegative3 = _interopRequireDefault(_cloneNegative2);\n\nvar _add2 = __webpack_require__(/*! ./add */ \"./node_modules/brain.js/dist/recurrent/matrix/add.js\");\n\nvar _add3 = _interopRequireDefault(_add2);\n\nvar _addB = __webpack_require__(/*! ./add-b */ \"./node_modules/brain.js/dist/recurrent/matrix/add-b.js\");\n\nvar _addB2 = _interopRequireDefault(_addB);\n\nvar _allOnes2 = __webpack_require__(/*! ./all-ones */ \"./node_modules/brain.js/dist/recurrent/matrix/all-ones.js\");\n\nvar _allOnes3 = _interopRequireDefault(_allOnes2);\n\nvar _multiply2 = __webpack_require__(/*! ./multiply */ \"./node_modules/brain.js/dist/recurrent/matrix/multiply.js\");\n\nvar _multiply3 = _interopRequireDefault(_multiply2);\n\nvar _multiplyB = __webpack_require__(/*! ./multiply-b */ \"./node_modules/brain.js/dist/recurrent/matrix/multiply-b.js\");\n\nvar _multiplyB2 = _interopRequireDefault(_multiplyB);\n\nvar _multiplyElement2 = __webpack_require__(/*! ./multiply-element */ \"./node_modules/brain.js/dist/recurrent/matrix/multiply-element.js\");\n\nvar _multiplyElement3 = _interopRequireDefault(_multiplyElement2);\n\nvar _multiplyElementB = __webpack_require__(/*! ./multiply-element-b */ \"./node_modules/brain.js/dist/recurrent/matrix/multiply-element-b.js\");\n\nvar _multiplyElementB2 = _interopRequireDefault(_multiplyElementB);\n\nvar _relu2 = __webpack_require__(/*! ./relu */ \"./node_modules/brain.js/dist/recurrent/matrix/relu.js\");\n\nvar _relu3 = _interopRequireDefault(_relu2);\n\nvar _reluB = __webpack_require__(/*! ./relu-b */ \"./node_modules/brain.js/dist/recurrent/matrix/relu-b.js\");\n\nvar _reluB2 = _interopRequireDefault(_reluB);\n\nvar _rowPluck = __webpack_require__(/*! ./row-pluck */ \"./node_modules/brain.js/dist/recurrent/matrix/row-pluck.js\");\n\nvar _rowPluck2 = _interopRequireDefault(_rowPluck);\n\nvar _rowPluckB = __webpack_require__(/*! ./row-pluck-b */ \"./node_modules/brain.js/dist/recurrent/matrix/row-pluck-b.js\");\n\nvar _rowPluckB2 = _interopRequireDefault(_rowPluckB);\n\nvar _sigmoid2 = __webpack_require__(/*! ./sigmoid */ \"./node_modules/brain.js/dist/recurrent/matrix/sigmoid.js\");\n\nvar _sigmoid3 = _interopRequireDefault(_sigmoid2);\n\nvar _sigmoidB = __webpack_require__(/*! ./sigmoid-b */ \"./node_modules/brain.js/dist/recurrent/matrix/sigmoid-b.js\");\n\nvar _sigmoidB2 = _interopRequireDefault(_sigmoidB);\n\nvar _tanh2 = __webpack_require__(/*! ./tanh */ \"./node_modules/brain.js/dist/recurrent/matrix/tanh.js\");\n\nvar _tanh3 = _interopRequireDefault(_tanh2);\n\nvar _tanhB = __webpack_require__(/*! ./tanh-b */ \"./node_modules/brain.js/dist/recurrent/matrix/tanh-b.js\");\n\nvar _tanhB2 = _interopRequireDefault(_tanhB);\n\nvar _softmax = __webpack_require__(/*! ./softmax */ \"./node_modules/brain.js/dist/recurrent/matrix/softmax.js\");\n\nvar _softmax2 = _interopRequireDefault(_softmax);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Equation = function () {\n  function Equation() {\n    _classCallCheck(this, Equation);\n\n    this.inputRow = 0;\n    this.inputValue = null;\n    this.states = [];\n  }\n\n  /**\n   * connects two matrices together by add\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n\n\n  _createClass(Equation, [{\n    key: 'add',\n    value: function add(left, right) {\n      if (left.weights.length !== right.weights.length) {\n        throw new Error('misaligned matrices');\n      }\n      var product = new _2.default(left.rows, left.columns);\n      this.states.push({\n        left: left,\n        right: right,\n        product: product,\n        forwardFn: _add3.default,\n        backpropagationFn: _addB2.default\n      });\n      return product;\n    }\n\n    /**\n     *\n     * @param {Number} rows\n     * @param {Number} columns\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'allOnes',\n    value: function allOnes(rows, columns) {\n      var product = new _2.default(rows, columns);\n      this.states.push({\n        left: product,\n        product: product,\n        forwardFn: _allOnes3.default\n      });\n      return product;\n    }\n\n    /**\n     *\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'cloneNegative',\n    value: function cloneNegative(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _cloneNegative3.default\n      });\n      return product;\n    }\n\n    /**\n     * connects two matrices together by subtract\n     * @param {Matrix} left\n     * @param {Matrix} right\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'subtract',\n    value: function subtract(left, right) {\n      if (left.weights.length !== right.weights.length) {\n        throw new Error('misaligned matrices');\n      }\n      return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);\n    }\n\n    /**\n     * connects two matrices together by multiply\n     * @param {Matrix} left\n     * @param {Matrix} right\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'multiply',\n    value: function multiply(left, right) {\n      if (left.columns !== right.rows) {\n        throw new Error('misaligned matrices');\n      }\n      var product = new _2.default(left.rows, right.columns);\n      this.states.push({\n        left: left,\n        right: right,\n        product: product,\n        forwardFn: _multiply3.default,\n        backpropagationFn: _multiplyB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects two matrices together by multiplyElement\n     * @param {Matrix} left\n     * @param {Matrix} right\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'multiplyElement',\n    value: function multiplyElement(left, right) {\n      if (left.weights.length !== right.weights.length) {\n        throw new Error('misaligned matrices');\n      }\n      var product = new _2.default(left.rows, left.columns);\n      this.states.push({\n        left: left,\n        right: right,\n        product: product,\n        forwardFn: _multiplyElement3.default,\n        backpropagationFn: _multiplyElementB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects a matrix to relu\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'relu',\n    value: function relu(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _relu3.default,\n        backpropagationFn: _reluB2.default\n      });\n      return product;\n    }\n\n    /**\n     * copy a matrix\n     * @param {Matrix} input\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'input',\n    value: function input(_input) {\n      var _this = this;\n\n      this.states.push({\n        product: _input,\n        forwardFn: function forwardFn(product) {\n          product.weights = _input.weights = _this.inputValue;\n        }\n      });\n      return _input;\n    }\n\n    /**\n     * connects a matrix via a row\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'inputMatrixToRow',\n    value: function inputMatrixToRow(m) {\n      var self = this;\n      var product = new _2.default(m.columns, 1);\n      this.states.push({\n        left: m,\n        get right() {\n          return self.inputRow;\n        },\n        product: product,\n        forwardFn: _rowPluck2.default,\n        backpropagationFn: _rowPluckB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects a matrix to sigmoid\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'sigmoid',\n    value: function sigmoid(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _sigmoid3.default,\n        backpropagationFn: _sigmoidB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects a matrix to tanh\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'tanh',\n    value: function tanh(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _tanh3.default,\n        backpropagationFn: _tanhB2.default\n      });\n      return product;\n    }\n\n    /**\n     *\n     * @param m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'observe',\n    value: function observe(m) {\n      var iForward = 0;\n      var iBackpropagate = 0;\n      this.states.push({\n        forwardFn: function forwardFn() {\n          iForward++;\n        },\n        backpropagationFn: function backpropagationFn() {\n          iBackpropagate++;\n        }\n      });\n      return m;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'runIndex',\n    value: function runIndex() {\n      var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this.inputRow = rowIndex;\n      var state = void 0;\n      for (var i = 0, max = this.states.length; i < max; i++) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('forwardFn')) {\n          continue;\n        }\n        state.forwardFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'runInput',\n    value: function runInput(inputValue) {\n      this.inputValue = inputValue;\n      var state = void 0;\n      for (var i = 0, max = this.states.length; i < max; i++) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('forwardFn')) {\n          continue;\n        }\n        state.forwardFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'backpropagate',\n    value: function backpropagate() {\n      var i = this.states.length;\n      var state = void 0;\n      while (i-- > 0) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('backpropagationFn')) {\n          continue;\n        }\n        state.backpropagationFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'backpropagateIndex',\n    value: function backpropagateIndex() {\n      var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this.inputRow = rowIndex;\n\n      var i = this.states.length;\n      var state = void 0;\n      while (i-- > 0) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('backpropagationFn')) {\n          continue;\n        }\n        state.backpropagationFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n  }, {\n    key: 'predictTarget',\n    value: function predictTarget(input, target) {\n      var output = this.runInput(input);\n      var errorSum = 0;\n      for (var i = 0; i < output.weights.length; i++) {\n        var error = output.weights[i] - target[i];\n        // set gradients into log probabilities\n        errorSum += Math.abs(error);\n        // write gradients into log probabilities\n        output.deltas[i] = error;\n      }\n      return errorSum;\n    }\n  }, {\n    key: 'predictTargetIndex',\n    value: function predictTargetIndex(input, target) {\n      var output = this.runIndex(input);\n      // set gradients into log probabilities\n      var logProbabilities = output; // interpret output as log probabilities\n      var probabilities = (0, _softmax2.default)(output); // compute the softmax probabilities\n\n      // write gradients into log probabilities\n      logProbabilities.deltas = probabilities.weights.slice(0);\n      logProbabilities.deltas[target] -= 1;\n\n      // accumulate base 2 log prob and do smoothing\n      return -Math.log2(probabilities.weights[target]);\n    }\n  }]);\n\n  return Equation;\n}();\n\nexports.default = Equation;\n//# sourceMappingURL=equation.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/equation.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _zeros = __webpack_require__(/*! ../../utilities/zeros */ \"./node_modules/brain.js/dist/utilities/zeros.js\");\n\nvar _zeros2 = _interopRequireDefault(_zeros);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A matrix\n * @param {Number} [rows]\n * @param {Number} [columns]\n * @constructor\n */\nvar Matrix = function () {\n  function Matrix(rows, columns) {\n    _classCallCheck(this, Matrix);\n\n    if (rows === undefined) return;\n    if (columns === undefined) return;\n\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = (0, _zeros2.default)(rows * columns);\n    this.deltas = (0, _zeros2.default)(rows * columns);\n  }\n\n  /**\n   *\n   * @param {Number} row\n   * @param {Number} col\n   * @returns {Float32Array|Array}\n   */\n\n\n  _createClass(Matrix, [{\n    key: 'getWeights',\n    value: function getWeights(row, col) {\n      // slow but careful accessor function\n      // we want row-major order\n      var ix = this.columns * row + col;\n      if (ix < 0 && ix >= this.weights.length) throw new Error('get accessor is skewed');\n      return this.weights[ix];\n    }\n\n    /**\n     *\n     * @param {Number} row\n     * @param {Number} col\n     * @param v\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'setWeight',\n    value: function setWeight(row, col, v) {\n      // slow but careful accessor function\n      var ix = this.columns * row + col;\n      if (ix < 0 && ix >= this.weights.length) throw new Error('set accessor is skewed');\n      this.weights[ix] = v;\n    }\n\n    /**\n     *\n     * @param {Number} row\n     * @param {Number} col\n     * @param v\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'setDeltas',\n    value: function setDeltas(row, col, v) {\n      // slow but careful accessor function\n      var ix = this.columns * row + col;\n      if (ix < 0 && ix >= this.weights.length) throw new Error('set accessor is skewed');\n      this.deltas[ix] = v;\n    }\n\n    /**\n     *\n     * @returns {{rows: *, columns: *, weights: Array}}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return {\n        rows: this.rows,\n        columns: this.columns,\n        weights: this.weights.slice(0)\n      };\n    }\n  }, {\n    key: 'weightsToArray',\n    value: function weightsToArray() {\n      var deltas = [];\n      var row = 0;\n      var column = 0;\n      for (var i = 0; i < this.weights.length; i++) {\n        if (column === 0) {\n          deltas.push([]);\n        }\n        deltas[row].push(this.weights[i]);\n        column++;\n        if (column >= this.columns) {\n          column = 0;\n          row++;\n        }\n      }\n      return deltas;\n    }\n  }, {\n    key: 'deltasToArray',\n    value: function deltasToArray() {\n      var deltas = [];\n      var row = 0;\n      var column = 0;\n      for (var i = 0; i < this.deltas.length; i++) {\n        if (column === 0) {\n          deltas.push([]);\n        }\n        deltas[row].push(this.deltas[i]);\n        column++;\n        if (column >= this.columns) {\n          column = 0;\n          row++;\n        }\n      }\n      return deltas;\n    }\n  }], [{\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      var matrix = new Matrix(json.rows, json.columns);\n      for (var i = 0, max = json.rows * json.columns; i < max; i++) {\n        matrix.weights[i] = json.weights[i]; // copy over weights\n      }\n      return matrix;\n    }\n\n    /**\n     *\n     * @param weightRows\n     * @param [deltasRows]\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'fromArray',\n    value: function fromArray(weightRows, deltasRows) {\n      var rows = weightRows.length;\n      var columns = weightRows[0].length;\n      var m = new Matrix(rows, columns);\n\n      deltasRows = deltasRows || weightRows;\n\n      for (var rowIndex = 0; rowIndex < rows; rowIndex++) {\n        var weightValues = weightRows[rowIndex];\n        var deltasValues = deltasRows[rowIndex];\n        for (var columnIndex = 0; columnIndex < columns; columnIndex++) {\n          m.setWeight(rowIndex, columnIndex, weightValues[columnIndex]);\n          m.setDeltas(rowIndex, columnIndex, deltasValues[columnIndex]);\n        }\n      }\n\n      return m;\n    }\n  }]);\n\n  return Matrix;\n}();\n\nexports.default = Matrix;\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/index.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/max-i.js":
/*!**************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/max-i.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = maxI;\n/**\n *\n * @param {Matrix} m\n * @returns {number}\n */\nfunction maxI(m) {\n  // argmax of array w\n  var weights = m.weights;\n\n  var maxv = weights[0];\n  var maxix = 0;\n  for (var i = 1; i < weights.length; i++) {\n    var v = weights[i];\n    if (v < maxv) continue;\n\n    maxix = i;\n    maxv = v;\n  }\n  return maxix;\n};\n//# sourceMappingURL=max-i.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/max-i.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/multiply-b.js":
/*!*******************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/multiply-b.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = multiplyB;\n/**\n * multiplies {from} deltas to {left} and {right}\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Matrix} right\n */\nfunction multiplyB(product, left, right) {\n  var leftRows = left.rows;\n  var leftColumns = left.columns;\n  var rightColumns = right.columns;\n\n  // loop over rows of left\n  for (var leftRow = 0; leftRow < leftRows; leftRow++) {\n    var leftRowBase = leftColumns * leftRow;\n    var rightRowBase = rightColumns * leftRow;\n    // loop over cols of right\n    for (var rightColumn = 0; rightColumn < rightColumns; rightColumn++) {\n\n      //loop over columns of left\n      for (var leftColumn = 0; leftColumn < leftColumns; leftColumn++) {\n        var rightColumnBase = rightColumns * leftColumn;\n        var _leftRow = leftRowBase + leftColumn;\n        var rightRow = rightColumnBase + rightColumn;\n        var backPropagateValue = product.deltas[rightRowBase + rightColumn];\n        left.deltas[_leftRow] += right.weights[rightRow] * backPropagateValue;\n        right.deltas[rightRow] += left.weights[_leftRow] * backPropagateValue;\n      }\n    }\n  }\n}\n//# sourceMappingURL=multiply-b.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/multiply-b.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/multiply-element-b.js":
/*!***************************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/multiply-element-b.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = multiplyElementB;\n/**\n * multiplies {left} and {right} weight by {from} deltas into {left} and {right} deltas\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Matrix} right\n */\nfunction multiplyElementB(product, left, right) {\n  for (var i = 0; i < left.weights.length; i++) {\n    left.deltas[i] = right.weights[i] * product.deltas[i];\n    right.deltas[i] = left.weights[i] * product.deltas[i];\n  }\n}\n//# sourceMappingURL=multiply-element-b.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/multiply-element-b.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/multiply-element.js":
/*!*************************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/multiply-element.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = multiplyElement;\n/**\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Matrix} right\n */\nfunction multiplyElement(product, left, right) {\n  var weights = left.weights;\n\n  for (var i = 0; i < weights.length; i++) {\n    product.weights[i] = left.weights[i] * right.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n//# sourceMappingURL=multiply-element.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/multiply-element.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/multiply.js":
/*!*****************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/multiply.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = multiply;\n/**\n * multiply {left} and {right} matrix weights to {into}\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Matrix} right\n */\nfunction multiply(product, left, right) {\n  var leftRows = left.rows;\n  var leftColumns = left.columns;\n  var rightColumns = right.columns;\n\n  // loop over rows of left\n  for (var leftRow = 0; leftRow < leftRows; leftRow++) {\n    var leftRowBase = leftColumns * leftRow;\n    var rightRowBase = rightColumns * leftRow;\n    // loop over cols of right\n    for (var rightColumn = 0; rightColumn < rightColumns; rightColumn++) {\n\n      // dot product loop\n      var dot = 0;\n      //loop over columns of left\n      for (var leftColumn = 0; leftColumn < leftColumns; leftColumn++) {\n        var rightColumnBase = rightColumns * leftColumn;\n        var leftIndex = leftRowBase + leftColumn;\n        var rightIndex = rightColumnBase + rightColumn;\n        dot += left.weights[leftIndex] * right.weights[rightIndex];\n        left.deltas[leftIndex] = 0;\n        right.deltas[rightIndex] = 0;\n      }\n      product.weights[rightRowBase + rightColumn] = dot;\n    }\n  }\n}\n//# sourceMappingURL=multiply.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/multiply.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/ones-matrix.js":
/*!********************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/ones-matrix.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = __webpack_require__(/*! ./ */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _2 = _interopRequireDefault(_);\n\nvar _ones = __webpack_require__(/*! ../../utilities/ones */ \"./node_modules/brain.js/dist/utilities/ones.js\");\n\nvar _ones2 = _interopRequireDefault(_ones);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** return Matrix but filled with random numbers from gaussian\n * @param {Number} [rows]\n * @param {Number} [columns]\n * @constructor\n */\nvar OnesMatrix = function (_Matrix) {\n  _inherits(OnesMatrix, _Matrix);\n\n  function OnesMatrix(rows, columns) {\n    _classCallCheck(this, OnesMatrix);\n\n    var _this = _possibleConstructorReturn(this, (OnesMatrix.__proto__ || Object.getPrototypeOf(OnesMatrix)).call(this, rows, columns));\n\n    _this.rows = rows;\n    _this.columns = columns;\n    _this.weights = (0, _ones2.default)(rows * columns);\n    _this.deltas = (0, _ones2.default)(rows * columns);\n    return _this;\n  }\n\n  return OnesMatrix;\n}(_2.default);\n\nexports.default = OnesMatrix;\n//# sourceMappingURL=ones-matrix.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/ones-matrix.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/random-matrix.js":
/*!**********************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/random-matrix.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = __webpack_require__(/*! ./ */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _2 = _interopRequireDefault(_);\n\nvar _random = __webpack_require__(/*! ../../utilities/random */ \"./node_modules/brain.js/dist/utilities/random.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** return Matrix but filled with random numbers from gaussian\n * @param {Number} [rows]\n * @param {Number} [columns]\n * @param std\n * @constructor\n */\nvar RandomMatrix = function (_Matrix) {\n  _inherits(RandomMatrix, _Matrix);\n\n  function RandomMatrix(rows, columns, std) {\n    _classCallCheck(this, RandomMatrix);\n\n    var _this = _possibleConstructorReturn(this, (RandomMatrix.__proto__ || Object.getPrototypeOf(RandomMatrix)).call(this, rows, columns));\n\n    _this.rows = rows;\n    _this.columns = columns;\n    _this.std = std;\n    for (var i = 0, max = _this.weights.length; i < max; i++) {\n      _this.weights[i] = (0, _random.randomF)(-std, std);\n    }\n    return _this;\n  }\n\n  return RandomMatrix;\n}(_2.default);\n\nexports.default = RandomMatrix;\n//# sourceMappingURL=random-matrix.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/random-matrix.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/relu-b.js":
/*!***************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/relu-b.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = reluB;\n/**\n * adds {from} deltas to {m} deltas when {m} weights are above other a threshold of 0\n * @param {Matrix} product\n * @param {Matrix} m\n */\nfunction reluB(product, left) {\n  for (var i = 0; i < product.deltas.length; i++) {\n    left.deltas[i] = left.weights[i] > 0 ? product.deltas[i] : 0;\n  }\n}\n//# sourceMappingURL=relu-b.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/relu-b.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/relu.js":
/*!*************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/relu.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = relu;\n/**\n *\n * relu {m} weights to {into} weights\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction relu(product, left) {\n  for (var i = 0; i < left.weights.length; i++) {\n    product.weights[i] = Math.max(0, left.weights[i]); // relu\n    product.deltas[i] = 0;\n  }\n}\n//# sourceMappingURL=relu.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/relu.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/row-pluck-b.js":
/*!********************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/row-pluck-b.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rowPluckB;\n/**\n * adds {from} deltas into {m} deltas\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Number} rowIndex\n */\nfunction rowPluckB(product, left, rowIndex) {\n  var columns = left.columns;\n  var rowBase = columns * rowIndex;\n  for (var column = 0; column < columns; column++) {\n    left.deltas[rowBase + column] = product.deltas[column];\n  }\n}\n//# sourceMappingURL=row-pluck-b.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/row-pluck-b.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/row-pluck.js":
/*!******************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/row-pluck.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rowPluck;\n/**\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Number} rowPluckIndex\n */\nfunction rowPluck(product, left, rowPluckIndex) {\n  var columns = left.columns;\n  var rowBase = columns * rowPluckIndex;\n  for (var column = 0; column < columns; column++) {\n    product.weights[column] = left.weights[rowBase + column];\n    product.deltas[column] = 0;\n  }\n}\n//# sourceMappingURL=row-pluck.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/row-pluck.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/sample-i.js":
/*!*****************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/sample-i.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sampleI;\n\nvar _random = __webpack_require__(/*! ../../utilities/random */ \"./node_modules/brain.js/dist/utilities/random.js\");\n\n//prevent parser from renaming when calling toString() method later\nvar randomF = _random.randomF;\n/**\n *\n * @param {Matrix} m\n * @returns {number}\n */\nfunction sampleI(m) {\n  // sample argmax from w, assuming w are\n  // probabilities that sum to one\n  var r = randomF(0, 1);\n  var x = 0;\n  var i = 0;\n  var w = m.weights;\n\n  while (true) {\n    x += w[i];\n    if (x > r) {\n      return i;\n    }\n    i++;\n  }\n}\n//# sourceMappingURL=sample-i.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/sample-i.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/sigmoid-b.js":
/*!******************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/sigmoid-b.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sigmoidB;\n/**\n *\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction sigmoidB(product, left) {\n  for (var i = 0; i < product.deltas.length; i++) {\n    var mwi = product.weights[i];\n    left.deltas[i] = mwi * (1 - mwi) * product.deltas[i];\n  }\n}\n//# sourceMappingURL=sigmoid-b.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/sigmoid-b.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/sigmoid.js":
/*!****************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/sigmoid.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sigmoid;\n/**\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction sigmoid(product, left) {\n  // sigmoid nonlinearity\n  for (var i = 0; i < left.weights.length; i++) {\n    product.weights[i] = 1 / (1 + Math.exp(-left.weights[i]));\n    product.deltas[i] = 0;\n  }\n}\n\nfunction sig(x) {\n  // helper function for computing sigmoid\n  return 1 / (1 + Math.exp(-x));\n}\n//# sourceMappingURL=sigmoid.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/sigmoid.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/softmax.js":
/*!****************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/softmax.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = softmax;\n\nvar _ = __webpack_require__(/*! ./ */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _2 = _interopRequireDefault(_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * @param {Matrix} m\n * @returns {Matrix}\n */\nfunction softmax(m) {\n  var result = new _2.default(m.rows, m.columns); // probability volume\n  var maxVal = -999999;\n  for (var i = 0; i < m.weights.length; i++) {\n    if (m.weights[i] > maxVal) {\n      maxVal = m.weights[i];\n    }\n  }\n\n  var s = 0;\n  for (var _i = 0; _i < m.weights.length; _i++) {\n    result.weights[_i] = Math.exp(m.weights[_i] - maxVal);\n    s += result.weights[_i];\n  }\n\n  for (var _i2 = 0; _i2 < m.weights.length; _i2++) {\n    result.weights[_i2] /= s;\n  }\n\n  // no backward pass here needed\n  // since we will use the computed probabilities outside\n  // to set gradients directly on m\n  return result;\n}\n//# sourceMappingURL=softmax.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/softmax.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/tanh-b.js":
/*!***************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/tanh-b.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tanhB;\n/**\n *\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction tanhB(product, left) {\n  for (var i = 0; i < product.deltas.length; i++) {\n    // grad for z = tanh(x) is (1 - z^2)\n    var mwi = product.weights[i];\n    left.deltas[i] = (1 - mwi * mwi) * product.deltas[i];\n  }\n}\n//# sourceMappingURL=tanh-b.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/tanh-b.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/matrix/tanh.js":
/*!*************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/matrix/tanh.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tanh;\n/**\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction tanh(product, left) {\n  // tanh nonlinearity\n  for (var i = 0; i < left.weights.length; i++) {\n    product.weights[i] = Math.tanh(left.weights[i]);\n    product.deltas[i] = 0;\n  }\n}\n//# sourceMappingURL=tanh.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/matrix/tanh.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/rnn-time-step.js":
/*!***************************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/rnn-time-step.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _matrix = __webpack_require__(/*! ./matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _randomMatrix = __webpack_require__(/*! ./matrix/random-matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/random-matrix.js\");\n\nvar _randomMatrix2 = _interopRequireDefault(_randomMatrix);\n\nvar _equation = __webpack_require__(/*! ./matrix/equation */ \"./node_modules/brain.js/dist/recurrent/matrix/equation.js\");\n\nvar _equation2 = _interopRequireDefault(_equation);\n\nvar _rnn = __webpack_require__(/*! ./rnn */ \"./node_modules/brain.js/dist/recurrent/rnn.js\");\n\nvar _rnn2 = _interopRequireDefault(_rnn);\n\nvar _zeros = __webpack_require__(/*! ../utilities/zeros */ \"./node_modules/brain.js/dist/utilities/zeros.js\");\n\nvar _zeros2 = _interopRequireDefault(_zeros);\n\nvar _softmax = __webpack_require__(/*! ./matrix/softmax */ \"./node_modules/brain.js/dist/recurrent/matrix/softmax.js\");\n\nvar _softmax2 = _interopRequireDefault(_softmax);\n\nvar _random = __webpack_require__(/*! ../utilities/random */ \"./node_modules/brain.js/dist/utilities/random.js\");\n\nvar _sampleI = __webpack_require__(/*! ./matrix/sample-i */ \"./node_modules/brain.js/dist/recurrent/matrix/sample-i.js\");\n\nvar _sampleI2 = _interopRequireDefault(_sampleI);\n\nvar _maxI = __webpack_require__(/*! ./matrix/max-i */ \"./node_modules/brain.js/dist/recurrent/matrix/max-i.js\");\n\nvar _maxI2 = _interopRequireDefault(_maxI);\n\nvar _lookup = __webpack_require__(/*! ../lookup */ \"./node_modules/brain.js/dist/lookup.js\");\n\nvar _lookup2 = _interopRequireDefault(_lookup);\n\nvar _lookupTable2 = __webpack_require__(/*! ../utilities/lookup-table */ \"./node_modules/brain.js/dist/utilities/lookup-table.js\");\n\nvar _lookupTable3 = _interopRequireDefault(_lookupTable2);\n\nvar _arrayLookupTable = __webpack_require__(/*! ../utilities/array-lookup-table */ \"./node_modules/brain.js/dist/utilities/array-lookup-table.js\");\n\nvar _arrayLookupTable2 = _interopRequireDefault(_arrayLookupTable);\n\nvar _cast = __webpack_require__(/*! ../utilities/cast */ \"./node_modules/brain.js/dist/utilities/cast.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RNNTimeStep = function (_RNN) {\n  _inherits(RNNTimeStep, _RNN);\n\n  function RNNTimeStep() {\n    _classCallCheck(this, RNNTimeStep);\n\n    return _possibleConstructorReturn(this, (RNNTimeStep.__proto__ || Object.getPrototypeOf(RNNTimeStep)).apply(this, arguments));\n  }\n\n  _createClass(RNNTimeStep, [{\n    key: 'createOutputMatrix',\n    value: function createOutputMatrix() {\n      var model = this.model;\n      var outputSize = this.outputSize;\n      var lastHiddenSize = this.hiddenLayers[this.hiddenLayers.length - 1];\n\n      //whd\n      model.outputConnector = new _randomMatrix2.default(outputSize, lastHiddenSize, 0.08);\n      //bd\n      model.output = new _randomMatrix2.default(outputSize, 1, 0.08);\n    }\n  }, {\n    key: 'bindEquation',\n    value: function bindEquation() {\n      var model = this.model;\n      var hiddenLayers = this.hiddenLayers;\n      var layers = model.hiddenLayers;\n      var equation = new _equation2.default();\n      var outputs = [];\n      var equationConnection = model.equationConnections.length > 0 ? model.equationConnections[model.equationConnections.length - 1] : this.initialLayerInputs;\n\n      // 0 index\n      var output = this.getEquation(equation, equation.input(new _matrix2.default(this.inputSize, 1)), equationConnection[0], layers[0]);\n      outputs.push(output);\n      // 1+ indices\n      for (var i = 1, max = hiddenLayers.length; i < max; i++) {\n        output = this.getEquation(equation, output, equationConnection[i], layers[i]);\n        outputs.push(output);\n      }\n\n      model.equationConnections.push(outputs);\n      equation.add(equation.multiply(model.outputConnector, output), model.output);\n      model.equations.push(equation);\n    }\n  }, {\n    key: 'mapModel',\n    value: function mapModel() {\n      var model = this.model;\n      var hiddenLayers = model.hiddenLayers;\n      var allMatrices = model.allMatrices;\n      this.initialLayerInputs = this.hiddenLayers.map(function (size) {\n        return new _matrix2.default(size, 1);\n      });\n\n      this.createHiddenLayers();\n      if (!model.hiddenLayers.length) throw new Error('net.hiddenLayers not set');\n      for (var i = 0, max = hiddenLayers.length; i < max; i++) {\n        var hiddenMatrix = hiddenLayers[i];\n        for (var property in hiddenMatrix) {\n          if (!hiddenMatrix.hasOwnProperty(property)) continue;\n          allMatrices.push(hiddenMatrix[property]);\n        }\n      }\n\n      this.createOutputMatrix();\n      if (!model.outputConnector) throw new Error('net.model.outputConnector not set');\n      if (!model.output) throw new Error('net.model.output not set');\n\n      allMatrices.push(model.outputConnector);\n      allMatrices.push(model.output);\n    }\n  }, {\n    key: 'backpropagate',\n    value: function backpropagate() {\n      for (var i = this.model.equations.length - 1; i > -1; i--) {\n        this.model.equations[i].backpropagate();\n      }\n    }\n\n    /**\n     *\n     * @param {number[]|number[][]|object|object[][]} [rawInput]\n     * @returns {number[]|number|object|object[]|object[][]}\n     */\n\n  }, {\n    key: 'run',\n    value: function run(rawInput) {\n      if (this.inputSize === 1) {\n        if (this.outputLookup) {\n          this.run = this.runObject;\n          return this.runObject(rawInput);\n        }\n        this.run = this.runNumbers;\n        return this.runNumbers(rawInput);\n      }\n      this.run = this.runArrays;\n      return this.runArrays(rawInput);\n    }\n  }, {\n    key: 'forecast',\n    value: function forecast(input, count) {\n      if (this.inputSize === 1) {\n        if (this.outputLookup) {\n          this.forecast = this.runObject;\n          return this.runObject(input);\n        }\n        this.forecast = this.forecastNumbers;\n        return this.forecastNumbers(input, count);\n      }\n      if (this.outputLookup) {\n        this.forecast = this.forecastObjects;\n        return this.forecastObjects(input, count);\n      }\n      this.forecast = this.forecastArrays;\n      return this.forecastArrays(input, count);\n    }\n\n    /**\n     *\n     * @param {Object[]|String[]} data an array of objects: `{input: 'string', output: 'string'}` or an array of strings\n     * @param {Object} [options]\n     * @returns {{error: number, iterations: number}}\n     */\n\n  }, {\n    key: 'train',\n    value: function train(data) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this.trainOpts = options = Object.assign({}, this.constructor.trainDefaults, options);\n      var iterations = options.iterations;\n      var errorThresh = options.errorThresh;\n      var log = options.log === true ? console.log : options.log;\n      var logPeriod = options.logPeriod;\n      var callback = options.callback;\n      var callbackPeriod = options.callbackPeriod;\n\n      if (this.inputSize === 1 || !this.inputSize) {\n        this.setSize(data);\n      }\n\n      data = this.formatData(data);\n      var error = Infinity;\n      var i = void 0;\n\n      this.verifyIsInitialized(data);\n\n      for (i = 0; i < iterations && error > errorThresh; i++) {\n        var sum = 0;\n        for (var j = 0; j < data.length; j++) {\n          var err = this.trainPattern(data[j], true);\n          sum += err;\n        }\n        error = sum / data.length;\n\n        if (isNaN(error)) throw new Error('network error rate is unexpected NaN, check network configurations and try again');\n        if (log && i % logPeriod === 0) {\n          log('iterations: ' + i + ', training error: ' + error);\n        }\n        if (callback && i % callbackPeriod === 0) {\n          callback({ error: error, iterations: i });\n        }\n      }\n\n      return {\n        error: error,\n        iterations: i\n      };\n    }\n\n    /**\n     *\n     * @param data\n     * Verifies network sizes are initialized\n     * If they are not it will initialize them based off the data set.\n     */\n\n  }, {\n    key: 'verifyIsInitialized',\n    value: function verifyIsInitialized(data) {\n      if (data[0].input) {\n        this.trainInput = this.trainInputOutput;\n      } else if (data[0].length > 0) {\n        if (data[0][0].length > 0) {\n          this.trainInput = this.trainArrays;\n        } else {\n          if (this.inputSize > 1) {\n            this.trainInput = this.trainArrays;\n          } else {\n            this.trainInput = this.trainNumbers;\n          }\n        }\n      }\n\n      if (!this.model) {\n        this.initialize();\n      }\n    }\n  }, {\n    key: 'setSize',\n    value: function setSize(data) {\n      var dataShape = _lookup2.default.dataShape(data).join(',');\n      switch (dataShape) {\n        case 'array,array,number':\n        case 'array,object,number':\n        case 'array,datum,array,number':\n        case 'array,datum,object,number':\n          // probably 1\n          break;\n        case 'array,array,array,number':\n          this.inputSize = this.outputSize = data[0][0].length;\n          break;\n        case 'array,array,object,number':\n          this.inputSize = this.outputSize = Object.keys(_lookup2.default.toTable2D(data)).length;\n          break;\n        case 'array,datum,array,array,number':\n          this.inputSize = this.outputSize = data[0].input[0].length;\n          break;\n        case 'array,datum,array,object,number':\n          this.inputSize = Object.keys(_lookup2.default.toInputTable2D(data)).length;\n          this.outputSize = Object.keys(_lookup2.default.toOutputTable2D(data)).length;\n          break;\n        default:\n          throw new Error('unknown data shape or configuration');\n      }\n    }\n  }, {\n    key: 'trainNumbers',\n    value: function trainNumbers(input) {\n      var model = this.model;\n      var equations = model.equations;\n      while (equations.length < input.length) {\n        this.bindEquation();\n      }\n      var errorSum = 0;\n      for (var i = 0, max = input.length - 1; i < max; i++) {\n        errorSum += equations[i].predictTarget(input[i], input[i + 1]);\n      }\n      this.end();\n      return errorSum / input.length;\n    }\n  }, {\n    key: 'runNumbers',\n    value: function runNumbers(input) {\n      if (!this.isRunnable) return null;\n      var model = this.model;\n      var equations = model.equations;\n      if (this.inputLookup) {\n        input = _lookup2.default.toArray(this.inputLookup, input, this.inputLookupLength);\n      }\n      while (equations.length <= input.length) {\n        this.bindEquation();\n      }\n      var lastOutput = void 0;\n      for (var i = 0; i < input.length; i++) {\n        lastOutput = equations[i].runInput([input[i]]);\n      }\n      this.end();\n      return lastOutput.weights[0];\n    }\n  }, {\n    key: 'forecastNumbers',\n    value: function forecastNumbers(input, count) {\n      if (!this.isRunnable) return null;\n      var model = this.model;\n      var equations = model.equations;\n      var length = input.length + count;\n      while (equations.length <= length) {\n        this.bindEquation();\n      }\n      var lastOutput = void 0;\n      var equationIndex = 0;\n      for (var i = 0; i < input.length; i++) {\n        lastOutput = equations[equationIndex++].runInput([input[i]]);\n      }\n      var result = [lastOutput.weights[0]];\n      for (var _i = 0, max = count - 1; _i < max; _i++) {\n        lastOutput = equations[equationIndex++].runInput(lastOutput.weights);\n        result.push(lastOutput.weights[0]);\n      }\n      this.end();\n      return result;\n    }\n  }, {\n    key: 'runObject',\n    value: function runObject(input) {\n      if (this.inputLookup === this.outputLookup) {\n        var inputArray = _lookup2.default.toArrayShort(this.inputLookup, input);\n        return _lookup2.default.toObjectPartial(this.outputLookup, this.forecastNumbers(inputArray, this.outputLookupLength - inputArray.length), inputArray.length);\n      }\n      return _lookup2.default.toObject(this.outputLookup, this.forecastNumbers(_lookup2.default.toArray(this.inputLookup, input, this.inputLookupLength), this.outputLookupLength));\n    }\n  }, {\n    key: 'forecastObjects',\n    value: function forecastObjects(input, count) {\n      var _this2 = this;\n\n      input = input.map(function (value) {\n        return _lookup2.default.toArray(_this2.outputLookup, value, _this2.outputLookupLength);\n      });\n      return this.forecastArrays(input, count).map(function (value) {\n        return _lookup2.default.toObject(_this2.outputLookup, value);\n      });\n    }\n  }, {\n    key: 'trainInputOutput',\n    value: function trainInputOutput(object) {\n      var model = this.model;\n      var input = object.input;\n      var output = object.output;\n      var totalSize = input.length + output.length;\n      var equations = model.equations;\n      while (equations.length < totalSize) {\n        this.bindEquation();\n      }\n      var errorSum = 0;\n      var equationIndex = 0;\n      for (var inputIndex = 0, max = input.length - 1; inputIndex < max; inputIndex++) {\n        errorSum += equations[equationIndex++].predictTarget(input[inputIndex], input[inputIndex + 1]);\n      }\n      errorSum += equations[equationIndex++].predictTarget(input[input.length - 1], output[0]);\n      for (var outputIndex = 0, _max = output.length - 1; outputIndex < _max; outputIndex++) {\n        errorSum += equations[equationIndex++].predictTarget(output[outputIndex], output[outputIndex + 1]);\n      }\n      this.end();\n      return errorSum / totalSize;\n    }\n  }, {\n    key: 'trainArrays',\n    value: function trainArrays(input) {\n      var model = this.model;\n      var equations = model.equations;\n      while (equations.length < input.length) {\n        this.bindEquation();\n      }\n      var errorSum = 0;\n      for (var i = 0, max = input.length - 1; i < max; i++) {\n        errorSum += equations[i].predictTarget(input[i], input[i + 1]);\n      }\n      this.end();\n      return errorSum / input.length;\n    }\n  }, {\n    key: 'runArrays',\n    value: function runArrays(input) {\n      if (!this.isRunnable) return null;\n      var model = this.model;\n      var equations = model.equations;\n      while (equations.length <= input.length) {\n        this.bindEquation();\n      }\n      if (this.inputLookup) {\n        input = _lookup2.default.toArrays(this.inputLookup, input, this.inputLookupLength);\n      }\n      var lastOutput = void 0;\n      for (var i = 0; i < input.length; i++) {\n        var outputMatrix = equations[i].runInput(input[i]);\n        lastOutput = outputMatrix.weights;\n      }\n      this.end();\n      if (this.outputLookup) {\n        return _lookup2.default.toObject(this.outputLookup, lastOutput);\n      }\n      return lastOutput;\n    }\n  }, {\n    key: 'forecastArrays',\n    value: function forecastArrays(input, count) {\n      if (!this.isRunnable) return null;\n      var model = this.model;\n      var equations = model.equations;\n      var length = input.length + count;\n      while (equations.length <= length) {\n        this.bindEquation();\n      }\n      var lastOutput = void 0;\n      var equationIndex = 0;\n      for (var i = 0; i < input.length; i++) {\n        lastOutput = equations[equationIndex++].runInput(input[i]);\n      }\n      var result = [lastOutput.weights];\n      for (var _i2 = 0, max = count - 1; _i2 < max; _i2++) {\n        lastOutput = equations[equationIndex++].runInput(lastOutput.weights);\n        result.push(lastOutput.weights.slice(0));\n      }\n      this.end();\n      return result;\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      this.model.equations[this.model.equations.length - 1].runInput(new Float32Array(this.outputSize));\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {*}\n     */\n\n  }, {\n    key: 'formatData',\n    value: function formatData(data) {\n      var dataShape = _lookup2.default.dataShape(data).join(',');\n      var result = [];\n      switch (dataShape) {\n        case 'array,number':\n          {\n            if (this.inputSize !== 1) {\n              throw new Error('inputSize must be 1 for this data size');\n            }\n            if (this.outputSize !== 1) {\n              throw new Error('outputSize must be 1 for this data size');\n            }\n            for (var i = 0; i < data.length; i++) {\n              result.push(Float32Array.from([data[i]]));\n            }\n            return [result];\n          }\n        case 'array,array,number':\n          {\n            if (this.inputSize === 1 && this.outputSize === 1) {\n              for (var _i3 = 0; _i3 < data.length; _i3++) {\n                result.push((0, _cast.arrayToFloat32Arrays)(data[_i3]));\n              }\n              return result;\n            }\n            if (this.inputSize !== data[0].length) {\n              throw new Error('inputSize must match data input size');\n            }\n            if (this.outputSize !== data[0].length) {\n              throw new Error('outputSize must match data input size');\n            }\n            for (var _i4 = 0; _i4 < data.length; _i4++) {\n              result.push(Float32Array.from(data[_i4]));\n            }\n            return [result];\n          }\n        case 'array,object,number':\n          {\n            if (this.inputSize !== 1) {\n              throw new Error('inputSize must be 1 for this data size');\n            }\n            if (this.outputSize !== 1) {\n              throw new Error('outputSize must be 1 for this data size');\n            }\n            if (!this.inputLookup) {\n              var lookupTable = new _lookupTable3.default(data);\n              this.inputLookup = this.outputLookup = lookupTable.table;\n              this.inputLookupLength = this.outputLookupLength = lookupTable.length;\n            }\n            for (var _i5 = 0; _i5 < data.length; _i5++) {\n              result.push((0, _cast.objectToFloat32Arrays)(data[_i5]));\n            }\n            return result;\n          }\n        case 'array,datum,array,number':\n          {\n            if (this.inputSize !== 1) {\n              throw new Error('inputSize must be 1 for this data size');\n            }\n            if (this.outputSize !== 1) {\n              throw new Error('outputSize must be 1 for this data size');\n            }\n            for (var _i6 = 0; _i6 < data.length; _i6++) {\n              var datum = data[_i6];\n              result.push({\n                input: (0, _cast.arrayToFloat32Arrays)(datum.input),\n                output: (0, _cast.arrayToFloat32Arrays)(datum.output)\n              });\n            }\n            return result;\n          }\n        case 'array,datum,object,number':\n          {\n            if (this.inputSize !== 1) {\n              throw new Error('inputSize must be 1 for this data size');\n            }\n            if (this.outputSize !== 1) {\n              throw new Error('outputSize must be 1 for this data size');\n            }\n            if (!this.inputLookup) {\n              var inputLookup = new _lookupTable3.default(data, 'input');\n              this.inputLookup = inputLookup.table;\n              this.inputLookupLength = inputLookup.length;\n            }\n            if (!this.outputLookup) {\n              var outputLookup = new _lookupTable3.default(data, 'output');\n              this.outputLookup = outputLookup.table;\n              this.outputLookupLength = outputLookup.length;\n            }\n            for (var _i7 = 0; _i7 < data.length; _i7++) {\n              var _datum = data[_i7];\n              result.push({\n                input: (0, _cast.objectToFloat32Arrays)(_datum.input),\n                output: (0, _cast.objectToFloat32Arrays)(_datum.output)\n              });\n            }\n            return result;\n          }\n        case 'array,array,array,number':\n          {\n            for (var _i8 = 0; _i8 < data.length; _i8++) {\n              result.push((0, _cast.arraysToFloat32Arrays)(data[_i8]));\n            }\n            return result;\n          }\n        case 'array,array,object,number':\n          {\n            if (!this.inputLookup) {\n              var _lookupTable = new _lookupTable3.default(data);\n              this.inputLookup = this.outputLookup = _lookupTable.table;\n              this.inputLookupLength = this.outputLookupLength = _lookupTable.length;\n            }\n            for (var _i9 = 0; _i9 < data.length; _i9++) {\n              var array = [];\n              for (var j = 0; j < data[_i9].length; j++) {\n                array.push((0, _cast.objectToFloat32Array)(data[_i9][j], this.inputLookup, this.inputLookupLength));\n              }\n              result.push(array);\n            }\n            return result;\n          }\n        case 'array,datum,array,array,number':\n          {\n            if (this.inputSize === 1 && this.outputSize === 1) {\n              for (var _i10 = 0; _i10 < data.length; _i10++) {\n                var _datum2 = data[_i10];\n                result.push({\n                  input: Float32Array.from(_datum2.input),\n                  output: Float32Array.from(_datum2.output)\n                });\n              }\n            } else {\n              if (this.inputSize !== data[0].input[0].length) {\n                throw new Error('inputSize must match data input size');\n              }\n              if (this.outputSize !== data[0].output[0].length) {\n                throw new Error('outputSize must match data output size');\n              }\n              for (var _i11 = 0; _i11 < data.length; _i11++) {\n                var _datum3 = data[_i11];\n                result.push({\n                  input: (0, _cast.arraysToFloat32Arrays)(_datum3.input),\n                  output: (0, _cast.arraysToFloat32Arrays)(_datum3.output)\n                });\n              }\n            }\n            return result;\n          }\n        case 'array,datum,array,object,number':\n          {\n            if (!this.inputLookup) {\n              var _inputLookup = new _arrayLookupTable2.default(data, 'input');\n              this.inputLookup = _inputLookup.table;\n              this.inputLookupLength = _inputLookup.length;\n            }\n            if (!this.outputLookup) {\n              var _outputLookup = new _arrayLookupTable2.default(data, 'output');\n              this.outputLookup = _outputLookup.table;\n              this.outputLookupLength = _outputLookup.length;\n            }\n            for (var _i12 = 0; _i12 < data.length; _i12++) {\n              var _datum4 = data[_i12];\n              result.push({\n                input: (0, _cast.objectsToFloat32Arrays)(_datum4.input, this.inputLookup, this.inputLookupLength),\n                output: (0, _cast.objectsToFloat32Arrays)(_datum4.output, this.outputLookup, this.outputLookupLength)\n              });\n            }\n            return result;\n          }\n        default:\n          throw new Error('unknown data shape or configuration');\n      }\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {\n     *  {\n     *    error: number,\n     *    misclasses: Array\n     *  }\n     * }\n     */\n\n  }, {\n    key: 'test',\n    value: function test(data) {\n      var formattedData = this.formatData(data);\n      // for classification problems\n      var misclasses = [];\n      // run each pattern through the trained network and collect\n      // error and misclassification statistics\n      var errorSum = 0;\n      var dataShape = _lookup2.default.dataShape(data).join(',');\n      switch (dataShape) {\n        case 'array,array,number':\n          {\n            if (this.inputSize === 1) {\n              for (var i = 0; i < formattedData.length; i++) {\n                var input = formattedData[i];\n                var output = this.run(input.splice(0, input.length - 1));\n                var target = input[input.length - 1][0];\n                var error = target - output;\n                var errorMSE = error * error;\n                errorSum += errorMSE;\n                var errorsAbs = Math.abs(errorMSE);\n                if (errorsAbs > this.trainOpts.errorThresh) {\n                  var misclass = data[i];\n                  Object.assign(misclass, {\n                    value: input,\n                    actual: output\n                  });\n                  misclasses.push(misclass);\n                }\n              }\n              break;\n            }\n            throw new Error('unknown data shape or configuration');\n          }\n        case 'array,array,array,number':\n          {\n            for (var _i13 = 0; _i13 < formattedData.length; _i13++) {\n              var _input = formattedData[_i13];\n              var _output = this.run(_input.splice(0, _input.length - 1));\n              var _target = _input[_input.length - 1];\n              var errors = 0;\n              var errorCount = 0;\n              for (var j = 0; j < _output.length; j++) {\n                errorCount++;\n                var _error = _target[j] - _output[j];\n                // mse\n                errors += _error * _error;\n              }\n              errorSum += errors / errorCount;\n              var _errorsAbs = Math.abs(errors);\n              if (_errorsAbs > this.trainOpts.errorThresh) {\n                var _misclass = data[_i13];\n                misclasses.push({\n                  value: _misclass,\n                  actual: _output\n                });\n              }\n            }\n            break;\n          }\n        case 'array,object,number':\n          {\n            for (var _i14 = 0; _i14 < formattedData.length; _i14++) {\n              var _input2 = formattedData[_i14];\n              var _output2 = this.run(_lookup2.default.toObjectPartial(this.outputLookup, _input2, 0, _input2.length - 1));\n              var _target2 = _input2[_input2.length - 1];\n              var _errors = 0;\n              var p = void 0;\n              for (p in _output2) {}\n              var _error2 = _target2[_i14] - _output2[p];\n              // mse\n              _errors += _error2 * _error2;\n              errorSum += _errors;\n              var _errorsAbs2 = Math.abs(_errors);\n              if (_errorsAbs2 > this.trainOpts.errorThresh) {\n                var _misclass2 = data[_i14];\n                misclasses.push({\n                  value: _misclass2,\n                  actual: _output2\n                });\n              }\n            }\n            break;\n          }\n        case 'array,array,object,number':\n          {\n            for (var _i15 = 0; _i15 < formattedData.length; _i15++) {\n              var _input3 = formattedData[_i15];\n              var _output3 = this.run(_input3.slice(0, _input3.length - 1));\n              var _target3 = data[_i15][_input3.length - 1];\n              var _errors2 = 0;\n              var _errorCount = 0;\n              for (var _p in _output3) {\n                var _error3 = _target3[_p] - _output3[_p];\n                // mse\n                _errors2 += _error3 * _error3;\n                _errorCount++;\n              }\n              errorSum += _errors2 / _errorCount;\n              var _errorsAbs3 = Math.abs(_errors2);\n              if (_errorsAbs3 > this.trainOpts.errorThresh) {\n                var _misclass3 = data[_i15];\n                misclasses.push({\n                  value: _misclass3,\n                  actual: _output3\n                });\n              }\n            }\n            break;\n          }\n        case 'array,datum,array,number':\n        case 'array,datum,object,number':\n          {\n            for (var _i16 = 0; _i16 < formattedData.length; _i16++) {\n              var datum = formattedData[_i16];\n              var _output4 = this.forecast(datum.input, datum.output.length);\n              var _errors3 = 0;\n              var _errorCount2 = 0;\n              for (var _j = 0; _j < _output4.length; _j++) {\n                var _error4 = datum.output[_j][0] - _output4[_j];\n                _errors3 += _error4 * _error4;\n                _errorCount2++;\n              }\n\n              errorSum += _errors3 / _errorCount2;\n              var _errorsAbs4 = Math.abs(_errors3);\n              if (_errorsAbs4 > this.trainOpts.errorThresh) {\n                var _misclass4 = data[_i16];\n                Object.assign(_misclass4, {\n                  actual: this.outputLookup ? _lookup2.default.toObject(this.outputLookup, _output4) : _output4\n                });\n                misclasses.push(_misclass4);\n              }\n            }\n            break;\n          }\n        case 'array,datum,array,array,number':\n          {\n            for (var _i17 = 0; _i17 < formattedData.length; _i17++) {\n              var _datum5 = formattedData[_i17];\n              var _output5 = this.forecast(_datum5.input, _datum5.output.length);\n              var _errors4 = 0;\n              for (var _j2 = 0; _j2 < _output5.length; _j2++) {\n                for (var k = 0; k < _output5[_j2].length; k++) {\n                  var _error5 = _datum5.output[_j2][k] - _output5[_j2][k];\n                  _errors4 += _error5 * _error5;\n                }\n              }\n\n              errorSum += _errors4;\n              var _errorsAbs5 = Math.abs(_errors4);\n              if (_errorsAbs5 > this.trainOpts.errorThresh) {\n                var _misclass5 = data[_i17];\n                misclasses.push({\n                  input: _misclass5.input,\n                  output: _misclass5.output,\n                  actual: _output5\n                });\n              }\n            }\n            break;\n          }\n        case 'array,datum,array,object,number':\n          {\n            for (var _i18 = 0; _i18 < formattedData.length; _i18++) {\n              var _datum6 = formattedData[_i18];\n              var _output6 = this.forecast(_datum6.input, _datum6.output.length);\n              var _errors5 = 0;\n              for (var _j3 = 0; _j3 < _output6.length; _j3++) {\n                for (var _p2 in _output6[_j3]) {\n                  var _error6 = data[_i18].output[_j3][_p2] - _output6[_j3][_p2];\n                  _errors5 += _error6 * _error6;\n                }\n              }\n\n              errorSum += _errors5;\n              var _errorsAbs6 = Math.abs(_errors5);\n              if (_errorsAbs6 > this.trainOpts.errorThresh) {\n                var _misclass6 = data[_i18];\n                misclasses.push({\n                  input: _misclass6.input,\n                  output: _misclass6.output,\n                  actual: _output6\n                });\n              }\n            }\n            break;\n          }\n        default:\n          throw new Error('unknown data shape or configuration');\n      }\n\n      return {\n        error: errorSum / formattedData.length,\n        misclasses: misclasses,\n        total: formattedData.length\n      };\n    }\n  }, {\n    key: 'addFormat',\n    value: function addFormat(value) {\n      var dataShape = _lookup2.default.dataShape(value).join(',');\n      switch (dataShape) {\n        case 'array,array,number':\n        case 'datum,array,array,number':\n        case 'array,number':\n        case 'datum,array,number':\n          return;\n        case 'datum,object,number':\n          {\n            this.inputLookup = _lookup2.default.addKeys(value.input, this.inputLookup);\n            if (this.inputLookup) {\n              this.inputLookupLength = Object.keys(this.inputLookup).length;\n            }\n            this.outputLookup = _lookup2.default.addKeys(value.output, this.outputLookup);\n            if (this.outputLookup) {\n              this.outputLookupLength = Object.keys(this.outputLookup).length;\n            }\n            break;\n          }\n        case 'object,number':\n          {\n            this.inputLookup = this.outputLookup = _lookup2.default.addKeys(value, this.inputLookup);\n            if (this.inputLookup) {\n              this.inputLookupLength = this.outputLookupLength = Object.keys(this.inputLookup).length;\n            }\n            break;\n          }\n        case 'array,object,number':\n          {\n            for (var i = 0; i < value.length; i++) {\n              this.inputLookup = this.outputLookup = _lookup2.default.addKeys(value[i], this.inputLookup);\n              if (this.inputLookup) {\n                this.inputLookupLength = this.outputLookupLength = Object.keys(this.inputLookup).length;\n              }\n            }\n            break;\n          }\n        case 'datum,array,object,number':\n          {\n            for (var _i19 = 0; _i19 < value.input.length; _i19++) {\n              this.inputLookup = _lookup2.default.addKeys(value.input[_i19], this.inputLookup);\n              if (this.inputLookup) {\n                this.inputLookupLength = Object.keys(this.inputLookup).length;\n              }\n            }\n            for (var _i20 = 0; _i20 < value.output.length; _i20++) {\n              this.outputLookup = _lookup2.default.addKeys(value.output[_i20], this.outputLookup);\n              if (this.outputLookup) {\n                this.outputLookupLength = Object.keys(this.outputLookup).length;\n              }\n            }\n            break;\n          }\n\n        default:\n          throw new Error('unknown data shape or configuration');\n      }\n    }\n\n    /**\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var defaults = this.constructor.defaults;\n      if (!this.model) {\n        this.initialize();\n      }\n      var model = this.model;\n      var options = {};\n      for (var p in defaults) {\n        if (defaults.hasOwnProperty(p)) {\n          options[p] = this[p];\n        }\n      }\n\n      return {\n        type: this.constructor.name,\n        options: options,\n        hiddenLayers: model.hiddenLayers.map(function (hiddenLayer) {\n          var layers = {};\n          for (var _p3 in hiddenLayer) {\n            layers[_p3] = hiddenLayer[_p3].toJSON();\n          }\n          return layers;\n        }),\n        outputConnector: this.model.outputConnector.toJSON(),\n        output: this.model.output.toJSON()\n      };\n    }\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      var defaults = this.constructor.defaults;\n      var options = json.options;\n      this.model = null;\n      this.hiddenLayers = null;\n      var allMatrices = [];\n      var hiddenLayers = [];\n\n      // backward compatibility for hiddenSizes\n      (json.hiddenLayers || json.hiddenSizes).forEach(function (hiddenLayer) {\n        var layers = {};\n        for (var p in hiddenLayer) {\n          layers[p] = _matrix2.default.fromJSON(hiddenLayer[p]);\n          allMatrices.push(layers[p]);\n        }\n        hiddenLayers.push(layers);\n      });\n\n      var outputConnector = _matrix2.default.fromJSON(json.outputConnector);\n      allMatrices.push(outputConnector);\n      var output = _matrix2.default.fromJSON(json.output);\n      allMatrices.push(output);\n\n      Object.assign(this, defaults, options);\n\n      // backward compatibility\n      if (options.hiddenSizes) {\n        this.hiddenLayers = options.hiddenSizes;\n      }\n\n      this.model = {\n        hiddenLayers: hiddenLayers,\n        output: output,\n        allMatrices: allMatrices,\n        outputConnector: outputConnector,\n        equations: [],\n        equationConnections: []\n      };\n      this.initialLayerInputs = this.hiddenLayers.map(function (size) {\n        return new _matrix2.default(size, 1);\n      });\n      this.bindEquation();\n    }\n\n    /**\n     *\n     * @returns {Function}\n     */\n\n  }, {\n    key: 'toFunction',\n    value: function toFunction() {\n      var model = this.model;\n      var equations = this.model.equations;\n      var inputSize = this.inputSize;\n      var inputLookup = this.inputLookup;\n      var inputLookupLength = this.inputLookupLength;\n      var outputLookup = this.outputLookup;\n      var outputLookupLength = this.outputLookupLength;\n      var equation = equations[1];\n      var states = equation.states;\n      var jsonString = JSON.stringify(this.toJSON());\n\n      function matrixOrigin(m, stateIndex) {\n        for (var i = 0, max = states.length; i < max; i++) {\n          var state = states[i];\n\n          if (i === stateIndex) {\n            var j = previousConnectionIndex(m);\n            switch (m) {\n              case state.left:\n                if (j > -1) {\n                  return 'typeof prevStates[' + j + '] === \\'object\\' ? prevStates[' + j + '].product : new Matrix(' + m.rows + ', ' + m.columns + ')';\n                }\n              case state.right:\n                if (j > -1) {\n                  return 'typeof prevStates[' + j + '] === \\'object\\' ? prevStates[' + j + '].product : new Matrix(' + m.rows + ', ' + m.columns + ')';\n                }\n              case state.product:\n                return 'new Matrix(' + m.rows + ', ' + m.columns + ')';\n              default:\n                throw Error('unknown state');\n            }\n          }\n\n          if (m === state.product) return 'states[' + i + '].product';\n          if (m === state.right) return 'states[' + i + '].right';\n          if (m === state.left) return 'states[' + i + '].left';\n        }\n      }\n\n      function previousConnectionIndex(m) {\n        var connection = model.equationConnections[0];\n        var states = equations[0].states;\n        for (var i = 0, max = states.length; i < max; i++) {\n          if (states[i].product === m) {\n            return i;\n          }\n        }\n        return connection.indexOf(m);\n      }\n\n      function matrixToString(m, stateIndex) {\n        if (!m || !m.rows || !m.columns) return 'null';\n        if (m === model.outputConnector) return 'json.outputConnector';\n        if (m === model.output) return 'json.output';\n\n        for (var i = 0, max = model.hiddenLayers.length; i < max; i++) {\n          var hiddenLayer = model.hiddenLayers[i];\n          for (var p in hiddenLayer) {\n            if (!hiddenLayer.hasOwnProperty(p)) continue;\n            if (hiddenLayer[p] !== m) continue;\n            return 'json.hiddenLayers[' + i + '].' + p;\n          }\n        }\n\n        return matrixOrigin(m, stateIndex);\n      }\n\n      function formatInputData() {\n        if (!inputLookup) return '';\n        if (inputSize === 1) {\n          if (inputLookup === outputLookup) {\n            return 'function lookupInput(input) {\\n            var table = ' + JSON.stringify(inputLookup) + ';\\n            var result = [];\\n            for (var p in table) {\\n              if (!input.hasOwnProperty(p)) break;\\n              result.push(Float32Array.from([input[p]]));\\n            }\\n            return result;\\n          }';\n          }\n          return 'function lookupInput(input) {\\n          var table = ' + JSON.stringify(inputLookup) + ';\\n          var result = [];\\n          for (var p in table) {\\n            result.push(Float32Array.from([input[p]]));\\n          }\\n          return result;\\n        }';\n        }\n        return 'function lookupInput(rawInputs) {\\n        var table = ' + JSON.stringify(inputLookup) + ';\\n        var result = [];\\n        for (var i = 0; i < rawInputs.length; i++) {\\n          var rawInput = rawInputs[i];\\n          var input = new Float32Array(' + inputLookupLength + ');\\n          for (var p in table) {\\n            input[table[p]] = rawInput.hasOwnProperty(p) ? rawInput[p] : 0;\\n          }\\n          result.push(input);\\n        }\\n        return result;\\n      }';\n      }\n\n      function formatOutputData() {\n        if (!outputLookup) return '';\n        if (inputSize === 1) {\n          if (inputLookup === outputLookup) {\n            return 'function lookupOutputPartial(output, input) {\\n            var table = ' + JSON.stringify(outputLookup) + ';\\n            var offset = input.length;\\n            var result = {};\\n            var i = 0;\\n            for (var p in table) {\\n              if (i++ < offset) continue;\\n              result[p] = output[table[p] - offset][0];\\n            }\\n            return result;\\n          }';\n          }\n          return 'function lookupOutput(output) {\\n          var table = ' + JSON.stringify(outputLookup) + ';\\n          var result = {};\\n          for (var p in table) {\\n            result[p] = output[table[p]][0];\\n          }\\n          return result;\\n        }';\n        }\n        return 'function lookupOutput(output) {\\n        var table = ' + JSON.stringify(outputLookup) + ';\\n        var result = {};\\n        for (var p in table) {\\n          result[p] = output[table[p]];\\n        }\\n        return result;\\n      }';\n      }\n\n      function toInner(fnString) {\n        // crude, but should be sufficient for now\n        // function() { body }\n        fnString = fnString.toString().split('{');\n        fnString.shift();\n        // body }\n        fnString = fnString.join('{');\n        fnString = fnString.split('}');\n        fnString.pop();\n        // body\n\n        return fnString.join('}').split('\\n').join('\\n        ').replace('product.weights = _input.weights = _this.inputValue;', inputLookup && inputSize === 1 ? 'product.weights = _i < input.length ? input[_i]: prevStates[prevStates.length - 1].product.weights;' : inputSize === 1 ? 'product.weights = [input[_i]];' : 'product.weights = input[_i];').replace('product.deltas[i] = 0;', '').replace('product.deltas[column] = 0;', '').replace('left.deltas[leftIndex] = 0;', '').replace('right.deltas[rightIndex] = 0;', '').replace('product.deltas = left.deltas.slice(0);', '');\n      }\n\n      function fileName(fnName) {\n        return 'src/recurrent/matrix/' + fnName.replace(/[A-Z]/g, function (value) {\n          return '-' + value.toLowerCase();\n        }) + '.js';\n      }\n\n      var statesRaw = [];\n      var usedFunctionNames = {};\n      var innerFunctionsSwitch = [];\n      for (var i = 0, max = states.length; i < max; i++) {\n        var state = states[i];\n        statesRaw.push('states[' + i + '] = {\\n      name: \\'' + state.forwardFn.name + '\\',\\n      left: ' + matrixToString(state.left, i) + ',\\n      right: ' + matrixToString(state.right, i) + ',\\n      product: ' + matrixToString(state.product, i) + '\\n    }');\n\n        var fnName = state.forwardFn.name;\n        if (!usedFunctionNames[fnName]) {\n          usedFunctionNames[fnName] = true;\n          innerFunctionsSwitch.push('        case \\'' + fnName + '\\':' + (fnName !== 'forwardFn' ? ' //compiled from ' + fileName(fnName) : '') + '\\n          ' + toInner(state.forwardFn.toString()) + '\\n          break;');\n        }\n      }\n\n      var forceForecast = this.inputSize === 1 && this.outputLookup;\n      var src = '\\n  var input = ' + (this.inputLookup ? 'lookupInput(rawInput)' : 'rawInput') + ';\\n  var json = ' + jsonString + ';\\n  var output = [];\\n  var states = [];\\n  var prevStates;\\n  var state;\\n  var max = ' + (forceForecast ? inputLookup === outputLookup ? inputLookupLength : 'input.length + ' + (outputLookupLength - 1) : 'input.length') + ';\\n  for (var _i = 0; _i < max; _i++) {\\n    prevStates = states;\\n    states = [];\\n    ' + statesRaw.join(';\\n    ') + ';\\n    for (var stateIndex = 0, stateMax = ' + statesRaw.length + '; stateIndex < stateMax; stateIndex++) {\\n      state = states[stateIndex];\\n      var product = state.product;\\n      var left = state.left;\\n      var right = state.right;\\n      \\n      switch (state.name) {\\n' + innerFunctionsSwitch.join('\\n') + '\\n      }\\n    }\\n    ' + (inputSize === 1 && inputLookup ? 'if (_i >= input.length - 1) { output.push(state.product.weights); }' : 'output = state.product.weights;') + '\\n  }\\n  ' + (outputLookup ? outputLookup === inputLookup ? 'return lookupOutputPartial(output, input)' : 'return lookupOutput(output)' : inputSize === 1 ? 'return output[0]' : 'return output') + ';\\n  ' + formatInputData() + '\\n  ' + formatOutputData() + '\\n  \\n  function Matrix(rows, columns) {\\n    this.rows = rows;\\n    this.columns = columns;\\n    this.weights = zeros(rows * columns);\\n  }\\n  ' + _zeros2.default.toString() + '\\n  ' + _softmax2.default.toString().replace('_2.default', 'Matrix') + '\\n  ' + _random.randomF.toString() + '\\n  ' + _sampleI2.default.toString() + '\\n  ' + _maxI2.default.toString();\n      return new Function('rawInput', src);\n    }\n  }]);\n\n  return RNNTimeStep;\n}(_rnn2.default);\n\nexports.default = RNNTimeStep;\n\n\nRNNTimeStep.defaults = {\n  inputSize: 1,\n  hiddenLayers: [20],\n  outputSize: 1,\n  learningRate: _rnn2.default.defaults.learningRate,\n  decayRate: _rnn2.default.defaults.decayRate,\n  smoothEps: _rnn2.default.defaults.smoothEps,\n  regc: _rnn2.default.defaults.regc,\n  clipval: _rnn2.default.defaults.clipval\n};\n\nRNNTimeStep.trainDefaults = _rnn2.default.trainDefaults;\n//# sourceMappingURL=rnn-time-step.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/rnn-time-step.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/recurrent/rnn.js":
/*!*****************************************************!*\
  !*** ./node_modules/brain.js/dist/recurrent/rnn.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _matrix = __webpack_require__(/*! ./matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/index.js\");\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _randomMatrix = __webpack_require__(/*! ./matrix/random-matrix */ \"./node_modules/brain.js/dist/recurrent/matrix/random-matrix.js\");\n\nvar _randomMatrix2 = _interopRequireDefault(_randomMatrix);\n\nvar _equation = __webpack_require__(/*! ./matrix/equation */ \"./node_modules/brain.js/dist/recurrent/matrix/equation.js\");\n\nvar _equation2 = _interopRequireDefault(_equation);\n\nvar _sampleI = __webpack_require__(/*! ./matrix/sample-i */ \"./node_modules/brain.js/dist/recurrent/matrix/sample-i.js\");\n\nvar _sampleI2 = _interopRequireDefault(_sampleI);\n\nvar _maxI = __webpack_require__(/*! ./matrix/max-i */ \"./node_modules/brain.js/dist/recurrent/matrix/max-i.js\");\n\nvar _maxI2 = _interopRequireDefault(_maxI);\n\nvar _softmax = __webpack_require__(/*! ./matrix/softmax */ \"./node_modules/brain.js/dist/recurrent/matrix/softmax.js\");\n\nvar _softmax2 = _interopRequireDefault(_softmax);\n\nvar _copy = __webpack_require__(/*! ./matrix/copy */ \"./node_modules/brain.js/dist/recurrent/matrix/copy.js\");\n\nvar _copy2 = _interopRequireDefault(_copy);\n\nvar _random = __webpack_require__(/*! ../utilities/random */ \"./node_modules/brain.js/dist/utilities/random.js\");\n\nvar _zeros = __webpack_require__(/*! ../utilities/zeros */ \"./node_modules/brain.js/dist/utilities/zeros.js\");\n\nvar _zeros2 = _interopRequireDefault(_zeros);\n\nvar _dataFormatter = __webpack_require__(/*! ../utilities/data-formatter */ \"./node_modules/brain.js/dist/utilities/data-formatter.js\");\n\nvar _dataFormatter2 = _interopRequireDefault(_dataFormatter);\n\nvar _neuralNetwork = __webpack_require__(/*! ../neural-network */ \"./node_modules/brain.js/dist/neural-network.js\");\n\nvar _neuralNetwork2 = _interopRequireDefault(_neuralNetwork);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RNN = function () {\n  function RNN() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RNN);\n\n    var defaults = this.constructor.defaults;\n\n    Object.assign(this, defaults, options);\n    this.trainOpts = {};\n    this.updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));\n\n    this.stepCache = {};\n    this.runs = 0;\n    this.ratioClipped = null;\n    this.model = null;\n    this.inputLookup = null;\n    this.inputLookupLength = null;\n    this.outputLookup = null;\n    this.outputLookupLength = null;\n\n    if (options.json) {\n      this.fromJSON(options.json);\n    }\n  }\n\n  _createClass(RNN, [{\n    key: 'initialize',\n    value: function initialize() {\n      this.model = {\n        input: null,\n        hiddenLayers: [],\n        output: null,\n        equations: [],\n        allMatrices: [],\n        equationConnections: [],\n        outputConnector: null\n      };\n\n      if (this.dataFormatter) {\n        this.inputSize = this.inputRange = this.outputSize = this.dataFormatter.characters.length;\n      }\n      this.mapModel();\n    }\n  }, {\n    key: 'createHiddenLayers',\n    value: function createHiddenLayers() {\n      //0 is end, so add 1 to offset\n      this.model.hiddenLayers.push(this.getModel(this.hiddenLayers[0], this.inputSize));\n      var prevSize = this.hiddenLayers[0];\n\n      for (var d = 1; d < this.hiddenLayers.length; d++) {\n        // loop over depths\n        var hiddenSize = this.hiddenLayers[d];\n        this.model.hiddenLayers.push(this.getModel(hiddenSize, prevSize));\n        prevSize = hiddenSize;\n      }\n    }\n\n    /**\n     *\n     * @param {Number} hiddenSize\n     * @param {Number} prevSize\n     * @returns {object}\n     */\n\n  }, {\n    key: 'getModel',\n    value: function getModel(hiddenSize, prevSize) {\n      return {\n        //wxh\n        weight: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //whh\n        transition: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bhh\n        bias: new _matrix2.default(hiddenSize, 1)\n      };\n    }\n\n    /**\n     *\n     * @param {Equation} equation\n     * @param {Matrix} inputMatrix\n     * @param {Matrix} previousResult\n     * @param {Object} hiddenLayer\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'getEquation',\n    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n      var relu = equation.relu.bind(equation);\n      var add = equation.add.bind(equation);\n      var multiply = equation.multiply.bind(equation);\n\n      return relu(add(add(multiply(hiddenLayer.weight, inputMatrix), multiply(hiddenLayer.transition, previousResult)), hiddenLayer.bias));\n    }\n  }, {\n    key: 'createInputMatrix',\n    value: function createInputMatrix() {\n      //0 is end, so add 1 to offset\n      this.model.input = new _randomMatrix2.default(this.inputRange + 1, this.inputSize, 0.08);\n    }\n  }, {\n    key: 'createOutputMatrix',\n    value: function createOutputMatrix() {\n      var model = this.model;\n      var outputSize = this.outputSize;\n      var lastHiddenSize = this.hiddenLayers[this.hiddenLayers.length - 1];\n\n      //0 is end, so add 1 to offset\n      //whd\n      model.outputConnector = new _randomMatrix2.default(outputSize + 1, lastHiddenSize, 0.08);\n      //0 is end, so add 1 to offset\n      //bd\n      model.output = new _matrix2.default(outputSize + 1, 1);\n    }\n  }, {\n    key: 'bindEquation',\n    value: function bindEquation() {\n      var model = this.model;\n      var equation = new _equation2.default();\n      var outputs = [];\n      var equationConnection = model.equationConnections.length > 0 ? model.equationConnections[model.equationConnections.length - 1] : this.initialLayerInputs;\n\n      // 0 index\n      var output = this.getEquation(equation, equation.inputMatrixToRow(model.input), equationConnection[0], model.hiddenLayers[0]);\n      outputs.push(output);\n      // 1+ indices\n      for (var i = 1, max = this.hiddenLayers.length; i < max; i++) {\n        output = this.getEquation(equation, output, equationConnection[i], model.hiddenLayers[i]);\n        outputs.push(output);\n      }\n\n      model.equationConnections.push(outputs);\n      equation.add(equation.multiply(model.outputConnector, output), model.output);\n      model.equations.push(equation);\n    }\n  }, {\n    key: 'mapModel',\n    value: function mapModel() {\n      var model = this.model;\n      var hiddenLayers = model.hiddenLayers;\n      var allMatrices = model.allMatrices;\n      this.initialLayerInputs = this.hiddenLayers.map(function (size) {\n        return new _matrix2.default(size, 1);\n      });\n\n      this.createInputMatrix();\n      if (!model.input) throw new Error('net.model.input not set');\n      allMatrices.push(model.input);\n\n      this.createHiddenLayers();\n      if (!model.hiddenLayers.length) throw new Error('net.hiddenLayers not set');\n      for (var i = 0, max = hiddenLayers.length; i < max; i++) {\n        var hiddenMatrix = hiddenLayers[i];\n        for (var property in hiddenMatrix) {\n          if (!hiddenMatrix.hasOwnProperty(property)) continue;\n          allMatrices.push(hiddenMatrix[property]);\n        }\n      }\n\n      this.createOutputMatrix();\n      if (!model.outputConnector) throw new Error('net.model.outputConnector not set');\n      if (!model.output) throw new Error('net.model.output not set');\n\n      allMatrices.push(model.outputConnector);\n      allMatrices.push(model.output);\n    }\n\n    /**\n     *\n     * @param {Number[]|string[]|string} input\n     * @param {boolean} [logErrorRate]\n     * @returns {number}\n     */\n\n  }, {\n    key: 'trainPattern',\n    value: function trainPattern(input, logErrorRate) {\n      var error = this.trainInput(input);\n      this.backpropagate(input);\n      this.adjustWeights();\n\n      if (logErrorRate) {\n        return error;\n      }\n    }\n\n    /**\n     *\n     * @param {Number[]} input\n     * @returns {number}\n     */\n\n  }, {\n    key: 'trainInput',\n    value: function trainInput(input) {\n      this.runs++;\n      var model = this.model;\n      var max = input.length;\n      var log2ppl = 0;\n      var equation = void 0;\n      while (model.equations.length <= input.length + 1) {\n        //last is zero\n        this.bindEquation();\n      }\n      for (var inputIndex = -1, inputMax = input.length; inputIndex < inputMax; inputIndex++) {\n        // start and end tokens are zeros\n        var equationIndex = inputIndex + 1;\n        equation = model.equations[equationIndex];\n\n        var source = inputIndex === -1 ? 0 : input[inputIndex] + 1; // first step: start with START token\n        var target = inputIndex === max - 1 ? 0 : input[inputIndex + 1] + 1; // last step: end with END token\n        log2ppl += equation.predictTargetIndex(source, target);\n      }\n      return Math.pow(2, log2ppl / (max - 1)) / 100;\n    }\n\n    /**\n     * @param {Number[]} input\n     */\n\n  }, {\n    key: 'backpropagate',\n    value: function backpropagate(input) {\n      var i = input.length;\n      var model = this.model;\n      var equations = model.equations;\n      while (i > 0) {\n        equations[i].backpropagateIndex(input[i - 1] + 1);\n        i--;\n      }\n      equations[0].backpropagateIndex(0);\n    }\n  }, {\n    key: 'adjustWeights',\n    value: function adjustWeights() {\n      var regc = this.regc,\n          clipval = this.clipval,\n          model = this.model,\n          decayRate = this.decayRate,\n          stepCache = this.stepCache,\n          smoothEps = this.smoothEps,\n          trainOpts = this.trainOpts;\n      var learningRate = trainOpts.learningRate;\n      var allMatrices = model.allMatrices;\n\n      var numClipped = 0;\n      var numTot = 0;\n      for (var matrixIndex = 0; matrixIndex < allMatrices.length; matrixIndex++) {\n        var matrix = allMatrices[matrixIndex];\n        var weights = matrix.weights,\n            deltas = matrix.deltas;\n\n        if (!(matrixIndex in stepCache)) {\n          stepCache[matrixIndex] = (0, _zeros2.default)(matrix.rows * matrix.columns);\n        }\n        var cache = stepCache[matrixIndex];\n        for (var i = 0; i < weights.length; i++) {\n          var r = deltas[i];\n          var w = weights[i];\n          // rmsprop adaptive learning rate\n          cache[i] = cache[i] * decayRate + (1 - decayRate) * r * r;\n          // gradient clip\n          if (r > clipval) {\n            r = clipval;\n            numClipped++;\n          }\n          if (r < -clipval) {\n            r = -clipval;\n            numClipped++;\n          }\n          numTot++;\n          // update (and regularize)\n          weights[i] = w + -learningRate * r / Math.sqrt(cache[i] + smoothEps) - regc * w;\n        }\n      }\n      this.ratioClipped = numClipped / numTot;\n    }\n\n    /**\n     *\n     * @returns boolean\n     */\n\n  }, {\n    key: 'run',\n\n\n    /**\n     *\n     * @param {Number[]|*} [rawInput]\n     * @param {Boolean} [isSampleI]\n     * @param {Number} temperature\n     * @returns {*}\n     */\n    value: function run() {\n      var rawInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var isSampleI = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var temperature = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n      var maxPredictionLength = this.maxPredictionLength + rawInput.length + (this.dataFormatter ? this.dataFormatter.specialIndexes.length : 0);\n      if (!this.isRunnable) return null;\n      var input = this.formatDataIn(rawInput);\n      var model = this.model;\n      var output = [];\n      var i = 0;\n      while (true) {\n        var previousIndex = i === 0 ? 0 : i < input.length ? input[i - 1] + 1 : output[i - 1];\n        while (model.equations.length <= i) {\n          this.bindEquation();\n        }\n        var equation = model.equations[i];\n        // sample predicted letter\n        var outputMatrix = equation.runIndex(previousIndex);\n        var logProbabilities = new _matrix2.default(model.output.rows, model.output.columns);\n        (0, _copy2.default)(logProbabilities, outputMatrix);\n        if (temperature !== 1 && isSampleI) {\n          /**\n           * scale log probabilities by temperature and re-normalize\n           * if temperature is high, logProbabilities will go towards zero\n           * and the softmax outputs will be more diffuse. if temperature is\n           * very low, the softmax outputs will be more peaky\n           */\n          for (var j = 0, max = logProbabilities.weights.length; j < max; j++) {\n            logProbabilities.weights[j] /= temperature;\n          }\n        }\n\n        var probs = (0, _softmax2.default)(logProbabilities);\n        var nextIndex = isSampleI ? (0, _sampleI2.default)(probs) : (0, _maxI2.default)(probs);\n\n        i++;\n        if (nextIndex === 0) {\n          // END token predicted, break out\n          break;\n        }\n        if (i >= maxPredictionLength) {\n          // something is wrong\n          break;\n        }\n\n        output.push(nextIndex);\n      }\n\n      /**\n       * we slice the input length here, not because output contains it, but it will be erroneous as we are sending the\n       * network what is contained in input, so the data is essentially guessed by the network what could be next, till it\n       * locks in on a value.\n       * Kind of like this, values are from input:\n       * 0 -> 4 (or in English: \"beginning on input\" -> \"I have no idea? I'll guess what they want next!\")\n       * 2 -> 2 (oh how interesting, I've narrowed down values...)\n       * 1 -> 9 (oh how interesting, I've now know what the values are...)\n       * then the output looks like: [4, 2, 9,...]\n       * so we then remove the erroneous data to get our true output\n       */\n      return this.formatDataOut(input, output.slice(input.length).map(function (value) {\n        return value - 1;\n      }));\n    }\n\n    /**\n     *\n     * @param data\n     * Verifies network sizes are initilaized\n     * If they are not it will initialize them based off the data set.\n     */\n\n  }, {\n    key: 'verifyIsInitialized',\n    value: function verifyIsInitialized(data) {\n      if (!this.model) {\n        this.initialize();\n      }\n    }\n\n    /**\n     *\n     * @param options\n     *    Supports all `trainDefaults` properties\n     *    also supports:\n     *       learningRate: (number),\n     *       momentum: (number),\n     *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n     */\n\n  }, {\n    key: 'updateTrainingOptions',\n    value: function updateTrainingOptions(options) {\n      var _this = this;\n\n      Object.keys(this.constructor.trainDefaults).forEach(function (p) {\n        return _this.trainOpts[p] = options.hasOwnProperty(p) ? options[p] : _this.trainOpts[p];\n      });\n      this.validateTrainingOptions(this.trainOpts);\n      this.setLogMethod(options.log || this.trainOpts.log);\n      this.activation = options.activation || this.activation;\n    }\n  }, {\n    key: 'validateTrainingOptions',\n    value: function validateTrainingOptions(options) {\n      _neuralNetwork2.default.prototype.validateTrainingOptions.call(this, options);\n    }\n\n    /**\n     *\n     * @param log\n     * if a method is passed in method is used\n     * if false passed in nothing is logged\n     * @returns error\n     */\n\n  }, {\n    key: 'setLogMethod',\n    value: function setLogMethod(log) {\n      if (typeof log === 'function') {\n        this.trainOpts.log = log;\n      } else if (log) {\n        this.trainOpts.log = console.log;\n      } else {\n        this.trainOpts.log = false;\n      }\n    }\n\n    /**\n     *\n     * @param data\n     * @param options\n     * @protected\n     * @return {object} { data, status, endTime }\n     */\n\n  }, {\n    key: 'prepTraining',\n    value: function prepTraining(data, options) {\n      this.updateTrainingOptions(options);\n      data = this.formatData(data);\n      var endTime = Date.now() + this.trainOpts.timeout;\n\n      var status = {\n        error: 1,\n        iterations: 0\n      };\n\n      this.verifyIsInitialized(data);\n\n      return {\n        data: data,\n        status: status,\n        endTime: endTime\n      };\n    }\n\n    /**\n     *\n     * @param {Object[]|String[]} data an array of objects: `{input: 'string', output: 'string'}` or an array of strings\n     * @param {Object} [options]\n     * @returns {{error: number, iterations: number}}\n     */\n\n  }, {\n    key: 'train',\n    value: function train(data) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this.trainOpts = options = Object.assign({}, this.constructor.trainDefaults, options);\n      var iterations = options.iterations;\n      var errorThresh = options.errorThresh;\n      var log = options.log === true ? console.log : options.log;\n      var logPeriod = options.logPeriod;\n      var callback = options.callback;\n      var callbackPeriod = options.callbackPeriod;\n      var error = Infinity;\n      var i = void 0;\n\n      if (this.hasOwnProperty('setupData')) {\n        data = this.setupData(data);\n      }\n\n      this.verifyIsInitialized();\n\n      for (i = 0; i < iterations && error > errorThresh; i++) {\n        var sum = 0;\n        for (var j = 0; j < data.length; j++) {\n          var err = this.trainPattern(data[j], true);\n          sum += err;\n        }\n        error = sum / data.length;\n\n        if (isNaN(error)) throw new Error('network error rate is unexpected NaN, check network configurations and try again');\n        if (log && i % logPeriod === 0) {\n          log('iterations: ' + i + ', training error: ' + error);\n        }\n        if (callback && i % callbackPeriod === 0) {\n          callback({ error: error, iterations: i });\n        }\n      }\n\n      return {\n        error: error,\n        iterations: i\n      };\n    }\n  }, {\n    key: 'addFormat',\n    value: function addFormat() {\n      throw new Error('not yet implemented');\n    }\n\n    /**\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var defaults = this.constructor.defaults;\n      if (!this.model) {\n        this.initialize();\n      }\n      var model = this.model;\n      var options = {};\n      for (var p in defaults) {\n        if (defaults.hasOwnProperty(p)) {\n          options[p] = this[p];\n        }\n      }\n\n      return {\n        type: this.constructor.name,\n        options: options,\n        input: model.input.toJSON(),\n        hiddenLayers: model.hiddenLayers.map(function (hiddenLayer) {\n          var layers = {};\n          for (var _p in hiddenLayer) {\n            layers[_p] = hiddenLayer[_p].toJSON();\n          }\n          return layers;\n        }),\n        outputConnector: this.model.outputConnector.toJSON(),\n        output: this.model.output.toJSON()\n      };\n    }\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      var defaults = this.constructor.defaults;\n      var options = json.options;\n      this.model = null;\n      this.hiddenLayers = null;\n      var allMatrices = [];\n      var input = _matrix2.default.fromJSON(json.input);\n      allMatrices.push(input);\n      var hiddenLayers = [];\n\n      // backward compatibility for hiddenSizes\n      (json.hiddenLayers || json.hiddenSizes).forEach(function (hiddenLayer) {\n        var layers = {};\n        for (var p in hiddenLayer) {\n          layers[p] = _matrix2.default.fromJSON(hiddenLayer[p]);\n          allMatrices.push(layers[p]);\n        }\n        hiddenLayers.push(layers);\n      });\n\n      var outputConnector = _matrix2.default.fromJSON(json.outputConnector);\n      allMatrices.push(outputConnector);\n      var output = _matrix2.default.fromJSON(json.output);\n      allMatrices.push(output);\n\n      Object.assign(this, defaults, options);\n\n      // backward compatibility\n      if (options.hiddenSizes) {\n        this.hiddenLayers = options.hiddenSizes;\n      }\n\n      if (options.dataFormatter) {\n        this.dataFormatter = _dataFormatter2.default.fromJSON(options.dataFormatter);\n      }\n\n      this.model = {\n        input: input,\n        hiddenLayers: hiddenLayers,\n        output: output,\n        allMatrices: allMatrices,\n        outputConnector: outputConnector,\n        equations: [],\n        equationConnections: []\n      };\n      this.initialLayerInputs = this.hiddenLayers.map(function (size) {\n        return new _matrix2.default(size, 1);\n      });\n      this.bindEquation();\n    }\n\n    /**\n     *\n     * @returns {Function}\n     */\n\n  }, {\n    key: 'toFunction',\n    value: function toFunction() {\n      var model = this.model;\n      var equations = this.model.equations;\n      var equation = equations[1];\n      var states = equation.states;\n      var jsonString = JSON.stringify(this.toJSON());\n\n      function matrixOrigin(m, stateIndex) {\n        for (var i = 0, max = states.length; i < max; i++) {\n          var state = states[i];\n\n          if (i === stateIndex) {\n            var j = previousConnectionIndex(m);\n            switch (m) {\n              case state.left:\n                if (j > -1) {\n                  return 'typeof prevStates[' + j + '] === \\'object\\' ? prevStates[' + j + '].product : new Matrix(' + m.rows + ', ' + m.columns + ')';\n                }\n              case state.right:\n                if (j > -1) {\n                  return 'typeof prevStates[' + j + '] === \\'object\\' ? prevStates[' + j + '].product : new Matrix(' + m.rows + ', ' + m.columns + ')';\n                }\n              case state.product:\n                return 'new Matrix(' + m.rows + ', ' + m.columns + ')';\n              default:\n                throw Error('unknown state');\n            }\n          }\n\n          if (m === state.product) return 'states[' + i + '].product';\n          if (m === state.right) return 'states[' + i + '].right';\n          if (m === state.left) return 'states[' + i + '].left';\n        }\n      }\n\n      function previousConnectionIndex(m) {\n        var connection = model.equationConnections[0];\n        var states = equations[0].states;\n        for (var i = 0, max = states.length; i < max; i++) {\n          if (states[i].product === m) {\n            return i;\n          }\n        }\n        return connection.indexOf(m);\n      }\n\n      function matrixToString(m, stateIndex) {\n        if (!m || !m.rows || !m.columns) return 'null';\n\n        if (m === model.input) return 'json.input';\n        if (m === model.outputConnector) return 'json.outputConnector';\n        if (m === model.output) return 'json.output';\n\n        for (var i = 0, max = model.hiddenLayers.length; i < max; i++) {\n          var hiddenLayer = model.hiddenLayers[i];\n          for (var p in hiddenLayer) {\n            if (!hiddenLayer.hasOwnProperty(p)) continue;\n            if (hiddenLayer[p] !== m) continue;\n            return 'json.hiddenLayers[' + i + '].' + p;\n          }\n        }\n\n        return matrixOrigin(m, stateIndex);\n      }\n\n      function toInner(fnString) {\n        // crude, but should be sufficient for now\n        // function() { body }\n        fnString = fnString.toString().split('{');\n        fnString.shift();\n        // body }\n        fnString = fnString.join('{');\n        fnString = fnString.split('}');\n        fnString.pop();\n        // body\n        return fnString.join('}').split('\\n').join('\\n        ').replace('product.deltas[i] = 0;', '').replace('product.deltas[column] = 0;', '').replace('left.deltas[leftIndex] = 0;', '').replace('right.deltas[rightIndex] = 0;', '').replace('product.deltas = left.deltas.slice(0);', '');\n      }\n\n      function fileName(fnName) {\n        return 'src/recurrent/matrix/' + fnName.replace(/[A-Z]/g, function (value) {\n          return '-' + value.toLowerCase();\n        }) + '.js';\n      }\n\n      var statesRaw = [];\n      var usedFunctionNames = {};\n      var innerFunctionsSwitch = [];\n      for (var i = 0, max = states.length; i < max; i++) {\n        var state = states[i];\n        statesRaw.push('states[' + i + '] = {\\n      name: \\'' + state.forwardFn.name + '\\',\\n      left: ' + matrixToString(state.left, i) + ',\\n      right: ' + matrixToString(state.right, i) + ',\\n      product: ' + matrixToString(state.product, i) + '\\n    }');\n\n        var fnName = state.forwardFn.name;\n        if (!usedFunctionNames[fnName]) {\n          usedFunctionNames[fnName] = true;\n          innerFunctionsSwitch.push('        case \\'' + fnName + '\\': //compiled from ' + fileName(fnName) + '\\n          ' + toInner(state.forwardFn.toString()) + '\\n          break;');\n        }\n      }\n\n      var src = '\\n  if (typeof rawInput === \\'undefined\\') rawInput = [];\\n  if (typeof isSampleI === \\'undefined\\') isSampleI = false;\\n  if (typeof temperature === \\'undefined\\') temperature = 1;\\n  ' + (this.dataFormatter ? this.dataFormatter.toFunctionString() : '') + '\\n  \\n  var input = ' + (this.dataFormatter && typeof this.formatDataIn === 'function' ? 'formatDataIn(rawInput)' : 'rawInput') + ';\\n  var json = ' + jsonString + ';\\n  var maxPredictionLength = input.length + ' + this.maxPredictionLength + ';\\n  var _i = 0;\\n  var output = [];\\n  var states = [];\\n  var prevStates;\\n  while (true) {\\n    var previousIndex = (_i === 0\\n        ? 0\\n        : _i < input.length\\n          ? input[_i - 1] + 1\\n          : output[_i - 1])\\n          ;\\n    var rowPluckIndex = previousIndex;\\n    var state;\\n    prevStates = states;\\n    states = [];\\n    ' + statesRaw.join(';\\n    ') + ';\\n    for (var stateIndex = 0, stateMax = ' + statesRaw.length + '; stateIndex < stateMax; stateIndex++) {\\n      state = states[stateIndex];\\n      var product = state.product;\\n      var left = state.left;\\n      var right = state.right;\\n      \\n      switch (state.name) {\\n' + innerFunctionsSwitch.join('\\n') + '\\n      }\\n    }\\n    \\n    var logProbabilities = state.product;\\n    if (temperature !== 1 && isSampleI) {\\n      for (var q = 0, nq = logProbabilities.weights.length; q < nq; q++) {\\n        logProbabilities.weights[q] /= temperature;\\n      }\\n    }\\n\\n    var probs = softmax(logProbabilities);\\n    var nextIndex = isSampleI ? sampleI(probs) : maxI(probs);\\n    \\n    _i++;\\n    if (nextIndex === 0) {\\n      break;\\n    }\\n    if (_i >= maxPredictionLength) {\\n      break;\\n    }\\n\\n    output.push(nextIndex);\\n  }\\n  ' + (this.dataFormatter && typeof this.formatDataOut === 'function' ? 'return formatDataOut(input, output.slice(input.length).map(function(value) { return value - 1; }))' : 'return output.slice(input.length).map(function(value) { return value - 1; })') + ';\\n  function Matrix(rows, columns) {\\n    this.rows = rows;\\n    this.columns = columns;\\n    this.weights = zeros(rows * columns);\\n  }\\n  ' + (this.dataFormatter && typeof this.formatDataIn === 'function' ? 'function formatDataIn(input, output) { ' + toInner(this.formatDataIn.toString()).replace(/this[.]dataFormatter[\\n\\s]+[.]/g, '').replace(/this[.]dataFormatter[.]/g, '').replace(/this[.]dataFormatter/g, 'true') + ' }' : '') + '\\n  ' + (this.dataFormatter !== null && typeof this.formatDataOut === 'function' ? 'function formatDataOut(input, output) { ' + toInner(this.formatDataOut.toString()).replace(/this[.]dataFormatter[\\n\\s]+[.]/g, '').replace(/this[.]dataFormatter[.]/g, '').replace(/this[.]dataFormatter/g, 'true') + ' }' : '') + '\\n  ' + _zeros2.default.toString() + '\\n  ' + _softmax2.default.toString().replace('_2.default', 'Matrix') + '\\n  ' + _random.randomF.toString() + '\\n  ' + _sampleI2.default.toString() + '\\n  ' + _maxI2.default.toString();\n      return new Function('rawInput', 'isSampleI', 'temperature', src);\n    }\n  }, {\n    key: 'isRunnable',\n    get: function get() {\n      if (this.model.equations.length === 0) {\n        console.error('No equations bound, did you run train()?');\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return RNN;\n}();\n\nexports.default = RNN;\n\n\nRNN.defaults = {\n  inputSize: 20,\n  inputRange: 20,\n  hiddenLayers: [20, 20],\n  outputSize: 20,\n  decayRate: 0.999,\n  smoothEps: 1e-8,\n  regc: 0.000001,\n  clipval: 5,\n  maxPredictionLength: 100,\n  /**\n   *\n   * @param {*[]} data\n   * @returns {Number[]}\n   */\n  setupData: function setupData(data) {\n    if (typeof data[0] !== 'string' && !Array.isArray(data[0]) && (!data[0].hasOwnProperty('input') || !data[0].hasOwnProperty('output'))) {\n      return data;\n    }\n    var values = [];\n    var result = [];\n    if (typeof data[0] === 'string' || Array.isArray(data[0])) {\n      if (!this.dataFormatter) {\n        for (var i = 0; i < data.length; i++) {\n          values.push(data[i]);\n        }\n        this.dataFormatter = new _dataFormatter2.default(values);\n      }\n      for (var _i = 0, max = data.length; _i < max; _i++) {\n        result.push(this.formatDataIn(data[_i]));\n      }\n    } else {\n      if (!this.dataFormatter) {\n        for (var _i2 = 0; _i2 < data.length; _i2++) {\n          values.push(data[_i2].input);\n          values.push(data[_i2].output);\n        }\n        this.dataFormatter = _dataFormatter2.default.fromArrayInputOutput(values);\n        this.dataFormatter.addUnrecognized();\n      }\n      for (var _i3 = 0, _max = data.length; _i3 < _max; _i3++) {\n        result.push(this.formatDataIn(data[_i3].input, data[_i3].output));\n      }\n    }\n    return result;\n  },\n  /**\n   *\n   * @param {*[]} input\n   * @param {*[]} output\n   * @returns {Number[]}\n   */\n  formatDataIn: function formatDataIn(input) {\n    var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (this.dataFormatter) {\n      if (this.dataFormatter.indexTable.hasOwnProperty('stop-input')) {\n        return this.dataFormatter.toIndexesInputOutput(input, output);\n      } else {\n        return this.dataFormatter.toIndexes(input);\n      }\n    }\n    return input;\n  },\n  /**\n   *\n   * @param {Number[]} input\n   * @param {Number[]} output\n   * @returns {*}\n   */\n  formatDataOut: function formatDataOut(input, output) {\n    if (this.dataFormatter) {\n      return this.dataFormatter.toCharacters(output).join('');\n    }\n    return output;\n  },\n  dataFormatter: null\n};\n\nRNN.trainDefaults = {\n  iterations: 20000,\n  errorThresh: 0.005,\n  log: false,\n  logPeriod: 10,\n  learningRate: 0.01,\n  callback: null,\n  callbackPeriod: 10\n};\n//# sourceMappingURL=rnn.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/recurrent/rnn.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/train-stream.js":
/*!****************************************************!*\
  !*** ./node_modules/brain.js/dist/train-stream.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = __webpack_require__(/*! stream */ \"./node_modules/stream-browserify/index.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n *\n * @param opts\n * @returns {TrainStream}\n * @constructor\n */\nvar TrainStream = function (_Writable) {\n  _inherits(TrainStream, _Writable);\n\n  function TrainStream(options) {\n    _classCallCheck(this, TrainStream);\n\n    var _this = _possibleConstructorReturn(this, (TrainStream.__proto__ || Object.getPrototypeOf(TrainStream)).call(this, {\n      objectMode: true\n    }));\n\n    options = options || {};\n\n    // require the neuralNetwork\n    if (!options.neuralNetwork) {\n      throw new Error('no neural network specified');\n    }\n\n    var _options = options,\n        neuralNetwork = _options.neuralNetwork;\n\n    _this.neuralNetwork = neuralNetwork;\n    _this.dataFormatDetermined = false;\n    _this.i = 0; // keep track of internal iterations\n    _this.size = 0;\n    _this.count = 0;\n    _this.sum = 0;\n    _this.floodCallback = options.floodCallback;\n    _this.doneTrainingCallback = options.doneTrainingCallback;\n\n    // inherit trainOpts settings from neuralNetwork\n    neuralNetwork.updateTrainingOptions(options);\n    var trainOpts = neuralNetwork.trainOpts;\n\n    _this.iterations = trainOpts.iterations;\n    _this.errorThresh = trainOpts.errorThresh;\n    _this.log = trainOpts.log;\n    _this.logPeriod = trainOpts.logPeriod;\n    _this.callbackPeriod = trainOpts.callbackPeriod;\n    _this.callback = trainOpts.callback;\n\n    _this.on('finish', _this.finishStreamIteration.bind(_this));\n    return _this;\n  }\n\n  _createClass(TrainStream, [{\n    key: 'endInputs',\n    value: function endInputs() {\n      this.write(false);\n    }\n\n    /**\n     * _write expects data to be in the form of a datum. ie. {input: {a: 1 b: 0}, output: {z: 0}}\n     * @param chunk\n     * @param enc\n     * @param next\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_write',\n    value: function _write(chunk, enc, next) {\n      if (!chunk) {\n        // check for the end of one iteration of the stream\n        this.emit('finish');\n        return next();\n      }\n\n      if (!this.dataFormatDetermined) {\n        this.size++;\n        this.neuralNetwork.addFormat(chunk);\n        this.firstDatum = this.firstDatum || chunk;\n        return next();\n      }\n\n      this.count++;\n\n      var data = this.neuralNetwork.formatData(chunk);\n      this.sum += this.neuralNetwork.trainPattern(data[0], true);\n\n      // tell the Readable Stream that we are ready for more data\n      next();\n    }\n\n    /**\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: 'finishStreamIteration',\n    value: function finishStreamIteration() {\n      if (this.dataFormatDetermined && this.size !== this.count) {\n        this.log('This iteration\\'s data length was different from the first.');\n      }\n\n      if (!this.dataFormatDetermined) {\n        var data = this.neuralNetwork.formatData(this.firstDatum);\n        this.neuralNetwork.verifyIsInitialized(data);\n        this.dataFormatDetermined = true;\n\n        if (typeof this.floodCallback === 'function') {\n          this.floodCallback();\n        }\n        return;\n      }\n\n      var error = this.sum / this.size;\n\n      if (this.log && this.i % this.logPeriod === 0) {\n        this.log('iterations: ' + this.i + ', training error: ' + error);\n      }\n      if (this.callback && this.i % this.callbackPeriod === 0) {\n        this.callback({\n          error: error,\n          iterations: this.i\n        });\n      }\n\n      this.sum = 0;\n      this.count = 0;\n      // update the iterations\n      this.i++;\n\n      // do a check here to see if we need the stream again\n      if (this.i < this.iterations && error > this.errorThresh) {\n        if (typeof this.floodCallback === 'function') {\n          return this.floodCallback();\n        }\n      } else {\n        // done training\n        if (typeof this.doneTrainingCallback === 'function') {\n          return this.doneTrainingCallback({\n            error: error,\n            iterations: this.i\n          });\n        }\n      }\n    }\n  }]);\n\n  return TrainStream;\n}(_stream.Writable);\n\nexports.default = TrainStream;\n//# sourceMappingURL=train-stream.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/train-stream.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/array-lookup-table.js":
/*!********************************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/array-lookup-table.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ArrayLookupTable;\nfunction ArrayLookupTable(data, prop) {\n  this.length = 0;\n  this.prop = prop;\n  var table = this.table = {};\n  for (var i = 0; i < data.length; i++) {\n    var datum = data[i];\n    var input = datum[prop];\n    for (var j = 0; j < input.length; j++) {\n      for (var p in input[j]) {\n        if (table.hasOwnProperty(p)) continue;\n        table[p] = this.length++;\n      }\n    }\n  }\n};\n//# sourceMappingURL=array-lookup-table.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/array-lookup-table.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/cast.js":
/*!******************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/cast.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arraysToFloat32Arrays = arraysToFloat32Arrays;\nexports.arrayToFloat32Arrays = arrayToFloat32Arrays;\nexports.arrayToFloat32Array = arrayToFloat32Array;\nexports.objectsToFloat32Arrays = objectsToFloat32Arrays;\nexports.objectToFloat32Arrays = objectToFloat32Arrays;\nexports.objectToFloat32Array = objectToFloat32Array;\nfunction arraysToFloat32Arrays(arrays) {\n  var result = [];\n  for (var i = 0; i < arrays.length; i++) {\n    result.push(Float32Array.from(arrays[i]));\n  }\n  return result;\n}\nfunction arrayToFloat32Arrays(array) {\n  var result = [];\n  for (var i = 0; i < array.length; i++) {\n    result.push(Float32Array.from([array[i]]));\n  }\n  return result;\n}\nfunction arrayToFloat32Array(array) {\n  return Float32Array.from(array);\n}\nfunction objectsToFloat32Arrays(objects, table, length) {\n  var results = [];\n  for (var i = 0; i < objects.length; i++) {\n    var object = objects[i];\n    var result = new Float32Array(length);\n    for (var p in object) {\n      if (object.hasOwnProperty(p)) {\n        result[table[p]] = object[p];\n      }\n    }\n    results.push(result);\n  }\n  return results;\n}\nfunction objectToFloat32Arrays(object) {\n  var result = [];\n  for (var p in object) {\n    result.push(Float32Array.from([object[p]]));\n  }\n  return result;\n}\nfunction objectToFloat32Array(object, table, length) {\n  var result = new Float32Array(length);\n  for (var p in object) {\n    if (object.hasOwnProperty(p)) {\n      result[table[p]] = object[p];\n    }\n  }\n  return result;\n}\n//# sourceMappingURL=cast.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/cast.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/data-formatter.js":
/*!****************************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/data-formatter.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *\n * @param {String[]|Number[]} values\n * @param maxThreshold\n * @constructor\n */\nvar DataFormatter = function () {\n  function DataFormatter(values) {\n    var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, DataFormatter);\n\n    if (values === undefined) return;\n\n    this.values = values;\n    // go over all characters and keep track of all unique ones seen\n    // count up all characters\n    this.indexTable = {};\n    this.characterTable = {};\n    this.characters = [];\n    this.specialIndexes = [];\n    this.buildCharactersFromIterable(values);\n    this.buildTables(maxThreshold);\n  }\n\n  _createClass(DataFormatter, [{\n    key: 'buildCharactersFromIterable',\n    value: function buildCharactersFromIterable(values) {\n      var tempCharactersTable = {};\n      for (var dataFormatterIndex = 0, dataFormatterLength = values.length; dataFormatterIndex < dataFormatterLength; dataFormatterIndex++) {\n        var characters = values[dataFormatterIndex];\n\n        if (characters.hasOwnProperty('length')) {\n          for (var characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {\n            var character = characters[characterIndex];\n            if (tempCharactersTable.hasOwnProperty(character)) continue;\n            tempCharactersTable[character] = true;\n            this.characters.push(character);\n          }\n        } else {\n          var _character = values[dataFormatterIndex];\n          if (tempCharactersTable.hasOwnProperty(_character)) continue;\n          tempCharactersTable[dataFormatterIndex] = true;\n          this.characters.push(_character);\n        }\n      }\n    }\n  }, {\n    key: 'buildTables',\n    value: function buildTables(maxThreshold) {\n      // filter by count threshold and create pointers\n      var charactersLength = this.characters.length;\n      for (var characterIndex = 0; characterIndex < charactersLength; characterIndex++) {\n        var character = this.characters[characterIndex];\n        if (characterIndex >= maxThreshold) {\n          // add character to dataFormatter\n          this.indexTable[character] = characterIndex;\n          this.characterTable[characterIndex] = character;\n        }\n      }\n    }\n  }, {\n    key: 'toIndexes',\n    value: function toIndexes(value) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var result = [];\n      var indexTable = this.indexTable;\n\n      for (var i = 0, max = value.length; i < max; i++) {\n        var character = value[i];\n        var index = indexTable[character];\n        if (index === undefined) {\n          if (indexTable['unrecognized']) {\n            index = indexTable['unrecognized'];\n          } else {\n            throw new Error('unrecognized character \"' + character + '\"');\n          }\n        }\n        if (index < maxThreshold) continue;\n        result.push(index);\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toIndexesInputOutput',\n    value: function toIndexesInputOutput(value1) {\n      var value2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var maxThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      var result = void 0;\n      if (typeof value1 === 'string') {\n        result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);\n      } else {\n        result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);\n      }\n\n      if (value2 === null) return result;\n\n      if (typeof value2 === 'string') {\n        return result.concat(this.toIndexes(value2.split(''), maxThreshold));\n      } else {\n        return result.concat(this.toIndexes(value2, maxThreshold));\n      }\n    }\n  }, {\n    key: 'toCharacters',\n    value: function toCharacters(indices) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var result = [];\n      var characterTable = this.characterTable;\n      var indexTable = this.indexTable;\n\n      for (var i = 0, max = indices.length; i < max; i++) {\n        var index = indices[i];\n        if (index < maxThreshold) continue;\n        var character = characterTable[index];\n        if (character === undefined) {\n          if (indexTable['unrecognized']) {\n            character = characterTable[indexTable['unrecognized']];\n          } else {\n            throw new Error('unrecognized index \"' + index + '\"');\n          }\n        } else if (character !== null) {\n          result.push(character);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toString',\n    value: function toString(indices, maxThreshold) {\n      return this.toCharacters(indices, maxThreshold).join('');\n    }\n  }, {\n    key: 'addInputOutput',\n    value: function addInputOutput() {\n      this.addSpecial('stop-input');\n      this.addSpecial('start-output');\n    }\n  }, {\n    key: 'addUnrecognized',\n    value: function addUnrecognized() {\n      this.addSpecial('unrecognized');\n    }\n  }, {\n    key: 'addSpecial',\n    value: function addSpecial(special) {\n      var character = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var specialIndex = this.indexTable[special] = this.characters.length;\n      this.characterTable[specialIndex] = character;\n      this.specialIndexes.push(this.characters.length);\n      this.characters.push(special);\n    }\n  }, {\n    key: 'countSpecial',\n    value: function countSpecial(output) {\n      var sum = 0;\n      for (var i = 0; i < this.specialIndexes; i++) {\n        var index = -1;\n        while (index = output.indexOf(this.specialIndexes[i], index) > -1) {\n          sum++;\n        }\n      }\n      return sum;\n    }\n  }, {\n    key: 'toFunctionString',\n    value: function toFunctionString() {\n      return '\\nvar characterTable = ' + JSON.stringify(this.characterTable) + ';\\nvar indexTable = ' + JSON.stringify(this.indexTable) + ';\\nvar characters = ' + JSON.stringify(this.characters) + ';\\n' + this.toIndexes.toString().replace(/(let|var) indexTable = this[.]indexTable;\\n/, '').replace(/this[.]/g, '') + '\\n' + this.toIndexesInputOutput.toString().replace(/this[.]/g, '') + '\\n' + this.toCharacters.toString().replace(/(let|var) characterTable = this[.]characterTable;\\n/g, '').replace(/this[.]/, '') + '\\n';\n    }\n  }], [{\n    key: 'fromAllPrintable',\n    value: function fromAllPrintable(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n\n      for (var i = 32; i <= 126; i++) {\n        values.push(String.fromCharCode(i));\n      }\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromAllPrintableInputOutput',\n    value: function fromAllPrintableInputOutput(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n\n      var dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromStringInputOutput',\n    value: function fromStringInputOutput(string, maxThreshold) {\n      var _String$prototype;\n\n      var values = (_String$prototype = String.prototype).concat.apply(_String$prototype, _toConsumableArray(new Set(string)));\n      var dataFormatter = new DataFormatter(values, maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromArrayInputOutput',\n    value: function fromArrayInputOutput(array, maxThreshold) {\n      var dataFormatter = new DataFormatter(array.filter(function (v, i, a) {\n        return a.indexOf(v) === i;\n      }).sort(), maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromString',\n    value: function fromString(string, maxThreshold) {\n      var _String$prototype2;\n\n      var values = (_String$prototype2 = String.prototype).concat.apply(_String$prototype2, _toConsumableArray(new Set(string)));\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      var dataFormatter = new DataFormatter();\n      dataFormatter.indexTable = json.indexTable;\n      dataFormatter.characterTable = json.characterTable;\n      dataFormatter.values = json.values;\n      dataFormatter.characters = json.characters;\n      dataFormatter.specialIndexes = json.specialIndexes;\n      return dataFormatter;\n    }\n  }]);\n\n  return DataFormatter;\n}();\n\nexports.default = DataFormatter;\n//# sourceMappingURL=data-formatter.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/data-formatter.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/lookup-table.js":
/*!**************************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/lookup-table.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = LookupTable;\nfunction LookupTable(data, prop) {\n  this.length = 0;\n  if (prop) {\n    this.prop = prop;\n    var table = this.table = {};\n    for (var i = 0; i < data.length; i++) {\n      var datum = data[i];\n      var object = datum[prop];\n      for (var p in object) {\n        if (table.hasOwnProperty(p)) continue;\n        table[p] = this.length++;\n      }\n    }\n  } else if (Array.isArray(data[0])) {\n    var _table = this.table = {};\n    for (var _i = 0; _i < data.length; _i++) {\n      var array = data[_i];\n      for (var j = 0; j < array.length; j++) {\n        var _object = array[j];\n        for (var _p in _object) {\n          if (_table.hasOwnProperty(_p)) continue;\n          _table[_p] = this.length++;\n        }\n      }\n    }\n  } else {\n    var _table2 = this.table = {};\n    for (var _i2 = 0; _i2 < data.length; _i2++) {\n      var _object2 = data[_i2];\n      for (var _p2 in _object2) {\n        if (_table2.hasOwnProperty(_p2)) continue;\n        _table2[_p2] = this.length++;\n      }\n    }\n  }\n};\n//# sourceMappingURL=lookup-table.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/lookup-table.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/max.js":
/*!*****************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/max.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = max;\n\nvar _toArray = __webpack_require__(/*! ./to-array */ \"./node_modules/brain.js/dist/utilities/to-array.js\");\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * @param values\n * @returns {number}\n */\nfunction max(values) {\n  return Math.max.apply(Math, (0, _toArray2.default)(values));\n}\n//# sourceMappingURL=max.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/max.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/mse.js":
/*!*****************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/mse.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mse;\nfunction mse(errors) {\n  // mean squared error\n  var sum = 0;\n  for (var i = 0; i < errors.length; i++) {\n    sum += errors[i] * errors[i];\n  }\n  return sum / errors.length;\n}\n//# sourceMappingURL=mse.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/mse.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/ones.js":
/*!******************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/ones.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ones;\nfunction ones(size) {\n  if (typeof Float32Array !== 'undefined') return new Float32Array(size).fill(1);\n  var array = new Array(size);\n  for (var i = 0; i < size; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n//# sourceMappingURL=ones.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/ones.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/random-weight.js":
/*!***************************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/random-weight.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = randomWeight;\nfunction randomWeight() {\n  return Math.random() * 0.4 - 0.2;\n}\n//# sourceMappingURL=random-weight.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/random-weight.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/random.js":
/*!********************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/random.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomF = randomF;\nexports.randomI = randomI;\nexports.randomN = randomN;\nfunction randomF(a, b) {\n  return Math.random() * (b - a) + a;\n}\n\nfunction randomI(a, b) {\n  return Math.floor(Math.random() * (b - a) + a);\n}\n\nfunction randomN(mu, std) {\n  return mu + gaussRandom() * std;\n}\n\n// Random numbers utils\nfunction gaussRandom() {\n  if (gaussRandom.returnV) {\n    gaussRandom.returnV = false;\n    return gaussRandom.vVal;\n  }\n  var u = 2 * Math.random() - 1;\n  var v = 2 * Math.random() - 1;\n  var r = u * u + v * v;\n  if (r == 0 || r > 1) {\n    return gaussRandom();\n  }\n  var c = Math.sqrt(-2 * Math.log(r) / r);\n  gaussRandom.vVal = v * c; // cache this\n  gaussRandom.returnV = true;\n  return u * c;\n}\ngaussRandom.returnV = false;\ngaussRandom.vVal = 0;\n//# sourceMappingURL=random.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/random.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/randos.js":
/*!********************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/randos.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = randos;\n\nvar _randomWeight = __webpack_require__(/*! ./random-weight */ \"./node_modules/brain.js/dist/utilities/random-weight.js\");\n\nvar _randomWeight2 = _interopRequireDefault(_randomWeight);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction randos(size) {\n  var array = new Float32Array(size);\n  for (var i = 0; i < size; i++) {\n    array[i] = (0, _randomWeight2.default)();\n  }\n  return array;\n}\n//# sourceMappingURL=randos.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/randos.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/range.js":
/*!*******************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/range.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = range;\n/**\n *\n * @param start\n * @param end\n * @returns {Array}\n */\nfunction range(start, end) {\n  var result = [];\n  for (; start < end; start++) {\n    result.push(start);\n  }\n  return result;\n}\n//# sourceMappingURL=range.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/range.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/to-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/to-array.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toArray;\n/**\n *\n * @param values\n * @returns {*}\n */\nfunction toArray(values) {\n  if (Array.isArray(values)) {\n    return values;\n  } else {\n    var keys = Object.keys(values);\n    var result = new Float32Array(keys.length);\n    for (var i in keys) {\n      result[i] = values[keys[i]];\n    }\n    return result;\n  }\n}\n//# sourceMappingURL=to-array.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/to-array.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/to-svg.js":
/*!********************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/to-svg.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = toSVG;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction toSVG(network, options) {\n    //default values\n    var defaultOptions = {\n        line: {\n            width: '0.5',\n            color: 'black'\n        },\n        inputs: {\n            color: 'rgba(0, 128, 0, 0.5)',\n            label: false\n        },\n        outputs: {\n            color: 'rgba(100, 149, 237, 0.5)'\n        },\n        hidden: {\n            color: 'rgba(255, 127, 80, 0.5)'\n        },\n        fontSize: '14px',\n        radius: '8',\n        width: '400',\n        height: '250'\n    };\n\n    var size = typeof network.inputSize == 'number' && typeof network.outputSize == 'number' && network.inputSize > 0 && network.outputSize > 0 ? [network.inputSize].concat(_toConsumableArray(network.hiddenLayers), [network.outputSize]) : false;\n    options = Object.assign(defaultOptions, options);\n    options.inputs.label = options.inputs.label.length == network.inputSize ? options.inputs.label : false;\n    if (size) {\n        var svg = '<svg  xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"' + options.width + '\" height=\"' + options.height + '\">';\n        var sh = options.width / size.length;\n        size.forEach(function (neuronsNu, i) {\n            var sv = options.height / neuronsNu;\n            [].concat(_toConsumableArray(Array(neuronsNu))).forEach(function (_, j) {\n                if (i == 0) {\n                    svg += '<rect x=\"' + (sh / 2 - options.radius) + '\" y=\"' + (sv / 2 + j * sv - options.radius) + '\" width=\"' + 2 * options.radius + '\" height=\"' + 2 * options.radius + '\" stroke=\"black\" stroke-width=\"1\" fill=\"' + options.inputs.color + '\" />';\n                    svg += '<line x1=\"' + sh / 4 + '\" y1=\"' + (sv / 2 + j * sv) + '\" x2=\"' + (sh / 2 - options.radius) + '\" y2=\"' + (sv / 2 + j * sv) + '\" style=\"stroke:' + options.line.color + ';stroke-width:' + options.line.width + '\" />';\n                    if (options.inputs.label) {\n                        svg += '<text x=\"' + sh / 8 + '\" y=\"' + (sv / 2 + j * sv - 5) + '\" fill=\"black\" font-size= \"' + options.fontSize + '\">' + options.inputs.label[j] + '</text>';\n                    }\n                } else {\n                    var sv_1 = options.height / size[i - 1];\n                    if (i == size.length - 1) {\n                        svg += '<circle cx=\"' + (sh / 2 + i * sh) + '\" cy=\"' + (sv / 2 + j * sv) + '\" r=\"' + options.radius + '\" stroke=\"black\" stroke-width=\"1\" fill=\"' + options.outputs.color + '\" />';\n                        svg += '<line x1=\"' + (sh / 2 + i * sh + options.radius) + '\" y1=\"' + (sv / 2 + j * sv) + '\" x2=\"' + (sh / 2 + i * sh + sh / 4) + '\" y2=\"' + (sv / 2 + j * sv) + '\" style=\"stroke:' + options.line.color + ';stroke-width:' + options.line.width + '\" />';\n                    } else {\n                        svg += '<circle cx=\"' + (sh / 2 + i * sh) + '\" cy=\"' + (sv / 2 + j * sv) + '\" r=\"' + options.radius + '\" stroke=\"black\" stroke-width=\"1\" fill=\"' + options.hidden.color + '\" />';\n                    }\n                    for (var k = 0; k < size[i - 1]; k++) {\n                        svg += '<line x1=\"' + (sh / 2 + (i - 1) * sh + options.radius) + '\" y1=\"' + (sv_1 / 2 + k * sv_1) + '\" x2=\"' + (sh / 2 + i * sh - options.radius) + '\" y2=\"' + (sv / 2 + j * sv) + '\" style=\"stroke:' + options.line.color + ';stroke-width:' + options.line.width + '\" />';\n                    }\n                }\n            });\n        });\n        svg += '</svg>';\n        return svg;\n    } else {\n        return false;\n    }\n}\n//# sourceMappingURL=to-svg.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/to-svg.js?");

/***/ }),

/***/ "./node_modules/brain.js/dist/utilities/zeros.js":
/*!*******************************************************!*\
  !*** ./node_modules/brain.js/dist/utilities/zeros.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = zeros;\nfunction zeros(size) {\n  return new Float32Array(size);\n}\n//# sourceMappingURL=zeros.js.map\n\n//# sourceURL=webpack:///./node_modules/brain.js/dist/utilities/zeros.js?");

/***/ }),

/***/ "./node_modules/brain.js/index.js":
/*!****************************************!*\
  !*** ./node_modules/brain.js/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var CrossValidate = __webpack_require__(/*! ./dist/cross-validate */ \"./node_modules/brain.js/dist/cross-validate.js\").default;\nvar likely = __webpack_require__(/*! ./dist/likely */ \"./node_modules/brain.js/dist/likely.js\").default;\nvar lookup = __webpack_require__(/*! ./dist/lookup */ \"./node_modules/brain.js/dist/lookup.js\").default;\nvar NeuralNetwork = __webpack_require__(/*! ./dist/neural-network */ \"./node_modules/brain.js/dist/neural-network.js\").default;\nvar NeuralNetworkGPU = __webpack_require__(/*! ./dist/neural-network-gpu */ \"./node_modules/brain.js/dist/neural-network-gpu.js\").default;\nvar TrainStream = __webpack_require__(/*! ./dist/train-stream */ \"./node_modules/brain.js/dist/train-stream.js\").default;\nvar RNNTimeStep = __webpack_require__(/*! ./dist/recurrent/rnn-time-step */ \"./node_modules/brain.js/dist/recurrent/rnn-time-step.js\").default;\nvar LSTMTimeStep = __webpack_require__(/*! ./dist/recurrent/lstm-time-step */ \"./node_modules/brain.js/dist/recurrent/lstm-time-step.js\").default;\nvar GRUTimeStep = __webpack_require__(/*! ./dist/recurrent/gru-time-step */ \"./node_modules/brain.js/dist/recurrent/gru-time-step.js\").default;\nvar RNN = __webpack_require__(/*! ./dist/recurrent/rnn */ \"./node_modules/brain.js/dist/recurrent/rnn.js\").default;\nvar LSTM = __webpack_require__(/*! ./dist/recurrent/lstm */ \"./node_modules/brain.js/dist/recurrent/lstm.js\").default;\nvar GRU = __webpack_require__(/*! ./dist/recurrent/gru */ \"./node_modules/brain.js/dist/recurrent/gru.js\").default;\nvar utilities = {\n  max: __webpack_require__(/*! ./dist/utilities/max */ \"./node_modules/brain.js/dist/utilities/max.js\").default,\n  mse: __webpack_require__(/*! ./dist/utilities/mse */ \"./node_modules/brain.js/dist/utilities/mse.js\").default,\n  ones: __webpack_require__(/*! ./dist/utilities/ones */ \"./node_modules/brain.js/dist/utilities/ones.js\").default,\n  random: __webpack_require__(/*! ./dist/utilities/random */ \"./node_modules/brain.js/dist/utilities/random.js\").default,\n  randomWeight: __webpack_require__(/*! ./dist/utilities/random-weight */ \"./node_modules/brain.js/dist/utilities/random-weight.js\").default,\n  randos: __webpack_require__(/*! ./dist/utilities/randos */ \"./node_modules/brain.js/dist/utilities/randos.js\").default,\n  range: __webpack_require__(/*! ./dist/utilities/range */ \"./node_modules/brain.js/dist/utilities/range.js\").default,\n  toArray: __webpack_require__(/*! ./dist/utilities/to-array */ \"./node_modules/brain.js/dist/utilities/to-array.js\").default,\n  DataFormatter: __webpack_require__(/*! ./dist/utilities/data-formatter */ \"./node_modules/brain.js/dist/utilities/data-formatter.js\").default,\n  zeros: __webpack_require__(/*! ./dist/utilities/zeros */ \"./node_modules/brain.js/dist/utilities/zeros.js\").default,\n  toSVG: __webpack_require__(/*! ./dist/utilities/to-svg */ \"./node_modules/brain.js/dist/utilities/to-svg.js\").default\n};\n\nvar brain = {\n  CrossValidate: CrossValidate,\n  likely: likely,\n  lookup: lookup,\n  NeuralNetwork: NeuralNetwork,\n  NeuralNetworkGPU: NeuralNetworkGPU,\n  TrainStream: TrainStream,\n  recurrent: {\n    RNNTimeStep: RNNTimeStep,\n    LSTMTimeStep: LSTMTimeStep,\n    GRUTimeStep: GRUTimeStep,\n    RNN: RNN,\n    LSTM: LSTM,\n    GRU: GRU,\n  },\n  utilities: utilities\n};\n\nif (typeof window !== 'undefined') {\n  window.brain = brain;\n}\nif (typeof self !== 'undefined') {\n  self.brain = brain;\n}\nif (true) {\n  module.exports = brain;\n}\n\n\n//# sourceURL=webpack:///./node_modules/brain.js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/core-util-is/lib/util.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/cpu/function-builder.js":
/*!******************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/cpu/function-builder.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar FunctionBuilderBase = __webpack_require__(/*! ../function-builder-base */ \"./node_modules/gpu.js/dist/backend/function-builder-base.js\");\nvar CPUFunctionNode = __webpack_require__(/*! ./function-node */ \"./node_modules/gpu.js/dist/backend/cpu/function-node.js\");\n\n/**\n * @class CPUFunctionBuilder\n *\n * @extends FunctionBuilderBase\n *\n * @desc Builds functions to execute on CPU from JavaScript function Strings\n *\n */\nmodule.exports = function (_FunctionBuilderBase) {\n  _inherits(CPUFunctionBuilder, _FunctionBuilderBase);\n\n  function CPUFunctionBuilder() {\n    _classCallCheck(this, CPUFunctionBuilder);\n\n    var _this = _possibleConstructorReturn(this, (CPUFunctionBuilder.__proto__ || Object.getPrototypeOf(CPUFunctionBuilder)).call(this));\n\n    _this.Node = CPUFunctionNode;\n    return _this;\n  }\n\n  return CPUFunctionBuilder;\n}(FunctionBuilderBase);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/cpu/function-builder.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/cpu/function-node.js":
/*!***************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/cpu/function-node.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar BaseFunctionNode = __webpack_require__(/*! ../function-node-base */ \"./node_modules/gpu.js/dist/backend/function-node-base.js\");\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\n\n/**\n * @class CPUFunctionNode\n *\n * @extends BaseFunctionNode#\n *\n * @desc [INTERNAL] Represents a single function, inside JS\n *\n * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\n *\n * @prop functionName         - {String}        Name of the function\n * @prop jsFunction           - {Function}   The JS Function the node represents\n * @prop jsFunctionString     - {String}        jsFunction.toString()\n * @prop paramNames           - {String[]}  Parameter names of the function\n * @prop paramTypes           - {String[]}  Shader land parameters type assumption\n * @prop isRootKernel         - {Boolean}       Special indicator, for kernel function\n * @prop webglFunctionString  - {String}        webgl converted function string\n * @prop openglFunctionString - {String}        opengl converted function string\n * @prop calledFunctions      - {String[]}  List of all the functions called\n * @prop initVariables        - {String[]}  List of variables initialized in the function\n * @prop readVariables        - {String[]}  List of variables read operations occur\n * @prop writeVariables       - {String[]}  List of variables write operations occur\n *\n */\nmodule.exports = function (_BaseFunctionNode) {\n\t_inherits(CPUFunctionNode, _BaseFunctionNode);\n\n\tfunction CPUFunctionNode(functionName, jsFunction, options) {\n\t\t_classCallCheck(this, CPUFunctionNode);\n\n\t\tvar _this = _possibleConstructorReturn(this, (CPUFunctionNode.__proto__ || Object.getPrototypeOf(CPUFunctionNode)).call(this, functionName, jsFunction, options));\n\n\t\t_this.paramSizes = options ? options.paramSizes : [];\n\t\t_this.memberStates = [];\n\t\treturn _this;\n\t}\n\n\t_createClass(CPUFunctionNode, [{\n\t\tkey: 'pushMemberState',\n\t\tvalue: function pushMemberState(name) {\n\t\t\tthis.memberStates.push(name);\n\t\t}\n\t}, {\n\t\tkey: 'popMemberState',\n\t\tvalue: function popMemberState(name) {\n\t\t\tif (this.memberState === name) {\n\t\t\t\tthis.memberStates.pop();\n\t\t\t} else {\n\t\t\t\tthrow new Error('Cannot popMemberState ' + name + ' when in ' + this.memberState);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'generate',\n\t\tvalue: function generate() {\n\t\t\tif (this.debug) {\n\t\t\t\tconsole.log(this);\n\t\t\t}\n\t\t\tthis.functionStringArray = this.astGeneric(this.getJsAST(), []);\n\t\t\tthis.functionString = this.functionStringArray.join('').trim();\n\t\t\treturn this.functionString;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name getFunctionPrototypeString\n   *\n   * @desc Returns the converted JS function\n   *\n   * @returns {String} function string, result is cached under this.getFunctionPrototypeString\n   *\n   */\n\n\t}, {\n\t\tkey: 'getFunctionPrototypeString',\n\t\tvalue: function getFunctionPrototypeString() {\n\t\t\tif (this.webGlFunctionPrototypeString) {\n\t\t\t\treturn this.webGlFunctionPrototypeString;\n\t\t\t}\n\t\t\treturn this.webGlFunctionPrototypeString = this.generate();\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astFunctionDeclaration\n   *\n   * @desc Parses the abstract syntax tree for to its *named function declaration*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astFunctionDeclaration',\n\t\tvalue: function astFunctionDeclaration(ast, retArr) {\n\t\t\tthis.builder.addFunction(null, utils.getAstString(this.jsFunctionString, ast));\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astFunctionPrototype\n   *\n   * @desc Parses the abstract syntax tree for to its *named function prototype*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astFunctionPrototype',\n\t\tvalue: function astFunctionPrototype(ast, retArr) {\n\t\t\t// Setup function return type and name\n\t\t\tif (this.isRootKernel || this.isSubKernel) {\n\t\t\t\treturn retArr;\n\t\t\t}\n\n\t\t\tretArr.push(this.returnType);\n\t\t\tretArr.push(' ');\n\t\t\tretArr.push(this.functionName);\n\t\t\tretArr.push('(');\n\n\t\t\t// Arguments handling\n\t\t\tfor (var i = 0; i < this.paramNames.length; ++i) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\t\t\t\tretArr.push('user_');\n\t\t\t\tretArr.push(this.paramNames[i]);\n\t\t\t}\n\n\t\t\tretArr.push(');\\n');\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astFunctionExpression\n   *\n   * @desc Parses the abstract syntax tree for to its *named function*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astFunctionExpression',\n\t\tvalue: function astFunctionExpression(ast, retArr) {\n\n\t\t\t// Setup function return type and name\n\t\t\tif (!this.isRootKernel) {\n\t\t\t\tretArr.push('function');\n\t\t\t\tretArr.push(' ');\n\t\t\t\tretArr.push(this.functionName);\n\t\t\t\tretArr.push('(');\n\n\t\t\t\t// Arguments handling\n\t\t\t\tfor (var i = 0; i < this.paramNames.length; ++i) {\n\t\t\t\t\tvar paramName = this.paramNames[i];\n\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tretArr.push(', ');\n\t\t\t\t\t}\n\t\t\t\t\tretArr.push('user_');\n\t\t\t\t\tretArr.push(paramName);\n\t\t\t\t}\n\n\t\t\t\t// Function opening\n\t\t\t\tretArr.push(') {\\n');\n\t\t\t}\n\n\t\t\t// Body statement iteration\n\t\t\tfor (var _i = 0; _i < ast.body.body.length; ++_i) {\n\t\t\t\tthis.astGeneric(ast.body.body[_i], retArr);\n\t\t\t\tretArr.push('\\n');\n\t\t\t}\n\n\t\t\tif (!this.isRootKernel) {\n\t\t\t\t// Function closing\n\t\t\t\tretArr.push('}\\n');\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astReturnStatement\n   *\n   * @desc Parses the abstract syntax tree for to *return* statement\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astReturnStatement',\n\t\tvalue: function astReturnStatement(ast, retArr) {\n\t\t\tif (this.isRootKernel) {\n\t\t\t\tretArr.push('kernelResult = ');\n\t\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\t\tretArr.push(';');\n\t\t\t} else if (this.isSubKernel) {\n\t\t\t\tretArr.push(this.functionName + 'Result = ');\n\t\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\t\tretArr.push(';');\n\t\t\t\tretArr.push('return ' + this.functionName + 'Result;');\n\t\t\t} else {\n\t\t\t\tretArr.push('return ');\n\t\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\t\tretArr.push(';');\n\t\t\t}\n\n\t\t\t//throw this.astErrorOutput(\n\t\t\t//\t'Non main function return, is not supported : '+this.currentFunctionNamespace,\n\t\t\t//\tast\n\t\t\t//);\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astLiteral\n   *\n   * @desc Parses the abstract syntax tree for *literal value*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astLiteral',\n\t\tvalue: function astLiteral(ast, retArr) {\n\n\t\t\t// Reject non numeric literals\n\t\t\tif (isNaN(ast.value)) {\n\t\t\t\tthrow this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);\n\t\t\t}\n\n\t\t\tretArr.push(ast.value);\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astBinaryExpression\n   *\n   * @desc Parses the abstract syntax tree for *binary* expression\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astBinaryExpression',\n\t\tvalue: function astBinaryExpression(ast, retArr) {\n\t\t\tretArr.push('(');\n\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\tretArr.push(ast.operator);\n\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\tretArr.push(')');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astIdentifierExpression\n   *\n   * @desc Parses the abstract syntax tree for *identifier* expression\n   *\n   * @param {Object} idtNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astIdentifierExpression',\n\t\tvalue: function astIdentifierExpression(idtNode, retArr) {\n\t\t\tif (idtNode.type !== 'Identifier') {\n\t\t\t\tthrow this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n\t\t\t}\n\n\t\t\tswitch (this.state) {\n\t\t\t\tcase 'input-index-y':\n\t\t\t\tcase 'input-index-z':\n\t\t\t\t\tretArr.push('(');\n\t\t\t}\n\n\t\t\tswitch (idtNode.name) {\n\t\t\t\tcase 'gpu_threadX':\n\t\t\t\t\tretArr.push('threadId.x');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_threadY':\n\t\t\t\t\tretArr.push('threadId.y');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_threadZ':\n\t\t\t\t\tretArr.push('threadId.z');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputX':\n\t\t\t\t\tretArr.push('uOutputDim.x');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputY':\n\t\t\t\t\tretArr.push('uOutputDim.y');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputZ':\n\t\t\t\t\tretArr.push('uOutputDim.z');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Infinity':\n\t\t\t\t\tretArr.push('Infinity');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this.constants && this.constants.hasOwnProperty(idtNode.name)) {\n\t\t\t\t\t\tretArr.push('constants_' + idtNode.name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar userParamName = this.getUserParamName(idtNode.name);\n\t\t\t\t\t\tif (userParamName !== null) {\n\t\t\t\t\t\t\tretArr.push('user_' + userParamName);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tretArr.push('user_' + idtNode.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tswitch (this.state) {\n\t\t\t\tcase 'input-index-y':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = this.paramSizes[this.paramNames.indexOf(this.memberState)];\n\t\t\t\t\t\tretArr.push(' * ' + size[0] + ')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'input-index-z':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar _size = this.paramSizes[this.paramNames.indexOf(this.memberState)];\n\t\t\t\t\t\tretArr.push(' * ' + _size[0] * _size[1] + ')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astForStatement\n   *\n   * @desc Parses the abstract syntax tree forfor *for-loop* expression\n   *\n   * @param {Object} forNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the parsed cpu string\n   */\n\n\t}, {\n\t\tkey: 'astForStatement',\n\t\tvalue: function astForStatement(forNode, retArr) {\n\t\t\tif (forNode.type !== 'ForStatement') {\n\t\t\t\tthrow this.astErrorOutput('Invalid for statement', forNode);\n\t\t\t}\n\n\t\t\tif (forNode.test && forNode.test.type === 'BinaryExpression') {\n\t\t\t\tif ((forNode.test.right.type === 'Identifier' || forNode.test.right.type === 'Literal') && forNode.test.operator === '<' && this.isIdentifierConstant(forNode.test.right.name) === false) {\n\n\t\t\t\t\tif (!this.loopMaxIterations) {\n\t\t\t\t\t\tconsole.warn('Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.');\n\t\t\t\t\t\tconsole.warn('Set loopMaxIterations or use a for loop of fixed length to silence this message.');\n\t\t\t\t\t}\n\n\t\t\t\t\tretArr.push('for (');\n\t\t\t\t\tthis.astGeneric(forNode.init, retArr);\n\t\t\t\t\tif (retArr[retArr.length - 1] !== ';') {\n\t\t\t\t\t\tretArr.push(';');\n\t\t\t\t\t}\n\t\t\t\t\tthis.astGeneric(forNode.test.left, retArr);\n\t\t\t\t\tretArr.push(forNode.test.operator);\n\t\t\t\t\tretArr.push('LOOP_MAX');\n\t\t\t\t\tretArr.push(';');\n\t\t\t\t\tthis.astGeneric(forNode.update, retArr);\n\t\t\t\t\tretArr.push(')');\n\n\t\t\t\t\tretArr.push('{\\n');\n\t\t\t\t\tretArr.push('if (');\n\t\t\t\t\tthis.astGeneric(forNode.test.left, retArr);\n\t\t\t\t\tretArr.push(forNode.test.operator);\n\t\t\t\t\tthis.astGeneric(forNode.test.right, retArr);\n\t\t\t\t\tretArr.push(') {\\n');\n\t\t\t\t\tif (forNode.body.type === 'BlockStatement') {\n\t\t\t\t\t\tfor (var i = 0; i < forNode.body.body.length; i++) {\n\t\t\t\t\t\t\tthis.astGeneric(forNode.body.body[i], retArr);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.astGeneric(forNode.body, retArr);\n\t\t\t\t\t}\n\t\t\t\t\tretArr.push('} else {\\n');\n\t\t\t\t\tretArr.push('break;\\n');\n\t\t\t\t\tretArr.push('}\\n');\n\t\t\t\t\tretArr.push('}\\n');\n\n\t\t\t\t\treturn retArr;\n\t\t\t\t} else if (forNode.init.declarations) {\n\t\t\t\t\tvar declarations = JSON.parse(JSON.stringify(forNode.init.declarations));\n\t\t\t\t\tvar updateArgument = forNode.update.argument;\n\t\t\t\t\tif (!Array.isArray(declarations) || declarations.length < 1) {\n\t\t\t\t\t\tconsole.log(this.jsFunctionString);\n\t\t\t\t\t\tthrow new Error('Error: Incompatible for loop declaration');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declarations.length > 1) {\n\t\t\t\t\t\tvar initArgument = null;\n\t\t\t\t\t\tfor (var _i2 = 0; _i2 < declarations.length; _i2++) {\n\t\t\t\t\t\t\tvar declaration = declarations[_i2];\n\t\t\t\t\t\t\tif (declaration.id.name === updateArgument.name) {\n\t\t\t\t\t\t\t\tinitArgument = declaration;\n\t\t\t\t\t\t\t\tdeclarations.splice(_i2, 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tretArr.push('var ');\n\t\t\t\t\t\t\t\tthis.astGeneric(declaration, retArr);\n\t\t\t\t\t\t\t\tretArr.push(';');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tretArr.push('for (let ');\n\t\t\t\t\t\tthis.astGeneric(initArgument, retArr);\n\t\t\t\t\t\tretArr.push(';');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretArr.push('for (');\n\t\t\t\t\t\tthis.astGeneric(forNode.init, retArr);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.astGeneric(forNode.test, retArr);\n\t\t\t\t\tretArr.push(';');\n\t\t\t\t\tthis.astGeneric(forNode.update, retArr);\n\t\t\t\t\tretArr.push(')');\n\t\t\t\t\tthis.astGeneric(forNode.body, retArr);\n\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow this.astErrorOutput('Invalid for statement', forNode);\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astWhileStatement\n   *\n   * @desc Parses the abstract syntax tree for *while* loop\n   *\n   *\n   * @param {Object} whileNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the parsed openclgl string\n   */\n\n\t}, {\n\t\tkey: 'astWhileStatement',\n\t\tvalue: function astWhileStatement(whileNode, retArr) {\n\t\t\tif (whileNode.type !== 'WhileStatement') {\n\t\t\t\tthrow this.astErrorOutput('Invalid while statement', whileNode);\n\t\t\t}\n\n\t\t\tretArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n\t\t\tretArr.push('if (');\n\t\t\tthis.astGeneric(whileNode.test, retArr);\n\t\t\tretArr.push(') {\\n');\n\t\t\tthis.astGeneric(whileNode.body, retArr);\n\t\t\tretArr.push('} else {\\n');\n\t\t\tretArr.push('break;\\n');\n\t\t\tretArr.push('}\\n');\n\t\t\tretArr.push('}\\n');\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astWhileStatement\n   *\n   * @desc Parses the abstract syntax tree for *do while* loop\n   *\n   *\n   * @param {Object} doWhileNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the parsed webgl string\n   */\n\n\t}, {\n\t\tkey: 'astDoWhileStatement',\n\t\tvalue: function astDoWhileStatement(doWhileNode, retArr) {\n\t\t\tif (doWhileNode.type !== 'DoWhileStatement') {\n\t\t\t\tthrow this.astErrorOutput('Invalid while statement', doWhileNode);\n\t\t\t}\n\n\t\t\tretArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n\t\t\tthis.astGeneric(doWhileNode.body, retArr);\n\t\t\tretArr.push('if (!');\n\t\t\tthis.astGeneric(doWhileNode.test, retArr);\n\t\t\tretArr.push(') {\\n');\n\t\t\tretArr.push('break;\\n');\n\t\t\tretArr.push('}\\n');\n\t\t\tretArr.push('}\\n');\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astAssignmentExpression\n   *\n   * @desc Parses the abstract syntax tree for *Assignment* Expression\n   *\n   * @param {Object} assNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astAssignmentExpression',\n\t\tvalue: function astAssignmentExpression(assNode, retArr) {\n\t\t\tthis.astGeneric(assNode.left, retArr);\n\t\t\tretArr.push(assNode.operator);\n\t\t\tthis.astGeneric(assNode.right, retArr);\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astEmptyStatement\n   *\n   * @desc Parses the abstract syntax tree for an *Empty* Statement\n   *\n   * @param {Object} eNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astEmptyStatement',\n\t\tvalue: function astEmptyStatement(eNode, retArr) {\n\t\t\t//retArr.push(';\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astBlockStatement\n   *\n   * @desc Parses the abstract syntax tree for *Block* statement\n   *\n   * @param {Object} bNode - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astBlockStatement',\n\t\tvalue: function astBlockStatement(bNode, retArr) {\n\t\t\tretArr.push('{\\n');\n\t\t\tfor (var i = 0; i < bNode.body.length; i++) {\n\t\t\t\tthis.astGeneric(bNode.body[i], retArr);\n\t\t\t}\n\t\t\tretArr.push('}\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astExpressionStatement\n   *\n   * @desc Parses the abstract syntax tree for *generic expression* statement\n   *\n   * @param {Object} esNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astExpressionStatement',\n\t\tvalue: function astExpressionStatement(esNode, retArr) {\n\t\t\tthis.astGeneric(esNode.expression, retArr);\n\t\t\tretArr.push(';');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astVariableDeclaration\n   *\n   * @desc Parses the abstract syntax tree for *Variable Declaration*\n   *\n   * @param {Object} vardecNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astVariableDeclaration',\n\t\tvalue: function astVariableDeclaration(vardecNode, retArr) {\n\t\t\tretArr.push('var ');\n\t\t\tfor (var i = 0; i < vardecNode.declarations.length; i++) {\n\t\t\t\tthis.declarations[vardecNode.declarations[i].id.name] = 'var';\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(',');\n\t\t\t\t}\n\t\t\t\tthis.astGeneric(vardecNode.declarations[i], retArr);\n\t\t\t}\n\t\t\tretArr.push(';');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astVariableDeclarator\n   *\n   * @desc Parses the abstract syntax tree for *Variable Declarator*\n   *\n   * @param {Object} ivardecNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astVariableDeclarator',\n\t\tvalue: function astVariableDeclarator(ivardecNode, retArr) {\n\t\t\tthis.astGeneric(ivardecNode.id, retArr);\n\t\t\tif (ivardecNode.init !== null) {\n\t\t\t\tretArr.push('=');\n\t\t\t\tthis.astGeneric(ivardecNode.init, retArr);\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astIfStatement\n   *\n   * @desc Parses the abstract syntax tree for *If* Statement\n   *\n   * @param {Object} ifNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astIfStatement',\n\t\tvalue: function astIfStatement(ifNode, retArr) {\n\t\t\tretArr.push('if (');\n\t\t\tthis.astGeneric(ifNode.test, retArr);\n\t\t\tretArr.push(')');\n\t\t\tif (ifNode.consequent.type === 'BlockStatement') {\n\t\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t\t} else {\n\t\t\t\tretArr.push(' {\\n');\n\t\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t\t\tretArr.push('\\n}\\n');\n\t\t\t}\n\n\t\t\tif (ifNode.alternate) {\n\t\t\t\tretArr.push('else ');\n\t\t\t\tif (ifNode.alternate.type === 'BlockStatement') {\n\t\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t\t} else {\n\t\t\t\t\tretArr.push(' {\\n');\n\t\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t\t\tretArr.push('\\n}\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astBreakStatement\n   *\n   * @desc Parses the abstract syntax tree for *Break* Statement\n   *\n   * @param {Object} brNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astBreakStatement',\n\t\tvalue: function astBreakStatement(brNode, retArr) {\n\t\t\tretArr.push('break;\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astContinueStatement\n   *\n   * @desc Parses the abstract syntax tree for *Continue* Statement\n   *\n   * @param {Object} crNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astContinueStatement',\n\t\tvalue: function astContinueStatement(crNode, retArr) {\n\t\t\tretArr.push('continue;\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astLogicalExpression\n   *\n   * @desc Parses the abstract syntax tree for *Logical* Expression\n   *\n   * @param {Object} logNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astLogicalExpression',\n\t\tvalue: function astLogicalExpression(logNode, retArr) {\n\t\t\tretArr.push('(');\n\t\t\tthis.astGeneric(logNode.left, retArr);\n\t\t\tretArr.push(logNode.operator);\n\t\t\tthis.astGeneric(logNode.right, retArr);\n\t\t\tretArr.push(')');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astUpdateExpression\n   *\n   * @desc Parses the abstract syntax tree for *Update* Expression\n   *\n   * @param {Object} uNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astUpdateExpression',\n\t\tvalue: function astUpdateExpression(uNode, retArr) {\n\t\t\tif (uNode.prefix) {\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astUnaryExpression\n   *\n   * @desc Parses the abstract syntax tree for *Unary* Expression\n   *\n   * @param {Object} uNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astUnaryExpression',\n\t\tvalue: function astUnaryExpression(uNode, retArr) {\n\t\t\tif (uNode.prefix) {\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astThisExpression\n   *\n   * @desc Parses the abstract syntax tree for *This* expression\n   *\n   * @param {Object} tNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astThisExpression',\n\t\tvalue: function astThisExpression(tNode, retArr) {\n\t\t\tretArr.push('_this');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astMemberExpression\n   *\n   * @desc Parses the abstract syntax tree for *Member* Expression\n   *\n   * @param {Object} mNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astMemberExpression',\n\t\tvalue: function astMemberExpression(mNode, retArr) {\n\t\t\tif (mNode.computed) {\n\t\t\t\tif (mNode.object.type === 'Identifier' || mNode.object.type === 'MemberExpression' && mNode.object.object.object && mNode.object.object.object.type === 'ThisExpression' && mNode.object.object.property.name === 'constants') {\n\t\t\t\t\tthis.pushState('identifier');\n\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\tthis.popState('identifier');\n\t\t\t\t\tretArr.push('[');\n\t\t\t\t\tif (this.isInput(mNode.object.name)) {\n\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t}\n\t\t\t\t\tretArr.push(']');\n\t\t\t\t} else {\n\t\t\t\t\tif (mNode.object.object) {\n\t\t\t\t\t\tif (mNode.object.object.object && this.isInput(mNode.object.object.object.name)) {\n\t\t\t\t\t\t\tthis.pushMemberState(mNode.object.object.object.name);\n\t\t\t\t\t\t\tthis.pushState('input-index-z');\n\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\tvar last = retArr.pop();\n\t\t\t\t\t\t\tretArr.push(' + ');\n\t\t\t\t\t\t\tthis.popState('input-index-z');\n\t\t\t\t\t\t\tthis.pushState('input-index');\n\t\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\t\tthis.popState('input-index');\n\t\t\t\t\t\t\tretArr.push(last);\n\t\t\t\t\t\t\tthis.popMemberState(mNode.object.object.object.name);\n\t\t\t\t\t\t} else if (this.isInput(mNode.object.object.name)) {\n\t\t\t\t\t\t\tthis.pushMemberState(mNode.object.object.name);\n\t\t\t\t\t\t\tif (!this.isState('input-index-z')) {\n\t\t\t\t\t\t\t\tthis.pushState('input-index-y');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\tvar _last = retArr.pop();\n\t\t\t\t\t\t\tretArr.push(' + ');\n\t\t\t\t\t\t\tif (!this.isState('input-index-z')) {\n\t\t\t\t\t\t\t\tthis.popState('input-index-y');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar isInputIndexZ = this.isState('input-index-z');\n\t\t\t\t\t\t\tif (isInputIndexZ) {\n\t\t\t\t\t\t\t\tthis.pushState('input-index-y');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.pushState('input-index');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\t\tif (isInputIndexZ) {\n\t\t\t\t\t\t\t\tthis.popState('input-index-y');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.popState('input-index');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tretArr.push(_last);\n\t\t\t\t\t\t\tthis.popMemberState(mNode.object.object.name);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\tvar _last2 = retArr.pop();\n\t\t\t\t\t\t\tretArr.push('][');\n\t\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\t\tretArr.push(_last2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\tvar _last3 = retArr.pop();\n\t\t\t\t\t\tretArr.push('][');\n\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\tretArr.push(_last3);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar unrolled = this.astMemberExpressionUnroll(mNode);\n\t\t\t\tif (mNode.property.type === 'Identifier' && mNode.computed) {\n\t\t\t\t\tunrolled = 'user_' + unrolled;\n\t\t\t\t}\n\n\t\t\t\tif (unrolled.indexOf('this.constants') === 0) {\n\t\t\t\t\t// remove 'this.constants' from beginning\n\t\t\t\t\tunrolled = 'constants_' + unrolled.substring(15);\n\t\t\t\t} else if (unrolled.indexOf('this') === 0) {\n\t\t\t\t\t// Its a reference to `this`, add '_' before\n\t\t\t\t\tunrolled = '_' + unrolled;\n\t\t\t\t}\n\n\t\t\t\tswitch (this.state) {\n\t\t\t\t\tcase 'input-index-y':\n\t\t\t\t\tcase 'input-index-z':\n\t\t\t\t\t\tretArr.push('(');\n\t\t\t\t}\n\n\t\t\t\tswitch (unrolled) {\n\t\t\t\t\tcase '_this.output.x':\n\t\t\t\t\t\tretArr.push(this.output[0]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '_this.output.y':\n\t\t\t\t\t\tretArr.push(this.output[1]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '_this.output.z':\n\t\t\t\t\t\tretArr.push(this.output[2]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (mNode.object && mNode.object.name && this.declarations[mNode.object.name]) {\n\t\t\t\t\t\t\tretArr.push('user_');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tretArr.push(unrolled);\n\t\t\t\t}\n\n\t\t\t\tswitch (this.state) {\n\t\t\t\t\tcase 'input-index-y':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar size = this.paramSizes[this.paramNames.indexOf(this.memberState)];\n\t\t\t\t\t\t\tretArr.push(' * ' + size[0] + ')');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 'input-index-z':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar _size2 = this.paramSizes[this.paramNames.indexOf(this.memberState)];\n\t\t\t\t\t\t\tretArr.push(' * ' + _size2[0] * _size2[1] + ')');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astSequenceExpression',\n\t\tvalue: function astSequenceExpression(sNode, retArr) {\n\t\t\tfor (var i = 0; i < sNode.expressions.length; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(',');\n\t\t\t\t}\n\t\t\t\tthis.astGeneric(sNode.expressions, retArr);\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astCallExpression\n   *\n   * @desc Parses the abstract syntax tree for *call* expression\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns  {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astCallExpression',\n\t\tvalue: function astCallExpression(ast, retArr) {\n\t\t\tif (ast.callee) {\n\t\t\t\t// Get the full function call, unrolled\n\t\t\t\tvar funcName = this.astMemberExpressionUnroll(ast.callee);\n\n\t\t\t\t// Register the function into the called registry\n\t\t\t\tif (this.calledFunctions.indexOf(funcName) < 0) {\n\t\t\t\t\tthis.calledFunctions.push(funcName);\n\t\t\t\t}\n\t\t\t\tif (!this.hasOwnProperty('funcName')) {\n\t\t\t\t\tthis.calledFunctionsArguments[funcName] = [];\n\t\t\t\t}\n\n\t\t\t\tvar functionArguments = [];\n\t\t\t\tthis.calledFunctionsArguments[funcName].push(functionArguments);\n\n\t\t\t\t// Call the function\n\t\t\t\tretArr.push(funcName);\n\n\t\t\t\t// Open arguments space\n\t\t\t\tretArr.push('(');\n\n\t\t\t\t// Add the vars\n\t\t\t\tfor (var i = 0; i < ast.arguments.length; ++i) {\n\t\t\t\t\tvar argument = ast.arguments[i];\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tretArr.push(', ');\n\t\t\t\t\t}\n\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\tif (argument.type === 'Identifier') {\n\t\t\t\t\t\tvar paramIndex = this.paramNames.indexOf(argument.name);\n\t\t\t\t\t\tif (paramIndex === -1) {\n\t\t\t\t\t\t\tfunctionArguments.push(null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfunctionArguments.push({\n\t\t\t\t\t\t\t\tname: argument.name,\n\t\t\t\t\t\t\t\ttype: this.paramTypes[paramIndex]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunctionArguments.push(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Close arguments space\n\t\t\t\tretArr.push(')');\n\n\t\t\t\treturn retArr;\n\t\t\t}\n\n\t\t\t// Failure, unknown expression\n\t\t\tthrow this.astErrorOutput('Unknown CallExpression', ast);\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionNode#\n   * @function\n   * @name astArrayExpression\n   *\n   * @desc Parses the abstract syntax tree for *Array* Expression\n   *\n   * @param {Object} arrNode - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astArrayExpression',\n\t\tvalue: function astArrayExpression(arrNode, retArr) {\n\t\t\tvar arrLen = arrNode.elements.length;\n\n\t\t\tretArr.push('[');\n\t\t\tfor (var i = 0; i < arrLen; ++i) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\t\t\t\tvar subNode = arrNode.elements[i];\n\t\t\t\tthis.astGeneric(subNode, retArr);\n\t\t\t}\n\t\t\tretArr.push(']');\n\n\t\t\treturn retArr;\n\n\t\t\t// // Failure, unknown expression\n\t\t\t// throw this.astErrorOutput(\n\t\t\t// \t'Unknown  ArrayExpression',\n\t\t\t// \tarrNode\n\t\t\t//);\n\t\t}\n\t}, {\n\t\tkey: 'astDebuggerStatement',\n\t\tvalue: function astDebuggerStatement(arrNode, retArr) {\n\t\t\tretArr.push('debugger;');\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'memberState',\n\t\tget: function get() {\n\t\t\treturn this.memberStates[this.memberStates.length - 1];\n\t\t}\n\t}]);\n\n\treturn CPUFunctionNode;\n}(BaseFunctionNode);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/cpu/function-node.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/cpu/kernel-string.js":
/*!***************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/cpu/kernel-string.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar kernelRunShortcut = __webpack_require__(/*! ../kernel-run-shortcut */ \"./node_modules/gpu.js/dist/backend/kernel-run-shortcut.js\");\n\nfunction removeFnNoise(fn) {\n  if (/^function /.test(fn)) {\n    fn = fn.substring(9);\n  }\n  return fn.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction removeNoise(str) {\n  return str.replace(/[_]typeof/g, 'typeof');\n}\n\nmodule.exports = function (cpuKernel, name) {\n  return '() => {\\n    ' + kernelRunShortcut.toString() + ';\\n    const utils = {\\n      allPropertiesOf: ' + removeNoise(utils.allPropertiesOf.toString()) + ',\\n      clone: ' + removeNoise(utils.clone.toString()) + ',\\n      checkOutput: ' + removeNoise(utils.checkOutput.toString()) + '\\n    };\\n    const Utils = utils;\\n    let Input = function() {};\\n    class ' + (name || 'Kernel') + ' {\\n      constructor() {        \\n        this.argumentsLength = 0;\\n        this._canvas = null;\\n        this._webGl = null;\\n        this.built = false;\\n        this.program = null;\\n        this.paramNames = ' + JSON.stringify(cpuKernel.paramNames) + ';\\n        this.paramTypes = ' + JSON.stringify(cpuKernel.paramTypes) + ';\\n        this.texSize = ' + JSON.stringify(cpuKernel.texSize) + ';\\n        this.output = ' + JSON.stringify(cpuKernel.output) + ';\\n        this._kernelString = `' + cpuKernel._kernelString + '`;\\n        this.output = ' + JSON.stringify(cpuKernel.output) + ';\\n\\t\\t    this.run = function() {\\n          this.run = null;\\n          this.build();\\n          return this.run.apply(this, arguments);\\n        }.bind(this);\\n        this.thread = {\\n          x: 0,\\n          y: 0,\\n          z: 0\\n        };\\n      }\\n      setCanvas(canvas) { this._canvas = canvas; return this; }\\n      setWebGl(webGl) { this._webGl = webGl; return this; }\\n      setInput(Type) { Input = Type; }\\n      ' + removeFnNoise(cpuKernel.build.toString()) + '\\n      ' + removeFnNoise(cpuKernel.setupParams.toString()) + '\\n      ' + removeFnNoise(cpuKernel.setupConstants.toString()) + '\\n      run () { ' + cpuKernel.kernelString + ' }\\n      getKernelString() { return this._kernelString; }\\n      ' + removeFnNoise(cpuKernel.validateOptions.toString()) + '\\n    };\\n    return kernelRunShortcut(new Kernel());\\n  };';\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/cpu/kernel-string.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/cpu/kernel.js":
/*!********************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/cpu/kernel.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar KernelBase = __webpack_require__(/*! ../kernel-base */ \"./node_modules/gpu.js/dist/backend/kernel-base.js\");\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar kernelString = __webpack_require__(/*! ./kernel-string */ \"./node_modules/gpu.js/dist/backend/cpu/kernel-string.js\");\n\nmodule.exports = function (_KernelBase) {\n\t_inherits(CPUKernel, _KernelBase);\n\n\t/**\n  * @constructor CPUKernel\n  *\n  * @desc Kernel Implementation for CPU.\n  *\n  * <p>Instantiates properties to the CPU Kernel.</p>\n  *\n  * @extends KernelBase\n  *\n  * @prop {Object} thread - The thread dimensions, x, y and z\n  * @prop {Object} output - The canvas dimensions\n  * @prop {Object} functionBuilder - Function Builder instance bound to this Kernel\n  * @prop {Function} run - Method to run the kernel\n  *\n  */\n\tfunction CPUKernel(fnString, settings) {\n\t\t_classCallCheck(this, CPUKernel);\n\n\t\tvar _this = _possibleConstructorReturn(this, (CPUKernel.__proto__ || Object.getPrototypeOf(CPUKernel)).call(this, fnString, settings));\n\n\t\t_this._fn = null;\n\t\t_this.run = null;\n\t\t_this._canvasCtx = null;\n\t\t_this._imageData = null;\n\t\t_this._colorData = null;\n\t\t_this._kernelString = null;\n\t\t_this.thread = {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tz: 0\n\t\t};\n\n\t\t_this.run = function () {\n\t\t\tthis.run = null;\n\t\t\tthis.build.apply(this, arguments);\n\t\t\treturn this.run.apply(this, arguments);\n\t\t}.bind(_this);\n\t\treturn _this;\n\t}\n\n\t/**\n  * @memberOf CPUKernel#\n  * @function\n  * @name validateOptions\n  *\n  * @desc Validate options related to CPU Kernel, such as\n  * dimensions size, and auto dimension support.\n  *\n  */\n\n\n\t_createClass(CPUKernel, [{\n\t\tkey: 'validateOptions',\n\t\tvalue: function validateOptions() {\n\t\t\tif (!this.output || this.output.length === 0) {\n\t\t\t\tif (arguments.length !== 1) {\n\t\t\t\t\tthrow 'Auto dimensions only supported for kernels with only one input';\n\t\t\t\t}\n\n\t\t\t\tvar argType = utils.getArgumentType(arguments[0]);\n\t\t\t\tif (argType === 'Array') {\n\t\t\t\t\tthis.output = utils.getDimensions(argType);\n\t\t\t\t} else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n\t\t\t\t\tthis.output = arguments[0].output;\n\t\t\t\t} else {\n\t\t\t\t\tthrow 'Auto dimensions not supported for input type: ' + argType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tutils.checkOutput(this.output);\n\t\t}\n\n\t\t/**\n   * @memberOf CPUKernel#\n   * @function\n   * @name build\n   *\n   * @desc Builds the Kernel, by generating the kernel\n   * string using thread dimensions, and arguments\n   * supplied to the kernel.\n   *\n   * <p>If the graphical flag is enabled, canvas is used.</p>\n   *\n   */\n\n\t}, {\n\t\tkey: 'build',\n\t\tvalue: function build() {\n\t\t\tthis.setupConstants();\n\t\t\tthis.setupParams(arguments);\n\t\t\tthis.validateOptions();\n\t\t\tvar canvas = this._canvas;\n\t\t\tif (canvas) {\n\t\t\t\t// if node or canvas is not found, don't die\n\t\t\t\tthis._canvasCtx = canvas.getContext('2d');\n\t\t\t}\n\t\t\tvar threadDim = this.threadDim = utils.clone(this.output);\n\n\t\t\twhile (threadDim.length < 3) {\n\t\t\t\tthreadDim.push(1);\n\t\t\t}\n\n\t\t\tif (this.graphical) {\n\t\t\t\tvar _canvas = this._canvas;\n\t\t\t\tif (!_canvas) {\n\t\t\t\t\tthrow new Error('no canvas available for using graphical output');\n\t\t\t\t}\n\t\t\t\t_canvas.width = threadDim[0];\n\t\t\t\t_canvas.height = threadDim[1];\n\t\t\t\tthis._imageData = this._canvasCtx.createImageData(threadDim[0], threadDim[1]);\n\t\t\t\tthis._colorData = new Uint8ClampedArray(threadDim[0] * threadDim[1] * 4);\n\t\t\t}\n\n\t\t\tvar kernelString = this.getKernelString();\n\n\t\t\tif (this.debug) {\n\t\t\t\tconsole.log('Options:');\n\t\t\t\tconsole.dir(this);\n\t\t\t\tconsole.log('Function output:');\n\t\t\t\tconsole.log(kernelString);\n\t\t\t}\n\n\t\t\tthis.kernelString = kernelString;\n\t\t\tthis.run = new Function([], kernelString).bind(this)();\n\t\t}\n\t}, {\n\t\tkey: 'color',\n\t\tvalue: function color(r, g, b, a) {\n\t\t\tif (typeof a === 'undefined') {\n\t\t\t\ta = 1;\n\t\t\t}\n\n\t\t\tr = Math.floor(r * 255);\n\t\t\tg = Math.floor(g * 255);\n\t\t\tb = Math.floor(b * 255);\n\t\t\ta = Math.floor(a * 255);\n\n\t\t\tvar width = this.output[0];\n\t\t\tvar height = this.output[1];\n\n\t\t\tvar x = this.thread.x;\n\t\t\tvar y = height - this.thread.y - 1;\n\n\t\t\tvar index = x + y * width;\n\n\t\t\tthis._colorData[index * 4 + 0] = r;\n\t\t\tthis._colorData[index * 4 + 1] = g;\n\t\t\tthis._colorData[index * 4 + 2] = b;\n\t\t\tthis._colorData[index * 4 + 3] = a;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUKernel#\n   * @function\n   * @name getKernelString\n   *\n   * @desc Generates kernel string for this kernel program.\n   *\n   * <p>If sub-kernels are supplied, they are also factored in.\n   * This string can be saved by calling the `toString` method\n   * and then can be reused later.</p>\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: 'getKernelString',\n\t\tvalue: function getKernelString() {\n\t\t\tif (this._kernelString !== null) return this._kernelString;\n\n\t\t\tvar builder = this.functionBuilder;\n\n\t\t\t// Thread dim fix (to make compilable)\n\t\t\tvar threadDim = this.threadDim || (this.threadDim = utils.clone(this.output));\n\t\t\twhile (threadDim.length < 3) {\n\t\t\t\tthreadDim.push(1);\n\t\t\t}\n\n\t\t\tbuilder.addKernel(this.fnString, {\n\t\t\t\tprototypeOnly: false,\n\t\t\t\tconstants: this.constants,\n\t\t\t\toutput: threadDim,\n\t\t\t\tdebug: this.debug,\n\t\t\t\tloopMaxIterations: this.loopMaxIterations,\n\t\t\t\tparamNames: this.paramNames,\n\t\t\t\tparamTypes: this.paramTypes,\n\t\t\t\tparamSizes: this.paramSizes,\n\t\t\t\tconstantTypes: this.constantTypes\n\t\t\t});\n\n\t\t\tbuilder.addFunctions(this.functions, {\n\t\t\t\tconstants: this.constants,\n\t\t\t\toutput: threadDim\n\t\t\t});\n\n\t\t\tbuilder.addNativeFunctions(this.nativeFunctions);\n\n\t\t\tif (this.subKernels !== null) {\n\t\t\t\tthis.subKernelOutputTextures = [];\n\t\t\t\tthis.subKernelOutputVariableNames = [];\n\t\t\t\tfor (var i = 0; i < this.subKernels.length; i++) {\n\t\t\t\t\tvar subKernel = this.subKernels[i];\n\t\t\t\t\tbuilder.addSubKernel(subKernel, {\n\t\t\t\t\t\tprototypeOnly: false,\n\t\t\t\t\t\tconstants: this.constants,\n\t\t\t\t\t\toutput: this.output,\n\t\t\t\t\t\tdebug: this.debug,\n\t\t\t\t\t\tloopMaxIterations: this.loopMaxIterations\n\t\t\t\t\t});\n\t\t\t\t\tthis.subKernelOutputVariableNames.push(subKernel.name + 'Result');\n\t\t\t\t}\n\t\t\t} else if (this.subKernelProperties !== null) {\n\t\t\t\tthis.subKernelOutputVariableNames = [];\n\t\t\t\tvar _i = 0;\n\t\t\t\tfor (var p in this.subKernelProperties) {\n\t\t\t\t\tif (!this.subKernelProperties.hasOwnProperty(p)) continue;\n\t\t\t\t\tvar _subKernel = this.subKernelProperties[p];\n\t\t\t\t\tbuilder.addSubKernel(_subKernel);\n\t\t\t\t\tthis.subKernelOutputVariableNames.push(_subKernel.name + 'Result');\n\t\t\t\t\t_i++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar prototypes = builder.getPrototypes('kernel');\n\t\t\tvar kernel = null;\n\t\t\tif (prototypes.length > 1) {\n\t\t\t\tprototypes = prototypes.filter(function (fn) {\n\t\t\t\t\tif (/^function/.test(fn)) return fn;\n\t\t\t\t\tkernel = fn;\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tkernel = prototypes.shift();\n\t\t\t}\n\t\t\tvar kernelString = this._kernelString = '\\n\\t\\tvar LOOP_MAX = ' + this._getLoopMaxString() + '\\n\\t\\tvar constants = this.constants;\\n\\t\\tvar _this = this;\\n    return function (' + this.paramNames.map(function (paramName) {\n\t\t\t\treturn 'user_' + paramName;\n\t\t\t}).join(', ') + ') {\\n      ' + this._processConstants() + '\\n      ' + this._processParams() + '\\n      ' + this._kernelLoop(kernel) + '\\n      if (this.graphical) {\\n        this._imageData.data.set(this._colorData);\\n        this._canvasCtx.putImageData(this._imageData, 0, 0);\\n        return;\\n      }\\n      ' + this._kernelOutput() + '\\n      ' + (prototypes.length > 0 ? prototypes.join('\\n') : '') + '\\n    }.bind(this);';\n\t\t\treturn kernelString;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUKernel#\n   * @function\n   * @name toString\n   *\n   * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\n   *\n   */\n\n\t}, {\n\t\tkey: 'toString',\n\t\tvalue: function toString() {\n\t\t\treturn kernelString(this);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getLoopMaxString\n   *\n   * @desc Get the maximum loop size String.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getLoopMaxString',\n\t\tvalue: function _getLoopMaxString() {\n\t\t\treturn this.loopMaxIterations ? ' ' + parseInt(this.loopMaxIterations) + ';\\n' : ' 1000;\\n';\n\t\t}\n\t}, {\n\t\tkey: '_processConstants',\n\t\tvalue: function _processConstants() {\n\t\t\tif (!this.constants) return '';\n\n\t\t\tvar result = [];\n\t\t\tfor (var p in this.constants) {\n\t\t\t\tvar type = this.constantTypes[p];\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tresult.push('  var constants_' + p + ' = this._imageTo2DArray(this.constants.' + p + ')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t\tresult.push('  var constants_' + p + ' = this._imageTo3DArray(this.constants.' + p + ')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\t\tresult.push('  var constants_' + p + ' = this.constants.' + p + '.value');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tresult.push('  var constants_' + p + ' = this.constants.' + p);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.join('\\n');\n\t\t}\n\t}, {\n\t\tkey: '_processParams',\n\t\tvalue: function _processParams() {\n\t\t\tvar result = [];\n\t\t\tfor (var i = 0; i < this.paramTypes.length; i++) {\n\t\t\t\tswitch (this.paramTypes[i]) {\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tresult.push('  user_' + this.paramNames[i] + ' = this._imageTo2DArray(user_' + this.paramNames[i] + ')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t\tresult.push('  user_' + this.paramNames[i] + ' = this._imageTo3DArray(user_' + this.paramNames[i] + ')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\t\tresult.push('  user_' + this.paramNames[i] + ' = user_' + this.paramNames[i] + '.value');\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.join(';\\n');\n\t\t}\n\t}, {\n\t\tkey: '_imageTo2DArray',\n\t\tvalue: function _imageTo2DArray(image) {\n\t\t\tvar canvas = this._canvas;\n\t\t\tif (canvas.width < image.width) {\n\t\t\t\tcanvas.width = image.width;\n\t\t\t}\n\t\t\tif (canvas.height < image.height) {\n\t\t\t\tcanvas.height = image.height;\n\t\t\t}\n\t\t\tvar ctx = this._canvasCtx;\n\t\t\tctx.drawImage(image, 0, 0, image.width, image.height);\n\t\t\tvar pixelsData = ctx.getImageData(0, 0, image.width, image.height).data;\n\t\t\tvar imageArray = new Array(image.height);\n\t\t\tvar index = 0;\n\t\t\tfor (var y = image.height - 1; y >= 0; y--) {\n\t\t\t\timageArray[y] = new Array(image.width);\n\t\t\t\tfor (var x = 0; x < image.width; x++) {\n\t\t\t\t\tvar r = pixelsData[index++] / 255;\n\t\t\t\t\tvar g = pixelsData[index++] / 255;\n\t\t\t\t\tvar b = pixelsData[index++] / 255;\n\t\t\t\t\tvar a = pixelsData[index++] / 255;\n\t\t\t\t\tvar result = [r, g, b, a];\n\t\t\t\t\tresult.r = r;\n\t\t\t\t\tresult.g = g;\n\t\t\t\t\tresult.b = b;\n\t\t\t\t\tresult.a = a;\n\t\t\t\t\timageArray[y][x] = result;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn imageArray;\n\t\t}\n\t}, {\n\t\tkey: '_imageTo3DArray',\n\t\tvalue: function _imageTo3DArray(images) {\n\t\t\tvar imagesArray = new Array(images.length);\n\t\t\tfor (var i = 0; i < images.length; i++) {\n\t\t\t\timagesArray[i] = this._imageTo2DArray(images[i]);\n\t\t\t}\n\t\t\treturn imagesArray;\n\t\t}\n\t}, {\n\t\tkey: '_kernelLoop',\n\t\tvalue: function _kernelLoop(kernelString) {\n\t\t\tswitch (this.output.length) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this._kernel1DLoop(kernelString);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this._kernel2DLoop(kernelString);\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this._kernel3DLoop(kernelString);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('unsupported size kernel');\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_kernel1DLoop',\n\t\tvalue: function _kernel1DLoop(kernelString) {\n\t\t\tvar threadDim = this.threadDim;\n\t\t\treturn '\\n    var result = new Float32Array(' + threadDim[0] + ');\\n    ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'var result_' + name + ' = new Float32Array(' + threadDim[0] + ');\\n';\n\t\t\t}).join('') + '\\n    for (var x = 0; x < ' + threadDim[0] + '; x++) {\\n      this.thread.x = x;\\n      this.thread.y = 0;\\n      this.thread.z = 0;\\n      var kernelResult;\\n      ' + kernelString + '\\n      result[x] = kernelResult;\\n      ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'result_' + name + '[x] = ' + name + ';\\n';\n\t\t\t}).join('') + '\\n    }';\n\t\t}\n\t}, {\n\t\tkey: '_kernel2DLoop',\n\t\tvalue: function _kernel2DLoop(kernelString) {\n\t\t\tvar threadDim = this.threadDim;\n\t\t\treturn '\\n    var result = new Array(' + threadDim[1] + ');\\n    ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'var result_' + name + ' = new Array(' + threadDim[1] + ');\\n';\n\t\t\t}).join('') + '\\n    for (var y = 0; y < ' + threadDim[1] + '; y++) {\\n      this.thread.z = 0;\\n      this.thread.y = y;\\n      var resultX = result[y] = new Float32Array(' + threadDim[0] + ');\\n      ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'var result_' + name + 'X = result_' + name + '[y] = new Float32Array(' + threadDim[0] + ');\\n';\n\t\t\t}).join('') + '\\n      for (var x = 0; x < ' + threadDim[0] + '; x++) {\\n      \\tthis.thread.x = x;\\n        var kernelResult;\\n        ' + kernelString + '\\n        resultX[x] = kernelResult;\\n        ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'result_' + name + 'X[x] = ' + name + ';\\n';\n\t\t\t}).join('') + '\\n      }\\n    }';\n\t\t}\n\t}, {\n\t\tkey: '_kernel3DLoop',\n\t\tvalue: function _kernel3DLoop(kernelString) {\n\t\t\tvar threadDim = this.threadDim;\n\t\t\treturn '\\n    var result = new Array(' + threadDim[2] + ');\\n    ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'var result_' + name + ' = new Array(' + threadDim[2] + ');\\n';\n\t\t\t}).join('') + '\\n    for (var z = 0; z < ' + threadDim[2] + '; z++) {\\n      this.thread.z = z;\\n      var resultY = result[z] = new Array(' + threadDim[1] + ');\\n      ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'var result_' + name + 'Y = result_' + name + '[z] = new Array(' + threadDim[1] + ');\\n';\n\t\t\t}).join('') + '\\n      for (var y = 0; y < ' + threadDim[1] + '; y++) {\\n        this.thread.y = y;\\n        var resultX = resultY[y] = new Float32Array(' + threadDim[0] + ');\\n        ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'var result_' + name + 'X = result_' + name + 'Y[y] = new Float32Array(' + threadDim[0] + ');\\n';\n\t\t\t}).join('') + '\\n        for (var x = 0; x < ' + threadDim[0] + '; x++) {\\n        \\tthis.thread.x = x;\\n          var kernelResult;\\n          ' + kernelString + '\\n          resultX[x] = kernelResult;\\n          ' + this._mapSubKernels(function (name) {\n\t\t\t\treturn 'result_' + name + 'X[x] = ' + name + ';\\n';\n\t\t\t}).join('') + '\\n        }\\n      }\\n    }';\n\t\t}\n\t}, {\n\t\tkey: '_kernelOutput',\n\t\tvalue: function _kernelOutput() {\n\t\t\tvar _this2 = this;\n\n\t\t\tif (!this.subKernelOutputVariableNames) {\n\t\t\t\treturn 'return result;';\n\t\t\t}\n\t\t\treturn 'return {\\n      result: result,\\n      ' + Object.keys(this.subKernelProperties || this.subKernelOutputVariableNames).map(function (name, i) {\n\t\t\t\treturn name + ': result_' + _this2.subKernelOutputVariableNames[i];\n\t\t\t}).join(',\\n') + '\\n    };';\n\t\t}\n\t}, {\n\t\tkey: '_mapSubKernels',\n\t\tvalue: function _mapSubKernels(fn) {\n\t\t\treturn this.subKernelOutputVariableNames === null ? [''] : this.subKernelOutputVariableNames.map(fn);\n\t\t}\n\t}]);\n\n\treturn CPUKernel;\n}(KernelBase);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/cpu/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/cpu/runner.js":
/*!********************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/cpu/runner.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar RunnerBase = __webpack_require__(/*! ../runner-base */ \"./node_modules/gpu.js/dist/backend/runner-base.js\");\nvar CPUKernel = __webpack_require__(/*! ./kernel */ \"./node_modules/gpu.js/dist/backend/cpu/kernel.js\");\nvar CPUFunctionBuilder = __webpack_require__(/*! ./function-builder */ \"./node_modules/gpu.js/dist/backend/cpu/function-builder.js\");\n\nmodule.exports = function (_RunnerBase) {\n\t_inherits(CPURunner, _RunnerBase);\n\n\t/**\n  * @constructor CPURunner\n  *\n  * @desc Instantiates a Runner instance for the kernel.\n  * \n  * @extends RunnerBase\n  *\n  * @param {Object} settings - Settings to instantiate properties in RunnerBase, with given values\n  *\n  */\n\n\tfunction CPURunner(settings) {\n\t\t_classCallCheck(this, CPURunner);\n\n\t\tvar _this = _possibleConstructorReturn(this, (CPURunner.__proto__ || Object.getPrototypeOf(CPURunner)).call(this, new CPUFunctionBuilder(), settings));\n\n\t\t_this.Kernel = CPUKernel;\n\t\t_this.kernel = null;\n\t\treturn _this;\n\t}\n\n\t/**\n  * @memberOf CPURunner#\n  * @function\n  * @name getMode()\n  *\n  * Return the current mode in which gpu.js is executing.\n  * \n  * @returns {String} The current mode; \"cpu\".\n  *\n  */\n\n\n\t_createClass(CPURunner, [{\n\t\tkey: 'getMode',\n\t\tvalue: function getMode() {\n\t\t\treturn 'cpu';\n\t\t}\n\t}]);\n\n\treturn CPURunner;\n}(RunnerBase);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/cpu/runner.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/function-builder-base.js":
/*!*******************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/function-builder-base.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n\n\t/**\n  * @constructor FunctionBuilderBase\n  *\n  * @desc This handles all the raw state, converted state, etc. of a single function.\n  * [INTERNAL] A collection of functionNodes.\n  * \n  * @prop {Object} nodeMap - Object map, where nodeMap[function] = new FunctionNode;\n  * @prop {Object} gpu - The current gpu instance bound to this builder\n  * @prop {Object} rootKernel - The root kernel object, contains the paramNames, dimensions etc.\n  * \n  */\n\tfunction FunctionBuilderBase(gpu) {\n\t\t_classCallCheck(this, FunctionBuilderBase);\n\n\t\tthis.nodeMap = {};\n\t\tthis.nativeFunctions = {};\n\t\tthis.gpu = gpu;\n\t\tthis.rootKernel = null;\n\t\tthis.Node = null;\n\t}\n\n\t_createClass(FunctionBuilderBase, [{\n\t\tkey: 'addNativeFunction',\n\t\tvalue: function addNativeFunction(functionName, glslFunctionString) {\n\t\t\tthis.nativeFunctions[functionName] = glslFunctionString;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name addFunction\n   *\n   * @desc Instantiates a FunctionNode, and add it to the nodeMap\n   *\n   * @param {String} functionName - Function name to assume, if its null, it attempts to extract from the function\n   * @param {Function} jsFunction - JS Function to do conversion\n   * @param {Object} [options]\n   *\n   */\n\n\t}, {\n\t\tkey: 'addFunction',\n\t\tvalue: function addFunction(functionName, jsFunction, options) {\n\t\t\tthis.addFunctionNode(new this.Node(functionName, jsFunction, options).setBuilder(this));\n\t\t}\n\t}, {\n\t\tkey: 'addFunctions',\n\t\tvalue: function addFunctions(functions, options) {\n\t\t\tif (functions) {\n\t\t\t\tif (Array.isArray(functions)) {\n\t\t\t\t\tfor (var i = 0; i < functions.length; i++) {\n\t\t\t\t\t\tthis.addFunction(null, functions[i], options);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var p in functions) {\n\t\t\t\t\t\tthis.addFunction(p, functions[p], options);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'addNativeFunctions',\n\t\tvalue: function addNativeFunctions(nativeFunctions) {\n\t\t\tfor (var functionName in nativeFunctions) {\n\t\t\t\tif (!nativeFunctions.hasOwnProperty(functionName)) continue;\n\t\t\t\tthis.addNativeFunction(functionName, nativeFunctions[functionName]);\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name addFunctionNode\n   *\n   * @desc Add the function node directly\n   *\n   * @param {functionNode} inNode - functionNode to add\n   *\n   */\n\n\t}, {\n\t\tkey: 'addFunctionNode',\n\t\tvalue: function addFunctionNode(inNode) {\n\t\t\tthis.nodeMap[inNode.functionName] = inNode;\n\t\t\tif (inNode.isRootKernel) {\n\t\t\t\tthis.rootKernel = inNode;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name traceFunctionCalls\n   *\n   * @desc Trace all the depending functions being called, from a single function\n   *\n   * This allow for 'unneeded' functions to be automatically optimized out.\n   * Note that the 0-index, is the starting function trace.\n   *\n   * @param {String} functionName - Function name to trace from, default to 'kernel'\n   * @param {String[]} retList - Returning list of function names that is traced. Including itself.\n   * @param {Object} [parent] - Parent node\n   *\n   * @returns {String[]}  Returning list of function names that is traced. Including itself.\n   */\n\n\t}, {\n\t\tkey: 'traceFunctionCalls',\n\t\tvalue: function traceFunctionCalls(functionName, retList, parent) {\n\t\t\tfunctionName = functionName || 'kernel';\n\t\t\tretList = retList || [];\n\n\t\t\tvar fNode = this.nodeMap[functionName];\n\t\t\tif (fNode) {\n\t\t\t\t// Check if function already exists\n\t\t\t\tvar functionIndex = retList.indexOf(functionName);\n\t\t\t\tif (functionIndex === -1) {\n\t\t\t\t\tretList.push(functionName);\n\t\t\t\t\tif (parent) {\n\t\t\t\t\t\tfNode.parent = parent;\n\t\t\t\t\t}\n\t\t\t\t\tfNode.getFunctionString(); //ensure JS trace is done\n\t\t\t\t\tfor (var i = 0; i < fNode.calledFunctions.length; ++i) {\n\t\t\t\t\t\tthis.traceFunctionCalls(fNode.calledFunctions[i], retList, fNode);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/**\n      * https://github.com/gpujs/gpu.js/issues/207\n      * if dependent function is already in the list, because a function depends on it, and because it has\n      * already been traced, we know that we must move the dependent function to the end of the the retList.\n      * */\n\t\t\t\t\tvar dependantFunctionName = retList.splice(functionIndex, 1)[0];\n\t\t\t\t\tretList.push(dependantFunctionName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.nativeFunctions[functionName]) {\n\t\t\t\tif (retList.indexOf(functionName) >= 0) {\n\t\t\t\t\t// Does nothing if already traced\n\t\t\t\t} else {\n\t\t\t\t\tretList.push(functionName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn retList;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name addKernel\n   *\n   * @desc Add a new kernel to this instance\n   *\n   * @param {String} fnString - Kernel function as a String\n   * @param {Object} options - Settings object to set constants, debug mode, etc.\n   *\n   *\n   * @returns {Object} The inserted kernel as a Kernel Node\n   *\n   */\n\n\t}, {\n\t\tkey: 'addKernel',\n\t\tvalue: function addKernel(fnString, options) {\n\t\t\tvar kernelNode = new this.Node('kernel', fnString, options);\n\t\t\tkernelNode.setBuilder(this);\n\t\t\tkernelNode.isRootKernel = true;\n\t\t\tthis.addFunctionNode(kernelNode);\n\t\t\treturn kernelNode;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name addSubKernel\n   *\n   * @desc Add a new sub-kernel to the current kernel instance\n   *\n   * @param {Function} jsFunction - Sub-kernel function (JavaScript)\n   * @param {Object} options - Settings object to set constants, debug mode, etc.\n   *\n   * @returns {Object} The inserted sub-kernel as a Kernel Node\n   *\n   */\n\n\t}, {\n\t\tkey: 'addSubKernel',\n\t\tvalue: function addSubKernel(jsFunction, options) {\n\t\t\tvar kernelNode = new this.Node(null, jsFunction, options);\n\t\t\tkernelNode.setBuilder(this);\n\t\t\tkernelNode.isSubKernel = true;\n\t\t\tthis.addFunctionNode(kernelNode);\n\t\t\treturn kernelNode;\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionBuilder#\n   * @name getPrototypeString\n   * @function\n   *\n   * @desc Return the string for a function\n   *\n   * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n   *\n   * @returns {String} The full string, of all the various functions. Trace optimized if functionName given\n   *\n   */\n\n\t}, {\n\t\tkey: 'getPrototypeString',\n\t\tvalue: function getPrototypeString(functionName) {\n\t\t\treturn this.getPrototypes(functionName).join('\\n');\n\t\t}\n\n\t\t/**\n   * @memberOf CPUFunctionBuilder#\n   * @name getPrototypeString\n   * @function\n   *\n   * @desc Return the string for a function\n   *\n   * @param {String} [functionName] - Function name to trace from. If null, it returns the WHOLE builder stack\n   *\n   * @returns {Array} The full string, of all the various functions. Trace optimized if functionName given\n   *\n   */\n\n\t}, {\n\t\tkey: 'getPrototypes',\n\t\tvalue: function getPrototypes(functionName) {\n\t\t\tthis.rootKernel.generate();\n\t\t\tif (functionName) {\n\t\t\t\treturn this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());\n\t\t\t}\n\t\t\treturn this.getPrototypesFromFunctionNames(Object.keys(this.nodeMap));\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name getStringFromFunctionNames\n   *\n   * @desc Get string from function names\n   *\n   * @param {String[]} functionList - List of function to build string\n   *\n   * @returns {String} The string, of all the various functions. Trace optimized if functionName given\n   *\n   */\n\n\t}, {\n\t\tkey: 'getStringFromFunctionNames',\n\t\tvalue: function getStringFromFunctionNames(functionList) {\n\t\t\tvar ret = [];\n\t\t\tfor (var i = 0; i < functionList.length; ++i) {\n\t\t\t\tvar node = this.nodeMap[functionList[i]];\n\t\t\t\tif (node) {\n\t\t\t\t\tret.push(this.nodeMap[functionList[i]].getFunctionString());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret.join('\\n');\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name getPrototypeStringFromFunctionNames\n   *\n   * @desc Return string of all functions converted\n   *\n   * @param {String[]} functionList - List of function names to build the string.\n   * @param {Object} [opt - Settings object passed to functionNode. See functionNode for more details.\n   *\n   * @returns {Array} Prototypes of all functions converted\n   *\n   */\n\n\t}, {\n\t\tkey: 'getPrototypesFromFunctionNames',\n\t\tvalue: function getPrototypesFromFunctionNames(functionList, opt) {\n\t\t\tvar ret = [];\n\t\t\tfor (var i = 0; i < functionList.length; ++i) {\n\t\t\t\tvar functionName = functionList[i];\n\t\t\t\tvar node = this.nodeMap[functionName];\n\t\t\t\tif (node) {\n\t\t\t\t\tret.push(node.getFunctionPrototypeString(opt));\n\t\t\t\t} else if (this.nativeFunctions[functionName]) {\n\t\t\t\t\tret.push(this.nativeFunctions[functionName]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name getPrototypeStringFromFunctionNames\n   *\n   * @desc Return string of all functions converted\n   *\n   * @param {String[]} functionList - List of function names to build the string.\n   * @param {Object} opt - Settings object passed to functionNode. See functionNode for more details.\n   *\n   * @returns {String} Prototype string of all functions converted\n   *\n   */\n\n\t}, {\n\t\tkey: 'getPrototypeStringFromFunctionNames',\n\t\tvalue: function getPrototypeStringFromFunctionNames(functionList, opt) {\n\t\t\treturn this.getPrototypesFromFunctionNames(functionList, opt).toString();\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name getString\n   *\n   * Get string for a particular function name\n   *\n   * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n   *\n   * @returns {String} The string, of all the various functions. Trace optimized if functionName given\n   *\n   */\n\n\t}, {\n\t\tkey: 'getString',\n\t\tvalue: function getString(functionName, opt) {\n\t\t\tif (opt === undefined) {\n\t\t\t\topt = {};\n\t\t\t}\n\n\t\t\tif (functionName) {\n\t\t\t\treturn this.getStringFromFunctionNames(this.traceFunctionCalls(functionName, [], opt).reverse(), opt);\n\t\t\t}\n\t\t\treturn this.getStringFromFunctionNames(Object.keys(this.nodeMap), opt);\n\t\t}\n\t}]);\n\n\treturn FunctionBuilderBase;\n}();\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/function-builder-base.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/function-node-base.js":
/*!****************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/function-node-base.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = __webpack_require__(/*! ../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar acorn = __webpack_require__(/*! acorn */ \"./node_modules/gpu.js/node_modules/acorn/dist/acorn.es.js\");\n\nmodule.exports = function () {\n\n\t/**\n  * @constructor FunctionNodeBase\n  * \n  * @desc Represents a single function, inside JS, webGL, or openGL.\n  * \n  * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\n  * \n  * @prop {String} functionName - Name of the function\n  * @prop {Function} jsFunction - The JS Function the node represents\n  * @prop {String} jsFunctionString - jsFunction.toString()\n  * @prop {String[]} paramNames - Parameter names of the function\n  * @prop {String[]} paramTypes - Shader land parameters type assumption\n  * @prop {Boolean} isRootKernel - Special indicator, for kernel function\n  * @prop {String} webglFunctionString - webgl converted function string\n  * @prop {String} openglFunctionString - opengl converted function string\n  * @prop {String[]} calledFunctions - List of all the functions called\n  * @param {String} functionName - Function name to assume, if its null, it attempts to extract from the function\n  * @param {Function|String} jsFunction - JS Function to do conversion\n  * @param {Object} options\n  *\n  */\n\tfunction BaseFunctionNode(functionName, jsFunction, options) {\n\t\t_classCallCheck(this, BaseFunctionNode);\n\n\t\tthis.calledFunctions = [];\n\t\tthis.calledFunctionsArguments = {};\n\t\tthis.builder = null;\n\t\tthis.isRootKernel = false;\n\t\tthis.isSubKernel = false;\n\t\tthis.parent = null;\n\t\tthis.debug = null;\n\t\tthis.prototypeOnly = null;\n\t\tthis.constants = null;\n\t\tthis.output = null;\n\t\tthis.declarations = {};\n\t\tthis.states = [];\n\t\tthis.fixIntegerDivisionAccuracy = null;\n\n\t\tvar paramTypes = void 0;\n\t\tvar returnType = void 0;\n\t\tif (options) {\n\t\t\tif (options.hasOwnProperty('debug')) {\n\t\t\t\tthis.debug = options.debug;\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('prototypeOnly')) {\n\t\t\t\tthis.prototypeOnly = options.prototypeOnly;\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('constants')) {\n\t\t\t\tthis.constants = options.constants;\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('output')) {\n\t\t\t\tthis.output = options.output;\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('loopMaxIterations')) {\n\t\t\t\tthis.loopMaxIterations = options.loopMaxIterations;\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('paramTypes')) {\n\t\t\t\tthis.paramTypes = paramTypes = options.paramTypes;\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('constantTypes')) {\n\t\t\t\tthis.constantTypes = options.constantTypes;\n\t\t\t} else {\n\t\t\t\tthis.constantTypes = {};\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('returnType')) {\n\t\t\t\treturnType = options.returnType;\n\t\t\t}\n\t\t\tif (options.hasOwnProperty('fixIntegerDivisionAccuracy')) {\n\t\t\t\tthis.fixIntegerDivisionAccuracy = options.fixIntegerDivisionAccuracy;\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// Missing jsFunction object exception\n\t\t//\n\t\tif (!jsFunction) {\n\t\t\tthrow 'jsFunction, parameter is missing';\n\t\t}\n\n\t\t//\n\t\t// Setup jsFunction and its string property + validate them\n\t\t//\n\t\tthis.jsFunctionString = jsFunction.toString();\n\t\tif (!utils.isFunctionString(this.jsFunctionString)) {\n\t\t\tconsole.error('jsFunction, to string conversion check failed: not a function?', this.jsFunctionString);\n\t\t\tthrow 'jsFunction, to string conversion check failed: not a function?';\n\t\t}\n\n\t\tif (!utils.isFunction(jsFunction)) {\n\t\t\t//throw 'jsFunction, is not a valid JS Function';\n\t\t\tthis.jsFunction = null;\n\t\t} else {\n\t\t\tthis.jsFunction = jsFunction;\n\t\t}\n\n\t\t//\n\t\t// Setup the function name property\n\t\t//\n\t\tthis.functionName = functionName || jsFunction && jsFunction.name || utils.getFunctionNameFromString(this.jsFunctionString);\n\n\t\tif (!this.functionName) {\n\t\t\tthrow 'jsFunction, missing name argument or value';\n\t\t}\n\n\t\t//\n\t\t// Extract parameter name, and its argument types\n\t\t//\n\t\tthis.paramNames = utils.getParamNamesFromString(this.jsFunctionString);\n\t\tif (paramTypes) {\n\t\t\tif (Array.isArray(paramTypes)) {\n\t\t\t\tif (paramTypes.length !== this.paramNames.length) {\n\t\t\t\t\tthrow 'Invalid argument type array length, against function length -> (' + paramTypes.length + ',' + this.paramNames.length + ')';\n\t\t\t\t}\n\t\t\t\tthis.paramTypes = paramTypes;\n\t\t\t} else if ((typeof paramTypes === 'undefined' ? 'undefined' : _typeof(paramTypes)) === 'object') {\n\t\t\t\tvar paramVariableNames = Object.keys(paramTypes);\n\t\t\t\tif (paramTypes.hasOwnProperty('returns')) {\n\t\t\t\t\tthis.returnType = paramTypes.returns;\n\t\t\t\t\tparamVariableNames.splice(paramVariableNames.indexOf('returns'), 1);\n\t\t\t\t}\n\t\t\t\tif (paramVariableNames.length > 0 && paramVariableNames.length !== this.paramNames.length) {\n\t\t\t\t\tthrow 'Invalid argument type array length, against function length -> (' + paramVariableNames.length + ',' + this.paramNames.length + ')';\n\t\t\t\t} else {\n\t\t\t\t\tthis.paramTypes = this.paramNames.map(function (key) {\n\t\t\t\t\t\tif (paramTypes.hasOwnProperty(key)) {\n\t\t\t\t\t\t\treturn paramTypes[key];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 'Number';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.paramTypes = [];\n\t\t}\n\n\t\t//\n\t\t// Return type handling\n\t\t//\n\t\tif (!this.returnType) {\n\t\t\tthis.returnType = returnType || 'Number';\n\t\t}\n\t}\n\n\t_createClass(BaseFunctionNode, [{\n\t\tkey: 'isIdentifierConstant',\n\t\tvalue: function isIdentifierConstant(paramName) {\n\t\t\tif (!this.constants) return false;\n\t\t\treturn this.constants.hasOwnProperty(paramName);\n\t\t}\n\t}, {\n\t\tkey: 'isInput',\n\t\tvalue: function isInput(paramName) {\n\t\t\treturn this.paramTypes[this.paramNames.indexOf(paramName)] === 'Input';\n\t\t}\n\t}, {\n\t\tkey: 'setBuilder',\n\t\tvalue: function setBuilder(builder) {\n\t\t\tthis.builder = builder;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'pushState',\n\t\tvalue: function pushState(state) {\n\t\t\tthis.states.push(state);\n\t\t}\n\t}, {\n\t\tkey: 'popState',\n\t\tvalue: function popState(state) {\n\t\t\tif (this.state !== state) {\n\t\t\t\tthrow new Error('Cannot popState ' + state + ' when in ' + this.state);\n\t\t\t}\n\t\t\tthis.states.pop();\n\t\t}\n\t}, {\n\t\tkey: 'isState',\n\t\tvalue: function isState(state) {\n\t\t\treturn this.state === state;\n\t\t}\n\t}, {\n\t\tkey: 'getJsFunction',\n\n\t\t/**\n   * \n   * Core Functions\n   * \n   */\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name getJSFunction\n   *\n   * @desc Gets and return the stored JS Function.\n   * Note: that this internally eval the function, if only the string was provided on construction\n   *\n   * @returns {Function} The function object\n   *\n   */\n\t\tvalue: function getJsFunction() {\n\t\t\tif (this.jsFunction) {\n\t\t\t\treturn this.jsFunction;\n\t\t\t}\n\n\t\t\tif (this.jsFunctionString) {\n\t\t\t\tthis.jsFunction = eval(this.jsFunctionString);\n\t\t\t\treturn this.jsFunction;\n\t\t\t}\n\n\t\t\tthrow 'Missing jsFunction, and jsFunctionString parameter';\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name astMemberExpressionUnroll\n   * @desc Parses the abstract syntax tree for binary expression.\n   *\n   * <p>Utility function for astCallExpression.</p>\n   *\n   * @param {Object} ast - the AST object to parse\n   *\n   * @returns {String} the function namespace call, unrolled\n   */\n\n\t}, {\n\t\tkey: 'astMemberExpressionUnroll',\n\t\tvalue: function astMemberExpressionUnroll(ast) {\n\t\t\tif (ast.type === 'Identifier') {\n\t\t\t\treturn ast.name;\n\t\t\t} else if (ast.type === 'ThisExpression') {\n\t\t\t\treturn 'this';\n\t\t\t}\n\n\t\t\tif (ast.type === 'MemberExpression') {\n\t\t\t\tif (ast.object && ast.property) {\n\t\t\t\t\t//babel sniffing\n\t\t\t\t\tif (ast.object.hasOwnProperty('name') && ast.object.name[0] === '_') {\n\t\t\t\t\t\treturn this.astMemberExpressionUnroll(ast.property);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.astMemberExpressionUnroll(ast.object) + '.' + this.astMemberExpressionUnroll(ast.property);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//babel sniffing\n\t\t\tif (ast.hasOwnProperty('expressions')) {\n\t\t\t\tvar firstExpression = ast.expressions[0];\n\t\t\t\tif (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {\n\t\t\t\t\treturn this.astMemberExpressionUnroll(ast.expressions[1]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Failure, unknown expression\n\t\t\tthrow this.astErrorOutput('Unknown CallExpression_unroll', ast);\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name getJsAST\n   *\n   * @desc Parses the class function JS, and returns its Abstract Syntax Tree object.\n   *\n   * This is used internally to convert to shader code\n   *\n   * @param {Object} [inParser] - Parser to use, assumes in scope 'parser' if null or undefined\n   *\n   * @returns {Object} The function AST Object, note that result is cached under this.jsFunctionAST;\n   *\n   */\n\n\t}, {\n\t\tkey: 'getJsAST',\n\t\tvalue: function getJsAST(inParser) {\n\t\t\tif (this.jsFunctionAST) {\n\t\t\t\treturn this.jsFunctionAST;\n\t\t\t}\n\n\t\t\tinParser = inParser || acorn;\n\t\t\tif (inParser === null) {\n\t\t\t\tthrow 'Missing JS to AST parser';\n\t\t\t}\n\n\t\t\tvar ast = inParser.parse('var ' + this.functionName + ' = ' + this.jsFunctionString + ';', {\n\t\t\t\tlocations: true\n\t\t\t});\n\t\t\tif (ast === null) {\n\t\t\t\tthrow 'Failed to parse JS code';\n\t\t\t}\n\n\t\t\t// take out the function object, outside the var declarations\n\t\t\tvar funcAST = ast.body[0].declarations[0].init;\n\t\t\tthis.jsFunctionAST = funcAST;\n\n\t\t\treturn funcAST;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name getFunctionString\n   *\n   * @desc Returns the converted webgl shader function equivalent of the JS function\n   *\n   * @returns {String} webgl function string, result is cached under this.webGlFunctionString\n   *\n   */\n\n\t}, {\n\t\tkey: 'getFunctionString',\n\t\tvalue: function getFunctionString() {\n\t\t\tthis.generate();\n\t\t\treturn this.functionString;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name setFunctionString\n   *\n   * @desc Set the functionString value, overwriting it\n   *\n   * @param {String} functionString - Shader code string, representing the function\n   *\n   */\n\n\t}, {\n\t\tkey: 'setFunctionString',\n\t\tvalue: function setFunctionString(functionString) {\n\t\t\tthis.functionString = functionString;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name getParamType\n   *\n   * @desc Return the type of parameter sent to subKernel/Kernel.\n   *\n   * @param {String} paramName - Name of the parameter\n   *\n   * @returns {String} Type of the parameter\n   *\n   */\n\n\t}, {\n\t\tkey: 'getParamType',\n\t\tvalue: function getParamType(paramName) {\n\t\t\tvar paramIndex = this.paramNames.indexOf(paramName);\n\t\t\tif (paramIndex === -1) {\n\t\t\t\tif (this.declarations.hasOwnProperty(paramName)) {\n\t\t\t\t\treturn this.declarations[paramName];\n\t\t\t\t} else {\n\t\t\t\t\treturn 'Number';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this.parent) {\n\t\t\t\t\tif (this.paramTypes[paramIndex]) return this.paramTypes[paramIndex];\n\t\t\t\t} else {\n\t\t\t\t\tif (this.paramTypes[paramIndex]) return this.paramTypes[paramIndex];\n\t\t\t\t\tvar calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];\n\t\t\t\t\tfor (var i = 0; i < calledFunctionArguments.length; i++) {\n\t\t\t\t\t\tvar calledFunctionArgument = calledFunctionArguments[i];\n\t\t\t\t\t\tif (calledFunctionArgument[paramIndex] !== null) {\n\t\t\t\t\t\t\treturn this.paramTypes[paramIndex] = calledFunctionArgument[paramIndex].type;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 'Number';\n\t\t}\n\t}, {\n\t\tkey: 'getConstantType',\n\t\tvalue: function getConstantType(constantName) {\n\t\t\tif (this.constantTypes[constantName]) {\n\t\t\t\treturn this.constantTypes[constantName];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name getUserParamName\n   *\n   * @desc Return the name of the *user parameter*(subKernel parameter) corresponding \n   * to the parameter supplied to the kernel\n   *\n   * @param {String} paramName - Name of the parameter\n   *\n   * @returns {String} Name of the parameter\n   *\n   */\n\n\t}, {\n\t\tkey: 'getUserParamName',\n\t\tvalue: function getUserParamName(paramName) {\n\t\t\tvar paramIndex = this.paramNames.indexOf(paramName);\n\t\t\tif (paramIndex === -1) return null;\n\t\t\tif (!this.parent || !this.isSubKernel) return null;\n\t\t\tvar calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];\n\t\t\tfor (var i = 0; i < calledFunctionArguments.length; i++) {\n\t\t\t\tvar calledFunctionArgument = calledFunctionArguments[i];\n\t\t\t\tvar param = calledFunctionArgument[paramIndex];\n\t\t\t\tif (param !== null && param.type !== 'Integer') {\n\t\t\t\t\treturn param.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}, {\n\t\tkey: 'generate',\n\t\tvalue: function generate(options) {\n\t\t\tthrow new Error('generate not defined on BaseFunctionNode');\n\t\t}\n\n\t\t/**\n   * @memberOf FunctionNodeBase#\n   * @function\n   * @name astGeneric\n   *\n   * @desc Parses the abstract syntax tree for generically to its respective function\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the parsed string array\n   */\n\n\t}, {\n\t\tkey: 'astGeneric',\n\t\tvalue: function astGeneric(ast, retArr) {\n\t\t\tif (ast === null) {\n\t\t\t\tthrow this.astErrorOutput('NULL ast', ast);\n\t\t\t} else {\n\t\t\t\tif (Array.isArray(ast)) {\n\t\t\t\t\tfor (var i = 0; i < ast.length; i++) {\n\t\t\t\t\t\tthis.astGeneric(ast[i], retArr);\n\t\t\t\t\t}\n\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\n\t\t\t\tswitch (ast.type) {\n\t\t\t\t\tcase 'FunctionDeclaration':\n\t\t\t\t\t\treturn this.astFunctionDeclaration(ast, retArr);\n\t\t\t\t\tcase 'FunctionExpression':\n\t\t\t\t\t\treturn this.astFunctionExpression(ast, retArr);\n\t\t\t\t\tcase 'ReturnStatement':\n\t\t\t\t\t\treturn this.astReturnStatement(ast, retArr);\n\t\t\t\t\tcase 'Literal':\n\t\t\t\t\t\treturn this.astLiteral(ast, retArr);\n\t\t\t\t\tcase 'BinaryExpression':\n\t\t\t\t\t\treturn this.astBinaryExpression(ast, retArr);\n\t\t\t\t\tcase 'Identifier':\n\t\t\t\t\t\treturn this.astIdentifierExpression(ast, retArr);\n\t\t\t\t\tcase 'AssignmentExpression':\n\t\t\t\t\t\treturn this.astAssignmentExpression(ast, retArr);\n\t\t\t\t\tcase 'ExpressionStatement':\n\t\t\t\t\t\treturn this.astExpressionStatement(ast, retArr);\n\t\t\t\t\tcase 'EmptyStatement':\n\t\t\t\t\t\treturn this.astEmptyStatement(ast, retArr);\n\t\t\t\t\tcase 'BlockStatement':\n\t\t\t\t\t\treturn this.astBlockStatement(ast, retArr);\n\t\t\t\t\tcase 'IfStatement':\n\t\t\t\t\t\treturn this.astIfStatement(ast, retArr);\n\t\t\t\t\tcase 'BreakStatement':\n\t\t\t\t\t\treturn this.astBreakStatement(ast, retArr);\n\t\t\t\t\tcase 'ContinueStatement':\n\t\t\t\t\t\treturn this.astContinueStatement(ast, retArr);\n\t\t\t\t\tcase 'ForStatement':\n\t\t\t\t\t\treturn this.astForStatement(ast, retArr);\n\t\t\t\t\tcase 'WhileStatement':\n\t\t\t\t\t\treturn this.astWhileStatement(ast, retArr);\n\t\t\t\t\tcase 'DoWhileStatement':\n\t\t\t\t\t\treturn this.astDoWhileStatement(ast, retArr);\n\t\t\t\t\tcase 'VariableDeclaration':\n\t\t\t\t\t\treturn this.astVariableDeclaration(ast, retArr);\n\t\t\t\t\tcase 'VariableDeclarator':\n\t\t\t\t\t\treturn this.astVariableDeclarator(ast, retArr);\n\t\t\t\t\tcase 'ThisExpression':\n\t\t\t\t\t\treturn this.astThisExpression(ast, retArr);\n\t\t\t\t\tcase 'SequenceExpression':\n\t\t\t\t\t\treturn this.astSequenceExpression(ast, retArr);\n\t\t\t\t\tcase 'UnaryExpression':\n\t\t\t\t\t\treturn this.astUnaryExpression(ast, retArr);\n\t\t\t\t\tcase 'UpdateExpression':\n\t\t\t\t\t\treturn this.astUpdateExpression(ast, retArr);\n\t\t\t\t\tcase 'LogicalExpression':\n\t\t\t\t\t\treturn this.astLogicalExpression(ast, retArr);\n\t\t\t\t\tcase 'MemberExpression':\n\t\t\t\t\t\treturn this.astMemberExpression(ast, retArr);\n\t\t\t\t\tcase 'CallExpression':\n\t\t\t\t\t\treturn this.astCallExpression(ast, retArr);\n\t\t\t\t\tcase 'ArrayExpression':\n\t\t\t\t\t\treturn this.astArrayExpression(ast, retArr);\n\t\t\t\t\tcase 'DebuggerStatement':\n\t\t\t\t\t\treturn this.astDebuggerStatement(ast, retArr);\n\t\t\t\t}\n\n\t\t\t\tthrow this.astErrorOutput('Unknown ast type : ' + ast.type, ast);\n\t\t\t}\n\t\t}\n\t\t/**\n   * @function\n   * @name astErrorOutput\n   * @ignore\n   * @desc To throw the AST error, with its location.\n   *\n   * @todo add location support fpr the AST error\n   *\n   * @param {Object} error - the error message output\n   * @param {Object} ast - the AST object where the error is\n   */\n\n\t}, {\n\t\tkey: 'astErrorOutput',\n\t\tvalue: function astErrorOutput(error, ast) {\n\t\t\tconsole.error(utils.getAstString(this.jsFunctionString, ast));\n\t\t\tconsole.error(error, ast, this);\n\t\t\treturn error;\n\t\t}\n\t}, {\n\t\tkey: 'astDebuggerStatement',\n\t\tvalue: function astDebuggerStatement(arrNode, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astFunctionDeclaration',\n\t\tvalue: function astFunctionDeclaration(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astFunctionExpression',\n\t\tvalue: function astFunctionExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astReturnStatement',\n\t\tvalue: function astReturnStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astLiteral',\n\t\tvalue: function astLiteral(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astBinaryExpression',\n\t\tvalue: function astBinaryExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astIdentifierExpression',\n\t\tvalue: function astIdentifierExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astAssignmentExpression',\n\t\tvalue: function astAssignmentExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astExpressionStatement',\n\t\tvalue: function astExpressionStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astEmptyStatement',\n\t\tvalue: function astEmptyStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astBlockStatement',\n\t\tvalue: function astBlockStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astIfStatement',\n\t\tvalue: function astIfStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astBreakStatement',\n\t\tvalue: function astBreakStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astContinueStatement',\n\t\tvalue: function astContinueStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astForStatement',\n\t\tvalue: function astForStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astWhileStatement',\n\t\tvalue: function astWhileStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astDoWhileStatement',\n\t\tvalue: function astDoWhileStatement(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astVariableDeclaration',\n\t\tvalue: function astVariableDeclaration(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astVariableDeclarator',\n\t\tvalue: function astVariableDeclarator(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astThisExpression',\n\t\tvalue: function astThisExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astSequenceExpression',\n\t\tvalue: function astSequenceExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astUnaryExpression',\n\t\tvalue: function astUnaryExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astUpdateExpression',\n\t\tvalue: function astUpdateExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astLogicalExpression',\n\t\tvalue: function astLogicalExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astMemberExpression',\n\t\tvalue: function astMemberExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astCallExpression',\n\t\tvalue: function astCallExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astArrayExpression',\n\t\tvalue: function astArrayExpression(ast, retArr) {\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @ignore\n   * @function\n   * @name pushParameter\n   *\n   * @desc [INTERNAL] pushes a fn parameter onto retArr and 'casts' to int if necessary\n   *  i.e. deal with force-int-parameter state\n   * \t\t\t\n   * @param {Array} retArr - return array string\n   * @param {String} parameter - the parameter name  \n   *\n   */\n\n\t}, {\n\t\tkey: 'pushParameter',\n\t\tvalue: function pushParameter(retArr, parameter) {\n\t\t\tif (this.isState('in-get-call-parameters')) {\n\t\t\t\tretArr.push('int(' + parameter + ')');\n\t\t\t} else {\n\t\t\t\tretArr.push(parameter);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'state',\n\t\tget: function get() {\n\t\t\treturn this.states[this.states.length - 1];\n\t\t}\n\t}]);\n\n\treturn BaseFunctionNode;\n}();\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/function-node-base.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/kernel-base.js":
/*!*********************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/kernel-base.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = __webpack_require__(/*! ../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar Input = __webpack_require__(/*! ../core/input */ \"./node_modules/gpu.js/dist/core/input.js\");\n\nmodule.exports = function () {\n\n\t/**\n  * @constructor KernelBase\n  * \n  * @desc Implements the base class for Kernels, and is used as a \n  * parent class for all Kernel implementations.\n  *\n  * This contains the basic methods needed by all Kernel implementations, \n  * like setDimensions, addSubKernel, etc.\n  * \n  * @prop {Array} paramNames - Name of the parameters of the kernel function\n  * @prop {String} fnString - Kernel function as a String\n  * @prop {Array} dimensions - Dimensions of the kernel function, this.thread.x, etc.\n  * @prop {Boolean} debug - Toggle debug mode\n  * @prop {String} graphical - Toggle graphical mode\n  * @prop {number} loopMaxIterations - Maximum number of loop iterations\n  * @prop {Object} constants - Global constants\n  * @prop {Array} subKernels - Sub kernels bound to this kernel instance\n  * @prop {Object} subKernelProperties - Sub kernels bound to this kernel instance as key/value pairs\n  * @prop {Array} subKernelOutputVariableNames - Names of the variables outputted by the subkerls\n  * @prop {Boolean} fixIntegerDivisionAccuracy - fix issues with some graphics cards not returning whole numbers when dividing by factors of 3\n  *\n  */\n\tfunction KernelBase(fnString, settings) {\n\t\t_classCallCheck(this, KernelBase);\n\n\t\tthis.paramNames = utils.getParamNamesFromString(fnString);\n\t\tthis.fnString = fnString;\n\t\tthis.output = null;\n\t\tthis.debug = false;\n\t\tthis.graphical = false;\n\t\tthis.loopMaxIterations = 0;\n\t\tthis.constants = null;\n\t\tthis.wraparound = null;\n\t\tthis.hardcodeConstants = null;\n\t\tthis.outputToTexture = null;\n\t\tthis.outputImmutable = null;\n\t\tthis.texSize = null;\n\t\tthis._canvas = null;\n\t\tthis._webGl = null;\n\t\tthis.threadDim = null;\n\t\tthis.floatTextures = null;\n\t\tthis.floatOutput = null;\n\t\tthis.floatOutputForce = null;\n\t\tthis.addFunction = null;\n\t\tthis.functions = null;\n\t\tthis.nativeFunctions = null;\n\t\tthis.subKernels = null;\n\t\tthis.subKernelProperties = null;\n\t\tthis.subKernelNames = null;\n\t\tthis.subKernelOutputVariableNames = null;\n\t\tthis.functionBuilder = null;\n\t\tthis.paramTypes = null;\n\t\tthis.paramSizes = null;\n\t\tthis.constantTypes = null;\n\t\tthis.fixIntegerDivisionAccuracy = null;\n\n\t\tfor (var p in settings) {\n\t\t\tif (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;\n\t\t\tthis[p] = settings[p];\n\t\t}\n\t\tif (settings.hasOwnProperty('canvas')) {\n\t\t\tthis._canvas = settings.canvas;\n\t\t}\n\t\tif (settings.hasOwnProperty('webGl')) {\n\t\t\tthis._webGl = settings.webGl;\n\t\t}\n\t\tif (settings.hasOwnProperty('output')) {\n\t\t\tthis.setOutput(settings.output); // Flatten output object\n\t\t}\n\n\t\tif (!this._canvas) this._canvas = utils.initCanvas();\n\t}\n\n\t_createClass(KernelBase, [{\n\t\tkey: 'build',\n\t\tvalue: function build() {\n\t\t\tthrow new Error('\"build\" not defined on Base');\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setupParams\n   *\n   * @desc Setup the parameter types for the parameters\n   * supplied to the Kernel function\n   *\n   * @param {IArguments} args - The actual parameters sent to the Kernel\n   *\n   */\n\n\t}, {\n\t\tkey: 'setupParams',\n\t\tvalue: function setupParams(args) {\n\t\t\tthis.paramTypes = [];\n\t\t\tthis.paramSizes = [];\n\t\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\t\tvar arg = args[i];\n\n\t\t\t\tthis.paramTypes.push(utils.getArgumentType(arg));\n\t\t\t\tthis.paramSizes.push(arg.constructor === Input ? arg.size : null);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'setupConstants',\n\t\tvalue: function setupConstants() {\n\t\t\tthis.constantTypes = {};\n\t\t\tif (this.constants) {\n\t\t\t\tfor (var p in this.constants) {\n\t\t\t\t\tthis.constantTypes[p] = utils.getArgumentType(this.constants[p]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'setFunctions',\n\t\tvalue: function setFunctions(functions) {\n\t\t\tthis.functions = functions;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setOutput\n   *\n   * @desc Set dimensions of the kernel function\n   *\n   * @param {Array|Object} output - The output array to set the kernel output size to\n   *\n   */\n\n\t}, {\n\t\tkey: 'setOutput',\n\t\tvalue: function setOutput(output) {\n\t\t\tif (output.hasOwnProperty('x')) {\n\t\t\t\tif (output.hasOwnProperty('y')) {\n\t\t\t\t\tif (output.hasOwnProperty('z')) {\n\t\t\t\t\t\tthis.output = [output.x, output.y, output.z];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.output = [output.x, output.y];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.output = [output.x];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.output = output;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setDebug\n   *\n   * @desc Toggle debug mode\n   *\n   * @param {Boolean} flag - true to enable debug\n   *\n   */\n\n\t}, {\n\t\tkey: 'setDebug',\n\t\tvalue: function setDebug(flag) {\n\t\t\tthis.debug = flag;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setGraphical\n   *\n   * @desc Toggle graphical output mode\n   *\n   * @param {Boolean} flag - true to enable graphical output\n   *\n   */\n\n\t}, {\n\t\tkey: 'setGraphical',\n\t\tvalue: function setGraphical(flag) {\n\t\t\tthis.graphical = flag;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setLoopMaxIterations\n   *\n   * @desc Set the maximum number of loop iterations\n   *\n   * @param {number} max - iterations count\n   *\n   */\n\n\t}, {\n\t\tkey: 'setLoopMaxIterations',\n\t\tvalue: function setLoopMaxIterations(max) {\n\t\t\tthis.loopMaxIterations = max;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setFixIntegerDivisionAccuracy\n   *\n   * @desc Fix division by factor of 3 FP accuracy bug\n   *\n   * @param {Boolean} fix - should fix \n   *\n   */\n\n\t}, {\n\t\tkey: 'setFixIntegerDivisionAccuracy',\n\t\tvalue: function setFixIntegerDivisionAccuracy(fix) {\n\t\t\tthis.fixIntegerDivisionAccuracy = fix;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setConstants\n   * @desc Set Constants\n   */\n\n\t}, {\n\t\tkey: 'setConstants',\n\t\tvalue: function setConstants(constants) {\n\t\t\tthis.constants = constants;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setWraparound',\n\t\tvalue: function setWraparound(flag) {\n\t\t\tconsole.warn('Wraparound mode is not supported and undocumented.');\n\t\t\tthis.wraparound = flag;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setHardcodeConstants',\n\t\tvalue: function setHardcodeConstants(flag) {\n\t\t\tthis.hardcodeConstants = flag;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setOutputToTexture',\n\t\tvalue: function setOutputToTexture(flag) {\n\t\t\tthis.outputToTexture = flag;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setOutputImmutable',\n\t\tvalue: function setOutputImmutable(flag) {\n\t\t\tthis.outputImmutable = flag;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setFloatTextures\n   *\n   * @desc Toggle texture output mode\n   *\n   * @param {Boolean} flag - true to enable floatTextures\n   *\n   */\n\n\t}, {\n\t\tkey: 'setFloatTextures',\n\t\tvalue: function setFloatTextures(flag) {\n\t\t\tthis.floatTextures = flag;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setFloatOutput\n   *\n   * @desc Toggle output mode\n   *\n   * @param {Boolean} flag - true to enable float\n   *\n   */\n\n\t}, {\n\t\tkey: 'setFloatOutput',\n\t\tvalue: function setFloatOutput(flag) {\n\t\t\tthis.floatOutput = flag;\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setFloatOutputForce',\n\t\tvalue: function setFloatOutputForce(flag) {\n\t\t\tthis.floatOutputForce = flag;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setCanvas\n   *\n   * @desc Bind the canvas to kernel\n   * \n   * @param {Canvas} canvas - Canvas to bind\n   *\n   */\n\n\t}, {\n\t\tkey: 'setCanvas',\n\t\tvalue: function setCanvas(canvas) {\n\t\t\tthis._canvas = canvas;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name setCanvas\n   *\n   * @desc Bind the webGL instance to kernel\n   * \n   * @param {Canvas} webGL - webGL instance to bind\n   *\n   */\n\n\t}, {\n\t\tkey: 'setWebGl',\n\t\tvalue: function setWebGl(webGl) {\n\t\t\tthis._webGl = webGl;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name getCanvas()\n   *\n   * @desc Returns the current canvas instance bound to the kernel\n   *\n   */\n\n\t}, {\n\t\tkey: 'getCanvas',\n\t\tvalue: function getCanvas() {\n\t\t\treturn this._canvas;\n\t\t}\n\n\t\t/**\n   * @memberOf KernelBase#\n   * @function\n   * @name getWebGl()\n   *\n   * @desc Returns the current webGl instance bound to the kernel\n   *\n   */\n\n\t}, {\n\t\tkey: 'getWebGl',\n\t\tvalue: function getWebGl() {\n\t\t\treturn this._webGl;\n\t\t}\n\t}, {\n\t\tkey: 'validateOptions',\n\t\tvalue: function validateOptions() {\n\t\t\tthrow new Error('validateOptions not defined');\n\t\t}\n\t}, {\n\t\tkey: 'exec',\n\t\tvalue: function exec() {\n\t\t\treturn this.execute.apply(this, arguments);\n\t\t}\n\t}, {\n\t\tkey: 'execute',\n\t\tvalue: function execute() {\n\t\t\tvar _this = this;\n\n\t\t\t//\n\t\t\t// Prepare the required objects\n\t\t\t//\n\t\t\tvar args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n\n\t\t\t//\n\t\t\t// Setup and return the promise, and execute the function, in synchronous mode\n\t\t\t//\n\t\t\treturn utils.newPromise(function (accept, reject) {\n\t\t\t\ttry {\n\t\t\t\t\taccept(_this.run.apply(_this, args));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t//\n\t\t\t\t\t// Error : throw rejection\n\t\t\t\t\t//\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/** \n   * @memberOf KernelBase#\n   * @function\n   * @name addSubKernel\n   *\n   * @desc Add a sub kernel to the root kernel instance.\n   * This is what `createKernelMap` uses.\n   *\n   * @param {String} fnString - function (as a String) of the subKernel to add\n   *\n   */\n\n\t}, {\n\t\tkey: 'addSubKernel',\n\t\tvalue: function addSubKernel(fnString) {\n\t\t\tif (this.subKernels === null) {\n\t\t\t\tthis.subKernels = [];\n\t\t\t\tthis.subKernelNames = [];\n\t\t\t}\n\t\t\tthis.subKernels.push(fnString);\n\t\t\tthis.subKernelNames.push(utils.getFunctionNameFromString(fnString));\n\t\t\treturn this;\n\t\t}\n\n\t\t/** \n   * @memberOf KernelBase#\n   * @function\n   * @name addSubKernelProperty\n   *\n   * @desc Add a sub kernel to the root kernel instance, indexed by a property name\n   * This is what `createKernelMap` uses.\n   *\n   * @param {String} property - property key for the subKernel\n   * @param {String} fnString - function (as a String) of the subKernel to add\n   *\n   */\n\n\t}, {\n\t\tkey: 'addSubKernelProperty',\n\t\tvalue: function addSubKernelProperty(property, fnString) {\n\t\t\tif (this.subKernelProperties === null) {\n\t\t\t\tthis.subKernelProperties = {};\n\t\t\t\tthis.subKernelNames = [];\n\t\t\t}\n\t\t\tif (this.subKernelProperties.hasOwnProperty(property)) {\n\t\t\t\tthrow new Error('cannot add sub kernel ' + property + ', already defined');\n\t\t\t}\n\t\t\tthis.subKernelProperties[property] = fnString;\n\t\t\tthis.subKernelNames.push(utils.getFunctionNameFromString(fnString));\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'addNativeFunction',\n\t\tvalue: function addNativeFunction(name, source) {\n\t\t\tthis.functionBuilder.addNativeFunction(name, source);\n\t\t}\n\n\t\t/**\n   *\n   * Destroys all memory associated with this kernel\n   *\n   * @name destroy\n   * @function\n   * @memberOf KernelBase#\n   *\n   * * @param {Boolean} removeCanvasReferences remve any associated canvas references?\n   *\n   */\n\n\t}, {\n\t\tkey: 'destroy',\n\t\tvalue: function destroy() {}\n\t}]);\n\n\treturn KernelBase;\n}();\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/kernel-base.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/kernel-run-shortcut.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/kernel-run-shortcut.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\n\nmodule.exports = function kernelRunShortcut(kernel) {\n\tvar shortcut = function shortcut() {\n\t\treturn kernel.run.apply(kernel, arguments);\n\t};\n\n\tutils.allPropertiesOf(kernel).forEach(function (key) {\n\t\tif (key[0] === '_' && key[1] === '_') return;\n\t\tif (typeof kernel[key] === 'function') {\n\t\t\tif (key.substring(0, 3) === 'add' || key.substring(0, 3) === 'set') {\n\t\t\t\tshortcut[key] = function () {\n\t\t\t\t\tkernel[key].apply(kernel, arguments);\n\t\t\t\t\treturn shortcut;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tshortcut[key] = kernel[key].bind(kernel);\n\t\t\t}\n\t\t} else {\n\t\t\tshortcut.__defineGetter__(key, function () {\n\t\t\t\treturn kernel[key];\n\t\t\t});\n\t\t\tshortcut.__defineSetter__(key, function (value) {\n\t\t\t\tkernel[key] = value;\n\t\t\t});\n\t\t}\n\t});\n\n\tshortcut.kernel = kernel;\n\n\treturn shortcut;\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/kernel-run-shortcut.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/runner-base.js":
/*!*********************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/runner-base.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = __webpack_require__(/*! ../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar kernelRunShortcut = __webpack_require__(/*! ./kernel-run-shortcut */ \"./node_modules/gpu.js/dist/backend/kernel-run-shortcut.js\");\n\nmodule.exports = function () {\n\n\t/**\n  * @constructor BaseRunner\n  *\n  * @desc Represents the 'private/protected' namespace of the GPU class\n  *\n  * <p>I know @private makes more sense, but since the documentation engine state is undetirmined.\n  * (See https://github.com/gpujs/gpu.js/issues/19 regarding documentation engine issue)\n  * File isolation is currently the best way to go. </p>\n  *\n  * *base.js* internal functions namespace <br>\n  * *gpu.js* PUBLIC function namespace <br>\n  *\n  * @prop {Object} settings - Settings object used to set Dimensions, etc.\n  * @prop {String} kernel - Current kernel instance\n  * @prop {Object} canvas - Canvas instance attached to the kernel\n  * @prop {Object} webGl - WebGl instance attached to the kernel\n  * @prop {Function} fn - Kernel function to run\n  * @prop {Object} functionBuilder - FunctionBuilder instance\n  * @prop {String} fnString - Kernel function (as a String)\n  * @prop {String} endianness - endian information like Little-endian, Big-endian.\n  *\n  */\n\n\tfunction BaseRunner(functionBuilder, settings) {\n\t\t_classCallCheck(this, BaseRunner);\n\n\t\tsettings = settings || {};\n\t\tthis.kernel = settings.kernel;\n\t\tthis.canvas = settings.canvas;\n\t\tthis.webGl = settings.webGl;\n\t\tthis.fn = null;\n\t\tthis.functionBuilder = functionBuilder;\n\t\tthis.fnString = null;\n\t\tthis.endianness = utils.systemEndianness();\n\t}\n\n\t/**\n  * @memberOf BaseRunner#\n  * @function\n  * @name textureToArray\n  *\n  * @desc Converts the provided Texture instance to a JavaScript Array\n  *\n  * @param {Object} texture - Texture Object\n  *\n  */\n\n\n\t_createClass(BaseRunner, [{\n\t\tkey: 'textureToArray',\n\t\tvalue: function textureToArray(texture) {\n\t\t\tvar copy = this.createKernel(function (x) {\n\t\t\t\treturn x[this.thread.z][this.thread.y][this.thread.x];\n\t\t\t});\n\n\t\t\treturn copy(texture);\n\t\t}\n\n\t\t/**\n   * @memberOf BaseRunner#\n   * @function\n   *\n   * @name deleteTexture\n   *\n   * @desc Deletes the provided Texture instance\n   *\n   * @param {Object} texture - Texture Object\n   */\n\n\t}, {\n\t\tkey: 'deleteTexture',\n\t\tvalue: function deleteTexture(texture) {\n\t\t\tthis.webGl.deleteTexture(texture.texture);\n\t\t}\n\n\t\t/**\n   * @memberOf BaseRunner#\n   * @function\n   * @name buildPromiseKernel\n   *\n   * @desc Get and returns the ASYNCHRONOUS executor, of a class and kernel\n   * This returns a Promise object from an argument set.\n   *\n   * Note that there is no current implementation.\n   *\n   */\n\n\t}, {\n\t\tkey: 'buildPromiseKernel',\n\t\tvalue: function buildPromiseKernel() {\n\t\t\tthrow new Error('not yet implemented');\n\t\t}\n\t}, {\n\t\tkey: 'getMode',\n\t\tvalue: function getMode() {\n\t\t\tthrow new Error('\"mode\" not implemented on BaseRunner');\n\t\t}\n\n\t\t/**\n   * @memberOf BaseRunner#\n   * @function\n   *\n   * @name buildKernel\n   *\n   * @desc Get and returns the Synchronous executor, of a class and kernel\n   * Which returns the result directly after passing the arguments.\n   *\n   */\n\n\t}, {\n\t\tkey: 'buildKernel',\n\t\tvalue: function buildKernel(fn, settings) {\n\t\t\tsettings = Object.assign({}, settings || {});\n\t\t\tvar fnString = fn.toString();\n\t\t\tif (!settings.functionBuilder) {\n\t\t\t\tsettings.functionBuilder = this.functionBuilder;\n\t\t\t}\n\n\t\t\tif (!settings.canvas) {\n\t\t\t\tsettings.canvas = this.canvas;\n\t\t\t}\n\n\t\t\tif (!settings.webGl) {\n\t\t\t\tsettings.webGl = this.webgl;\n\t\t\t}\n\n\t\t\treturn kernelRunShortcut(new this.Kernel(fnString, settings));\n\t\t}\n\t}]);\n\n\treturn BaseRunner;\n}();\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/runner-base.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/function-builder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/function-builder.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar FunctionBuilderBase = __webpack_require__(/*! ../function-builder-base */ \"./node_modules/gpu.js/dist/backend/function-builder-base.js\");\nvar WebGLFunctionNode = __webpack_require__(/*! ./function-node */ \"./node_modules/gpu.js/dist/backend/web-gl/function-node.js\");\n\n/**\n * @class WebGLFunctionBuilder\n *\n * @extends FunctionBuilderBase\n *\n * @desc Builds webGl functions (shaders) from JavaScript function Strings\n *\n */\nmodule.exports = function (_FunctionBuilderBase) {\n\t_inherits(WebGLFunctionBuilder, _FunctionBuilderBase);\n\n\tfunction WebGLFunctionBuilder() {\n\t\t_classCallCheck(this, WebGLFunctionBuilder);\n\n\t\tvar _this = _possibleConstructorReturn(this, (WebGLFunctionBuilder.__proto__ || Object.getPrototypeOf(WebGLFunctionBuilder)).call(this));\n\n\t\t_this.Node = WebGLFunctionNode;\n\t\treturn _this;\n\t}\n\n\t//---------------------------------------------------------\n\t//\n\t//  Polyfill stuff\n\t//\n\t//---------------------------------------------------------\n\n\t// Round function used in polyfill\n\n\n\t_createClass(WebGLFunctionBuilder, [{\n\t\tkey: 'polyfillStandardFunctions',\n\n\n\t\t/**\n   * @memberOf FunctionBuilderBase#\n   * @function\n   * @name polyfillStandardFunctions\n   *\n   * @desc Polyfill in the missing Math functions (round)\n   *\n   */\n\t\tvalue: function polyfillStandardFunctions() {\n\t\t\tthis.addFunction('round', _round);\n\t\t}\n\t}], [{\n\t\tkey: 'round',\n\t\tvalue: function round(a) {\n\t\t\treturn _round(a);\n\t\t}\n\t}]);\n\n\treturn WebGLFunctionBuilder;\n}(FunctionBuilderBase);\n\nfunction _round(a) {\n\treturn Math.floor(a + 0.5);\n}\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/function-builder.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/function-node.js":
/*!******************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/function-node.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar FunctionNodeBase = __webpack_require__(/*! ../function-node-base */ \"./node_modules/gpu.js/dist/backend/function-node-base.js\");\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\n// Closure capture for the ast function, prevent collision with existing AST functions\n// The prefixes to use\nvar jsMathPrefix = 'Math.';\nvar localPrefix = 'this.';\nvar constantsPrefix = 'this.constants.';\n\nvar DECODE32_ENCODE32 = /decode32\\(\\s+encode32\\(/g;\nvar ENCODE32_DECODE32 = /encode32\\(\\s+decode32\\(/g;\n\n// these debugs were hugely usefull...\n// TODO: optimise out - webpack/babel options? maybe some generic logging support in core/utils?\n// const debugLog = console.log\nvar debugLog = function debugLog() {};\n/**\n * @class WebGLFunctionNode\n *\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to generate its respective webGL code.\n *\n * @extends FunctionNodeBase\n *\n * @param {functionNode} inNode - The function node object\n *\n * @returns the converted webGL function string\n *\n */\nmodule.exports = function (_FunctionNodeBase) {\n\t_inherits(WebGLFunctionNode, _FunctionNodeBase);\n\n\tfunction WebGLFunctionNode() {\n\t\t_classCallCheck(this, WebGLFunctionNode);\n\n\t\treturn _possibleConstructorReturn(this, (WebGLFunctionNode.__proto__ || Object.getPrototypeOf(WebGLFunctionNode)).apply(this, arguments));\n\t}\n\n\t_createClass(WebGLFunctionNode, [{\n\t\tkey: 'generate',\n\t\tvalue: function generate() {\n\t\t\tif (this.debug) {\n\t\t\t\tdebugLog(this);\n\t\t\t}\n\t\t\tif (this.prototypeOnly) {\n\t\t\t\treturn this.astFunctionPrototype(this.getJsAST(), []).join('').trim();\n\t\t\t} else {\n\t\t\t\tthis.functionStringArray = this.astGeneric(this.getJsAST(), []);\n\t\t\t}\n\t\t\tthis.functionString = webGlRegexOptimize(this.functionStringArray.join('').trim());\n\t\t\treturn this.functionString;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astFunctionDeclaration\n   *\n   * @desc Parses the abstract syntax tree for to its *named function declaration*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astFunctionDeclaration',\n\t\tvalue: function astFunctionDeclaration(ast, retArr) {\n\t\t\tthis.builder.addFunction(null, utils.getAstString(this.jsFunctionString, ast));\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astFunctionPrototype\n   * @static\n   *\n   * @desc Parses the abstract syntax tree for to its *named function prototype*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astFunctionPrototype',\n\t\tvalue: function astFunctionPrototype(ast, retArr) {\n\t\t\t// Setup function return type and name\n\t\t\tif (this.isRootKernel || this.isSubKernel) {\n\t\t\t\treturn retArr;\n\t\t\t}\n\n\t\t\tvar returnType = this.returnType;\n\t\t\tvar type = typeMap[returnType];\n\t\t\tif (!type) {\n\t\t\t\tthrow new Error('unknown type ' + returnType);\n\t\t\t}\n\t\t\tretArr.push(type);\n\t\t\tretArr.push(' ');\n\t\t\tretArr.push(this.functionName);\n\t\t\tretArr.push('(');\n\n\t\t\t// Arguments handling\n\t\t\tfor (var i = 0; i < this.paramNames.length; ++i) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\n\t\t\t\tretArr.push(this.paramTypes[i]);\n\t\t\t\tretArr.push(' ');\n\t\t\t\tretArr.push('user_');\n\t\t\t\tretArr.push(this.paramNames[i]);\n\t\t\t}\n\n\t\t\tretArr.push(');\\n');\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astFunctionExpression\n   *\n   * @desc Parses the abstract syntax tree for to its *named function*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astFunctionExpression',\n\t\tvalue: function astFunctionExpression(ast, retArr) {\n\n\t\t\t// Setup function return type and name\n\t\t\tif (this.isRootKernel) {\n\t\t\t\tretArr.push('void');\n\t\t\t} else {\n\t\t\t\tvar returnType = this.returnType;\n\t\t\t\tvar type = typeMap[returnType];\n\t\t\t\tif (!type) {\n\t\t\t\t\tthrow new Error('unknown type ' + returnType);\n\t\t\t\t}\n\t\t\t\tretArr.push(type);\n\t\t\t}\n\t\t\tretArr.push(' ');\n\t\t\tretArr.push(this.functionName);\n\t\t\tretArr.push('(');\n\n\t\t\tif (!this.isRootKernel) {\n\t\t\t\t// Arguments handling\n\t\t\t\tfor (var i = 0; i < this.paramNames.length; ++i) {\n\t\t\t\t\tvar paramName = this.paramNames[i];\n\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tretArr.push(', ');\n\t\t\t\t\t}\n\t\t\t\t\tvar paramType = this.getParamType(paramName);\n\t\t\t\t\tvar _type = typeMap[paramType];\n\t\t\t\t\tif (!_type) {\n\t\t\t\t\t\tthrow new Error('unknown type ' + paramType);\n\t\t\t\t\t}\n\t\t\t\t\tretArr.push(_type);\n\t\t\t\t\tretArr.push(' ');\n\t\t\t\t\tretArr.push('user_');\n\t\t\t\t\tretArr.push(paramName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Function opening\n\t\t\tretArr.push(') {\\n');\n\n\t\t\t// Body statement iteration\n\t\t\tfor (var _i = 0; _i < ast.body.body.length; ++_i) {\n\t\t\t\tthis.astGeneric(ast.body.body[_i], retArr);\n\t\t\t\tretArr.push('\\n');\n\t\t\t}\n\n\t\t\t// Function closing\n\t\t\tretArr.push('}\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astReturnStatement\n   *\n   * @desc Parses the abstract syntax tree for to *return* statement\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astReturnStatement',\n\t\tvalue: function astReturnStatement(ast, retArr) {\n\t\t\tif (this.isRootKernel) {\n\t\t\t\tretArr.push('kernelResult = ');\n\t\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\t\tretArr.push(';');\n\t\t\t\tretArr.push('return;');\n\t\t\t} else if (this.isSubKernel) {\n\t\t\t\tretArr.push(this.functionName + 'Result = ');\n\t\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\t\tretArr.push(';');\n\t\t\t\tretArr.push('return ' + this.functionName + 'Result;');\n\t\t\t} else {\n\t\t\t\tretArr.push('return ');\n\t\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\t\tretArr.push(';');\n\t\t\t}\n\n\t\t\t//throw this.astErrorOutput(\n\t\t\t//\t'Non main function return, is not supported : '+this.currentFunctionNamespace,\n\t\t\t//\tast\n\t\t\t//);\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astLiteral\n   *\n   * @desc Parses the abstract syntax tree for *literal value*\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astLiteral',\n\t\tvalue: function astLiteral(ast, retArr) {\n\n\t\t\t// Reject non numeric literals\n\t\t\tif (isNaN(ast.value)) {\n\t\t\t\tthrow this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);\n\t\t\t}\n\n\t\t\t// Push the literal value as a float/int\n\t\t\tretArr.push(ast.value);\n\n\t\t\tvar inGetParams = this.isState('in-get-call-parameters');\n\t\t\t// If it was an int, node made a float if necessary\n\t\t\tif (Number.isInteger(ast.value)) {\n\t\t\t\tif (!inGetParams) {\n\t\t\t\t\tretArr.push('.0');\n\t\t\t\t}\n\t\t\t} else if (inGetParams) {\n\t\t\t\t// or cast to an int as we are addressing an input array\n\t\t\t\tretArr.pop();\n\t\t\t\tretArr.push('int(');\n\t\t\t\tretArr.push(ast.value);\n\t\t\t\tretArr.push(')');\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astBinaryExpression\n   *\n   * @desc Parses the abstract syntax tree for *binary* expression\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astBinaryExpression',\n\t\tvalue: function astBinaryExpression(ast, retArr) {\n\t\t\tvar inGetParams = this.isState('in-get-call-parameters');\n\t\t\tif (inGetParams) {\n\t\t\t\tthis.pushState('not-in-get-call-parameters');\n\t\t\t\tretArr.push('int');\n\t\t\t}\n\t\t\tretArr.push('(');\n\n\t\t\tif (ast.operator === '%') {\n\t\t\t\tretArr.push('mod(');\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\tretArr.push(',');\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t} else if (ast.operator === '===') {\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\tretArr.push('==');\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t} else if (ast.operator === '!==') {\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\tretArr.push('!=');\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t} else if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {\n\t\t\t\tretArr.push('div_with_int_check(');\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\tretArr.push(', ');\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\tretArr.push(ast.operator);\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t}\n\n\t\t\tretArr.push(')');\n\n\t\t\tif (inGetParams) {\n\t\t\t\tthis.popState('not-in-get-call-parameters');\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astIdentifierExpression\n   *\n   * @desc Parses the abstract syntax tree for *identifier* expression\n   *\n   * @param {Object} idtNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astIdentifierExpression',\n\t\tvalue: function astIdentifierExpression(idtNode, retArr) {\n\t\t\tif (idtNode.type !== 'Identifier') {\n\t\t\t\tthrow this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n\t\t\t}\n\t\t\t// do we need to cast addressing vales to float?\n\t\t\tvar castFloat = !this.isState('in-get-call-parameters');\n\n\t\t\tswitch (idtNode.name) {\n\t\t\t\tcase 'gpu_threadX':\n\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\tretArr.push('threadId.x');\n\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_threadY':\n\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\tretArr.push('threadId.y');\n\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_threadZ':\n\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\tretArr.push('threadId.z');\n\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputX':\n\t\t\t\t\tretArr.push('uOutputDim.x');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputY':\n\t\t\t\t\tretArr.push('uOutputDim.y');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputZ':\n\t\t\t\t\tretArr.push('uOutputDim.z');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Infinity':\n\t\t\t\t\t// https://stackoverflow.com/a/47543127/1324039\n\t\t\t\t\tretArr.push('3.402823466e+38');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar userParamName = this.getUserParamName(idtNode.name);\n\t\t\t\t\tif (userParamName !== null) {\n\t\t\t\t\t\tthis.pushParameter(retArr, 'user_' + userParamName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.pushParameter(retArr, 'user_' + idtNode.name);\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astForStatement\n   *\n   * @desc Parses the abstract syntax tree forfor *for-loop* expression\n   *\n   * @param {Object} forNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the parsed webgl string\n   */\n\n\t}, {\n\t\tkey: 'astForStatement',\n\t\tvalue: function astForStatement(forNode, retArr) {\n\t\t\tif (forNode.type !== 'ForStatement') {\n\t\t\t\tthrow this.astErrorOutput('Invalid for statment', forNode);\n\t\t\t}\n\n\t\t\tif (forNode.test && forNode.test.type === 'BinaryExpression') {\n\t\t\t\tif (forNode.test.right.type === 'Identifier' && forNode.test.operator === '<' && this.isIdentifierConstant(forNode.test.right.name) === false) {\n\n\t\t\t\t\tif (!this.loopMaxIterations) {\n\t\t\t\t\t\tconsole.warn('Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.');\n\t\t\t\t\t\tconsole.warn('Set loopMaxIterations or use a for loop of fixed length to silence this message.');\n\t\t\t\t\t}\n\n\t\t\t\t\tretArr.push('for (');\n\t\t\t\t\tthis.astGeneric(forNode.init, retArr);\n\t\t\t\t\tthis.astGeneric(forNode.test.left, retArr);\n\t\t\t\t\tretArr.push(forNode.test.operator);\n\t\t\t\t\tretArr.push('LOOP_MAX');\n\t\t\t\t\tretArr.push(';');\n\t\t\t\t\tthis.astGeneric(forNode.update, retArr);\n\t\t\t\t\tretArr.push(')');\n\n\t\t\t\t\tretArr.push('{\\n');\n\t\t\t\t\tretArr.push('if (');\n\t\t\t\t\tthis.astGeneric(forNode.test.left, retArr);\n\t\t\t\t\tretArr.push(forNode.test.operator);\n\t\t\t\t\tthis.astGeneric(forNode.test.right, retArr);\n\t\t\t\t\tretArr.push(') {\\n');\n\t\t\t\t\tif (forNode.body.type === 'BlockStatement') {\n\t\t\t\t\t\tfor (var i = 0; i < forNode.body.body.length; i++) {\n\t\t\t\t\t\t\tthis.astGeneric(forNode.body.body[i], retArr);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.astGeneric(forNode.body, retArr);\n\t\t\t\t\t}\n\t\t\t\t\tretArr.push('\\n} else {\\n');\n\t\t\t\t\tretArr.push('break;\\n');\n\t\t\t\t\tretArr.push('}\\n');\n\t\t\t\t\tretArr.push('}\\n');\n\n\t\t\t\t\treturn retArr;\n\t\t\t\t} else {\n\t\t\t\t\tvar declarations = JSON.parse(JSON.stringify(forNode.init.declarations));\n\t\t\t\t\tvar updateArgument = forNode.update.argument;\n\t\t\t\t\tif (!Array.isArray(declarations) || declarations.length < 1) {\n\t\t\t\t\t\tdebugLog(this.jsFunctionString);\n\t\t\t\t\t\tthrow new Error('Error: Incompatible for loop declaration');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (declarations.length > 1) {\n\t\t\t\t\t\tvar initArgument = null;\n\t\t\t\t\t\tfor (var _i2 = 0; _i2 < declarations.length; _i2++) {\n\t\t\t\t\t\t\tvar declaration = declarations[_i2];\n\t\t\t\t\t\t\tif (declaration.id.name === updateArgument.name) {\n\t\t\t\t\t\t\t\tinitArgument = declaration;\n\t\t\t\t\t\t\t\tdeclarations.splice(_i2, 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tretArr.push('float ');\n\t\t\t\t\t\t\t\tthis.astGeneric(declaration, retArr);\n\t\t\t\t\t\t\t\tretArr.push(';');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tretArr.push('for (float ');\n\t\t\t\t\t\tthis.astGeneric(initArgument, retArr);\n\t\t\t\t\t\tretArr.push(';');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretArr.push('for (');\n\t\t\t\t\t\tthis.astGeneric(forNode.init, retArr);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.astGeneric(forNode.test, retArr);\n\t\t\t\t\tretArr.push(';');\n\t\t\t\t\tthis.astGeneric(forNode.update, retArr);\n\t\t\t\t\tretArr.push(')');\n\t\t\t\t\tthis.astGeneric(forNode.body, retArr);\n\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow this.astErrorOutput('Invalid for statement', forNode);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astWhileStatement\n   *\n   * @desc Parses the abstract syntax tree for *while* loop\n   *\n   *\n   * @param {Object} whileNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the parsed webgl string\n   */\n\n\t}, {\n\t\tkey: 'astWhileStatement',\n\t\tvalue: function astWhileStatement(whileNode, retArr) {\n\t\t\tif (whileNode.type !== 'WhileStatement') {\n\t\t\t\tthrow this.astErrorOutput('Invalid while statment', whileNode);\n\t\t\t}\n\n\t\t\tretArr.push('for (float i = 0.0; i < LOOP_MAX; i++) {');\n\t\t\tretArr.push('if (');\n\t\t\tthis.astGeneric(whileNode.test, retArr);\n\t\t\tretArr.push(') {\\n');\n\t\t\tthis.astGeneric(whileNode.body, retArr);\n\t\t\tretArr.push('} else {\\n');\n\t\t\tretArr.push('break;\\n');\n\t\t\tretArr.push('}\\n');\n\t\t\tretArr.push('}\\n');\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astWhileStatement\n   *\n   * @desc Parses the abstract syntax tree for *do while* loop\n   *\n   *\n   * @param {Object} doWhileNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the parsed webgl string\n   */\n\n\t}, {\n\t\tkey: 'astDoWhileStatement',\n\t\tvalue: function astDoWhileStatement(doWhileNode, retArr) {\n\t\t\tif (doWhileNode.type !== 'DoWhileStatement') {\n\t\t\t\tthrow this.astErrorOutput('Invalid while statment', doWhileNode);\n\t\t\t}\n\n\t\t\tretArr.push('for (float i = 0.0; i < LOOP_MAX; i++) {');\n\t\t\tthis.astGeneric(doWhileNode.body, retArr);\n\t\t\tretArr.push('if (!');\n\t\t\tthis.astGeneric(doWhileNode.test, retArr);\n\t\t\tretArr.push(') {\\n');\n\t\t\tretArr.push('break;\\n');\n\t\t\tretArr.push('}\\n');\n\t\t\tretArr.push('}\\n');\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astAssignmentExpression\n   *\n   * @desc Parses the abstract syntax tree for *Assignment* Expression\n   *\n   * @param {Object} assNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astAssignmentExpression',\n\t\tvalue: function astAssignmentExpression(assNode, retArr) {\n\t\t\tif (assNode.operator === '%=') {\n\t\t\t\tthis.astGeneric(assNode.left, retArr);\n\t\t\t\tretArr.push('=');\n\t\t\t\tretArr.push('mod(');\n\t\t\t\tthis.astGeneric(assNode.left, retArr);\n\t\t\t\tretArr.push(',');\n\t\t\t\tthis.astGeneric(assNode.right, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(assNode.left, retArr);\n\t\t\t\tretArr.push(assNode.operator);\n\t\t\t\tthis.astGeneric(assNode.right, retArr);\n\t\t\t\treturn retArr;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astEmptyStatement\n   *\n   * @desc Parses the abstract syntax tree for an *Empty* Statement\n   *\n   * @param {Object} eNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astEmptyStatement',\n\t\tvalue: function astEmptyStatement(eNode, retArr) {\n\t\t\t//retArr.push(';\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astBlockStatement\n   *\n   * @desc Parses the abstract syntax tree for *Block* statement\n   *\n   * @param {Object} bNode - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astBlockStatement',\n\t\tvalue: function astBlockStatement(bNode, retArr) {\n\t\t\tretArr.push('{\\n');\n\t\t\tfor (var i = 0; i < bNode.body.length; i++) {\n\t\t\t\tthis.astGeneric(bNode.body[i], retArr);\n\t\t\t}\n\t\t\tretArr.push('}\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astExpressionStatement\n   *\n   * @desc Parses the abstract syntax tree for *generic expression* statement\n   *\n   * @param {Object} esNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astExpressionStatement',\n\t\tvalue: function astExpressionStatement(esNode, retArr) {\n\t\t\tthis.astGeneric(esNode.expression, retArr);\n\t\t\tretArr.push(';');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astVariableDeclaration\n   *\n   * @desc Parses the abstract syntax tree for *Variable Declaration*\n   *\n   * @param {Object} vardecNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astVariableDeclaration',\n\t\tvalue: function astVariableDeclaration(vardecNode, retArr) {\n\t\t\tfor (var i = 0; i < vardecNode.declarations.length; i++) {\n\t\t\t\tvar declaration = vardecNode.declarations[i];\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(',');\n\t\t\t\t}\n\t\t\t\tvar retDeclaration = [];\n\t\t\t\tthis.astGeneric(declaration, retDeclaration);\n\t\t\t\tvar declarationType = 'Number';\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tvar init = declaration.init;\n\t\t\t\t\tif (init) {\n\t\t\t\t\t\tif (init.object) {\n\t\t\t\t\t\t\tif (init.object.type === 'MemberExpression' && init.object.object) {\n\t\t\t\t\t\t\t\t// this.thread.x, this.thread.y, this.thread.z\n\t\t\t\t\t\t\t\tif (init.object.object.type === 'ThisExpression' && init.object.property && (init.object.property.name === 'thread' || init.object.property.name === 'output')) {\n\t\t\t\t\t\t\t\t\tdeclarationType = 'Integer';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// param[]\n\t\t\t\t\t\t\t\telse if (init.object.object.type === 'Identifier') {\n\t\t\t\t\t\t\t\t\t\tvar _type2 = this.getParamType(init.object.object.name);\n\t\t\t\t\t\t\t\t\t\tdeclarationType = typeLookupMap[_type2];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// param[][]\n\t\t\t\t\t\t\t\t\telse if (init.object.object.object && init.object.object.object.type === 'Identifier') {\n\t\t\t\t\t\t\t\t\t\t\tvar _type3 = this.getParamType(init.object.object.object.name);\n\t\t\t\t\t\t\t\t\t\t\tdeclarationType = typeLookupMap[_type3];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// this.constants.param[]\n\t\t\t\t\t\t\t\t\t\telse if (init.object.object.object && init.object.object.object.object && init.object.object.object.object.type === 'ThisExpression' && init.object.object.object.property.name === 'constants') {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _type4 = this.getConstantType(init.object.object.property.name);\n\t\t\t\t\t\t\t\t\t\t\t\tdeclarationType = typeLookupMap[_type4];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// this.constants.param[][]\n\t\t\t\t\t\t\t\t\t\t\telse if (init.object.object.object && init.object.object.object.object && init.object.object.object.object.object && init.object.object.object.object.object.type === 'ThisExpression' && init.object.object.object.object.property.name === 'constants') {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar _type5 = this.getConstantType(init.object.object.object.property.name);\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeclarationType = typeLookupMap[_type5];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!declarationType) {\n\t\t\t\t\t\t\t\tthrow new Error('unknown lookup type ' + typeLookupMap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (init.name && this.declarations[init.name]) {\n\t\t\t\t\t\t\t\tdeclarationType = this.declarations[init.name];\n\t\t\t\t\t\t\t} else if (init.type === 'ArrayExpression') {\n\t\t\t\t\t\t\t\tdeclarationType = 'Array(' + init.elements.length + ')';\n\t\t\t\t\t\t\t} else if (init.type === 'CallExpression') {\n\t\t\t\t\t\t\t\tvar node = this.builder.nodeMap[init.callee.name];\n\t\t\t\t\t\t\t\tif (node && node.returnType) {\n\t\t\t\t\t\t\t\t\tdeclarationType = node.returnType;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar type = typeMap[declarationType];\n\t\t\t\t\tif (!type) {\n\t\t\t\t\t\tthrow new Error('type ' + declarationType + ' not handled');\n\t\t\t\t\t}\n\t\t\t\t\tretArr.push(type + ' ');\n\t\t\t\t}\n\t\t\t\tthis.declarations[declaration.id.name] = declarationType;\n\t\t\t\tretArr.push.apply(retArr, retDeclaration);\n\t\t\t}\n\t\t\tretArr.push(';');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astVariableDeclarator\n   *\n   * @desc Parses the abstract syntax tree for *Variable Declarator*\n   *\n   * @param {Object} ivardecNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astVariableDeclarator',\n\t\tvalue: function astVariableDeclarator(ivardecNode, retArr) {\n\t\t\tthis.astGeneric(ivardecNode.id, retArr);\n\t\t\tif (ivardecNode.init !== null) {\n\t\t\t\tretArr.push('=');\n\t\t\t\tthis.astGeneric(ivardecNode.init, retArr);\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astIfStatement\n   *\n   * @desc Parses the abstract syntax tree for *If* Statement\n   *\n   * @param {Object} ifNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astIfStatement',\n\t\tvalue: function astIfStatement(ifNode, retArr) {\n\t\t\tretArr.push('if (');\n\t\t\tthis.astGeneric(ifNode.test, retArr);\n\t\t\tretArr.push(')');\n\t\t\tif (ifNode.consequent.type === 'BlockStatement') {\n\t\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t\t} else {\n\t\t\t\tretArr.push(' {\\n');\n\t\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t\t\tretArr.push('\\n}\\n');\n\t\t\t}\n\n\t\t\tif (ifNode.alternate) {\n\t\t\t\tretArr.push('else ');\n\t\t\t\tif (ifNode.alternate.type === 'BlockStatement') {\n\t\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t\t} else {\n\t\t\t\t\tretArr.push(' {\\n');\n\t\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t\t\tretArr.push('\\n}\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astBreakStatement\n   *\n   * @desc Parses the abstract syntax tree for *Break* Statement\n   *\n   * @param {Object} brNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astBreakStatement',\n\t\tvalue: function astBreakStatement(brNode, retArr) {\n\t\t\tretArr.push('break;\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astContinueStatement\n   *\n   * @desc Parses the abstract syntax tree for *Continue* Statement\n   *\n   * @param {Object} crNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astContinueStatement',\n\t\tvalue: function astContinueStatement(crNode, retArr) {\n\t\t\tretArr.push('continue;\\n');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astLogicalExpression\n   *\n   * @desc Parses the abstract syntax tree for *Logical* Expression\n   *\n   * @param {Object} logNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astLogicalExpression',\n\t\tvalue: function astLogicalExpression(logNode, retArr) {\n\t\t\tretArr.push('(');\n\t\t\tthis.astGeneric(logNode.left, retArr);\n\t\t\tretArr.push(logNode.operator);\n\t\t\tthis.astGeneric(logNode.right, retArr);\n\t\t\tretArr.push(')');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astUpdateExpression\n   *\n   * @desc Parses the abstract syntax tree for *Update* Expression\n   *\n   * @param {Object} uNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astUpdateExpression',\n\t\tvalue: function astUpdateExpression(uNode, retArr) {\n\t\t\tif (uNode.prefix) {\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astUnaryExpression\n   *\n   * @desc Parses the abstract syntax tree for *Unary* Expression\n   *\n   * @param {Object} uNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astUnaryExpression',\n\t\tvalue: function astUnaryExpression(uNode, retArr) {\n\t\t\tif (uNode.prefix) {\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\t\tretArr.push(uNode.operator);\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astThisExpression\n   *\n   * @desc Parses the abstract syntax tree for *This* expression\n   *\n   * @param {Object} tNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astThisExpression',\n\t\tvalue: function astThisExpression(tNode, retArr) {\n\t\t\tretArr.push('this');\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astMemberExpression\n   *\n   * @desc Parses the abstract syntax tree for *Member* Expression\n   *\n   * @param {Object} mNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astMemberExpression',\n\t\tvalue: function astMemberExpression(mNode, retArr) {\n\t\t\tdebugLog(\"[in] astMemberExpression \" + mNode.object.type);\n\t\t\tif (mNode.computed) {\n\t\t\t\tif (mNode.object.type === 'Identifier' || mNode.object.type === 'MemberExpression' &&\n\t\t\t\t// mNode.object.object &&\n\t\t\t\tmNode.object.object.object && mNode.object.object.object.type === 'ThisExpression' && mNode.object.object.property.name === 'constants') {\n\t\t\t\t\t// Working logger\n\t\t\t\t\tvar reqName = mNode.object.name;\n\t\t\t\t\tvar funcName = this.functionName || 'kernel';\n\t\t\t\t\tvar assumeNotTexture = false;\n\n\t\t\t\t\t// Possibly an array request - handle it as such\n\t\t\t\t\tif (this.paramNames) {\n\t\t\t\t\t\tvar idx = this.paramNames.indexOf(reqName);\n\t\t\t\t\t\tif (idx >= 0 && this.paramTypes[idx] === 'Number') {\n\t\t\t\t\t\t\tassumeNotTexture = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdebugLog(\"- astMemberExpression \" + reqName + \" \" + funcName);\n\t\t\t\t\tif (assumeNotTexture) {\n\t\t\t\t\t\t// Get from array\n\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\tretArr.push('[int(');\n\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\tretArr.push(')]');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar isInGetParams = this.isState('in-get-call-parameters');\n\t\t\t\t\t\tvar multiMemberExpression = this.isState('multi-member-expression');\n\t\t\t\t\t\tif (multiMemberExpression) {\n\t\t\t\t\t\t\tthis.popState('multi-member-expression');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.pushState('not-in-get-call-parameters');\n\n\t\t\t\t\t\t// This normally refers to the global read only input vars\n\t\t\t\t\t\tvar variableType = null;\n\t\t\t\t\t\tif (mNode.object.name) {\n\t\t\t\t\t\t\tif (this.declarations[mNode.object.name]) {\n\t\t\t\t\t\t\t\tvariableType = this.declarations[mNode.object.name];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvariableType = this.getParamType(mNode.object.name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (mNode.object && mNode.object.object && mNode.object.object.object && mNode.object.object.object.type === 'ThisExpression') {\n\t\t\t\t\t\t\tvariableType = this.getConstantType(mNode.object.property.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tswitch (variableType) {\n\t\t\t\t\t\t\tcase 'Array(2)':\n\t\t\t\t\t\t\tcase 'Array(3)':\n\t\t\t\t\t\t\tcase 'Array(4)':\n\t\t\t\t\t\t\t\t// Get from local vec4\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('[');\n\t\t\t\t\t\t\t\tretArr.push(mNode.property.raw);\n\t\t\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t\t\t\tif (multiMemberExpression) {\n\t\t\t\t\t\t\t\t\tthis.popState('not-in-get-call-parameters');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t\t\t\t// Get from image\n\t\t\t\t\t\t\t\tretArr.push('getImage3D(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push(', ivec2(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Size[0],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Size[1]), ivec3(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[0],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[1],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[2]');\n\t\t\t\t\t\t\t\tretArr.push('), ');\n\t\t\t\t\t\t\t\tthis.popState('not-in-get-call-parameters');\n\t\t\t\t\t\t\t\tthis.pushState('in-get-call-parameters');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\t\t\tif (!multiMemberExpression) {\n\t\t\t\t\t\t\t\t\tthis.popState('in-get-call-parameters');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\t\t\t// Get from image\n\t\t\t\t\t\t\t\tretArr.push('getImage2D(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push(', ivec2(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Size[0],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Size[1]), ivec3(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[0],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[1],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[2]');\n\t\t\t\t\t\t\t\tretArr.push('), ');\n\t\t\t\t\t\t\t\tthis.popState('not-in-get-call-parameters');\n\t\t\t\t\t\t\t\tthis.pushState('in-get-call-parameters');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\t\t\tif (!multiMemberExpression) {\n\t\t\t\t\t\t\t\t\tthis.popState('in-get-call-parameters');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// Get from texture\n\t\t\t\t\t\t\t\tif (isInGetParams) {\n\t\t\t\t\t\t\t\t\tretArr.push('int(');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tretArr.push('get(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push(', ivec2(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Size[0],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Size[1]), ivec3(');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[0],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[1],');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('Dim[2]');\n\t\t\t\t\t\t\t\tretArr.push('), ');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\t\t\t\tretArr.push('BitRatio');\n\t\t\t\t\t\t\t\tretArr.push(', ');\n\t\t\t\t\t\t\t\tthis.popState('not-in-get-call-parameters');\n\t\t\t\t\t\t\t\tthis.pushState('in-get-call-parameters');\n\t\t\t\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\t\t\t\tif (!multiMemberExpression) {\n\t\t\t\t\t\t\t\t\tthis.popState('in-get-call-parameters');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\t\t\tif (isInGetParams) {\n\t\t\t\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tdebugLog(\"- astMemberExpression obj:\", mNode.object);\n\t\t\t\t\tvar stateStackDepth = this.states.length;\n\t\t\t\t\tvar startedInGetParamsState = this.isState('in-get-call-parameters');\n\t\t\t\t\tif (!startedInGetParamsState) {\n\t\t\t\t\t\tthis.pushState('multi-member-expression');\n\t\t\t\t\t}\n\t\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\t\tif (this.isState('multi-member-expression')) {\n\t\t\t\t\t\tthis.popState('multi-member-expression');\n\t\t\t\t\t}\n\t\t\t\t\tvar changedGetParamsState = !startedInGetParamsState && this.isState('in-get-call-parameters');\n\t\t\t\t\tvar last = retArr.pop();\n\t\t\t\t\tretArr.push(',');\n\t\t\t\t\tdebugLog(\"- astMemberExpression prop:\", mNode.property);\n\t\t\t\t\tvar shouldPopParamState = this.isState('should-pop-in-get-call-parameters');\n\t\t\t\t\tif (shouldPopParamState) {\n\t\t\t\t\t\t// go back to in-get-call-parameters state\n\t\t\t\t\t\tthis.popState('should-pop-in-get-call-parameters');\n\t\t\t\t\t}\n\t\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\t\tretArr.push(last);\n\n\t\t\t\t\tif (changedGetParamsState) {\n\t\t\t\t\t\t// calling memberExpression should pop...\n\t\t\t\t\t\tthis.pushState('should-pop-in-get-call-parameters');\n\t\t\t\t\t} else if (shouldPopParamState) {\n\t\t\t\t\t\t// do the popping!\n\t\t\t\t\t\tthis.popState('in-get-call-parameters');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Unroll the member expression\n\t\t\t\tvar unrolled = this.astMemberExpressionUnroll(mNode);\n\t\t\t\tvar unrolled_lc = unrolled.toLowerCase();\n\t\t\t\tdebugLog(\"- astMemberExpression unrolled:\", unrolled);\n\t\t\t\t// Its a constant, remove this.constants.\n\t\t\t\tif (unrolled.indexOf(constantsPrefix) === 0) {\n\t\t\t\t\tunrolled = 'constants_' + unrolled.slice(constantsPrefix.length);\n\t\t\t\t}\n\n\t\t\t\t// do we need to cast addressing vales to float?\n\t\t\t\tvar castFloat = !this.isState('in-get-call-parameters');\n\n\t\t\t\tswitch (unrolled_lc) {\n\t\t\t\t\tcase 'this.thread.x':\n\t\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\t\tretArr.push('threadId.x');\n\t\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'this.thread.y':\n\t\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\t\tretArr.push('threadId.y');\n\t\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'this.thread.z':\n\t\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\t\tretArr.push('threadId.z');\n\t\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'this.output.x':\n\t\t\t\t\t\tretArr.push(this.output[0] + '.0');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'this.output.y':\n\t\t\t\t\t\tretArr.push(this.output[1] + '.0');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'this.output.z':\n\t\t\t\t\t\tretArr.push(this.output[2] + '.0');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (mNode.object && mNode.object.name && this.declarations[mNode.object.name]) {\n\t\t\t\t\t\t\tretArr.push('user_');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tretArr.push(unrolled);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdebugLog(\"[out] astMemberExpression \" + mNode.object.type);\n\t\t\treturn retArr;\n\t\t}\n\t}, {\n\t\tkey: 'astSequenceExpression',\n\t\tvalue: function astSequenceExpression(sNode, retArr) {\n\t\t\tfor (var i = 0; i < sNode.expressions.length; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(',');\n\t\t\t\t}\n\t\t\t\tthis.astGeneric(sNode.expressions, retArr);\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astCallExpression\n   *\n   * @desc Parses the abstract syntax tree for *call* expression\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns  {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astCallExpression',\n\t\tvalue: function astCallExpression(ast, retArr) {\n\t\t\tif (ast.callee) {\n\t\t\t\t// Get the full function call, unrolled\n\t\t\t\tvar funcName = this.astMemberExpressionUnroll(ast.callee);\n\n\t\t\t\t// Its a math operator, remove the prefix\n\t\t\t\tif (funcName.indexOf(jsMathPrefix) === 0) {\n\t\t\t\t\tfuncName = funcName.slice(jsMathPrefix.length);\n\t\t\t\t}\n\n\t\t\t\t// Its a local function, remove this\n\t\t\t\tif (funcName.indexOf(localPrefix) === 0) {\n\t\t\t\t\tfuncName = funcName.slice(localPrefix.length);\n\t\t\t\t}\n\n\t\t\t\t// if this if grows to more than one, lets use a switch\n\t\t\t\tif (funcName === 'atan2') {\n\t\t\t\t\tfuncName = 'atan';\n\t\t\t\t}\n\n\t\t\t\t// Register the function into the called registry\n\t\t\t\tif (this.calledFunctions.indexOf(funcName) < 0) {\n\t\t\t\t\tthis.calledFunctions.push(funcName);\n\t\t\t\t}\n\t\t\t\tif (!this.hasOwnProperty('funcName')) {\n\t\t\t\t\tthis.calledFunctionsArguments[funcName] = [];\n\t\t\t\t}\n\n\t\t\t\tvar functionArguments = [];\n\t\t\t\tthis.calledFunctionsArguments[funcName].push(functionArguments);\n\n\t\t\t\t// Call the function\n\t\t\t\tretArr.push(funcName);\n\n\t\t\t\t// Open arguments space\n\t\t\t\tretArr.push('(');\n\n\t\t\t\t// Add the vars\n\t\t\t\tfor (var i = 0; i < ast.arguments.length; ++i) {\n\t\t\t\t\tvar argument = ast.arguments[i];\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tretArr.push(', ');\n\t\t\t\t\t}\n\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\tif (argument.type === 'Identifier') {\n\t\t\t\t\t\tvar paramIndex = this.paramNames.indexOf(argument.name);\n\t\t\t\t\t\tif (paramIndex === -1) {\n\t\t\t\t\t\t\tfunctionArguments.push(null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfunctionArguments.push({\n\t\t\t\t\t\t\t\tname: argument.name,\n\t\t\t\t\t\t\t\ttype: this.paramTypes[paramIndex] || 'Number'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunctionArguments.push(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Close arguments space\n\t\t\t\tretArr.push(')');\n\n\t\t\t\treturn retArr;\n\t\t\t}\n\n\t\t\t// Failure, unknown expression\n\t\t\tthrow this.astErrorOutput('Unknown CallExpression', ast);\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name astArrayExpression\n   *\n   * @desc Parses the abstract syntax tree for *Array* Expression\n   *\n   * @param {Object} ast - the AST object to parse\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astArrayExpression',\n\t\tvalue: function astArrayExpression(arrNode, retArr) {\n\t\t\tvar arrLen = arrNode.elements.length;\n\n\t\t\tretArr.push('vec' + arrLen + '(');\n\t\t\tfor (var i = 0; i < arrLen; ++i) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\t\t\t\tvar subNode = arrNode.elements[i];\n\t\t\t\tthis.astGeneric(subNode, retArr);\n\t\t\t}\n\t\t\tretArr.push(')');\n\n\t\t\treturn retArr;\n\n\t\t\t// // Failure, unknown expression\n\t\t\t// throw this.astErrorOutput(\n\t\t\t// \t'Unknown  ArrayExpression',\n\t\t\t// \tarrNode\n\t\t\t//);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLFunctionNode#\n   * @function\n   * @name getFunctionPrototypeString\n   *\n   * @desc Returns the converted webgl shader function equivalent of the JS function\n   *\n   * @returns {String} webgl function string, result is cached under this.getFunctionPrototypeString\n   *\n   */\n\n\t}, {\n\t\tkey: 'getFunctionPrototypeString',\n\t\tvalue: function getFunctionPrototypeString() {\n\t\t\tif (this.webGlFunctionPrototypeString) {\n\t\t\t\treturn this.webGlFunctionPrototypeString;\n\t\t\t}\n\t\t\treturn this.webGlFunctionPrototypeString = this.generate();\n\t\t}\n\t}, {\n\t\tkey: 'build',\n\t\tvalue: function build() {\n\t\t\treturn this.getFunctionPrototypeString().length > 0;\n\t\t}\n\t}]);\n\n\treturn WebGLFunctionNode;\n}(FunctionNodeBase);\n\nvar typeMap = {\n\t'Array': 'sampler2D',\n\t'Array(2)': 'vec2',\n\t'Array(3)': 'vec3',\n\t'Array(4)': 'vec4',\n\t'Array2D': 'sampler2D',\n\t'Array3D': 'sampler2D',\n\t'Float': 'float',\n\t'Input': 'sampler2D',\n\t'Integer': 'float',\n\t'Number': 'float',\n\t'NumberTexture': 'sampler2D',\n\t'ArrayTexture(4)': 'sampler2D'\n};\n\nvar typeLookupMap = {\n\t'Array': 'Number',\n\t'Array2D': 'Number',\n\t'Array3D': 'Number',\n\t'HTMLImage': 'Array(4)',\n\t'HTMLImageArray': 'Array(4)',\n\t'NumberTexture': 'Number',\n\t'ArrayTexture(4)': 'Array(4)'\n};\n\n/**\n * @ignore\n * @function\n * @name webgl_regex_optimize\n *\n * @desc [INTERNAL] Takes the near final webgl function string, and do regex search and replacments.\n * For voodoo optimize out the following:\n *\n * - decode32(encode32( <br>\n * - encode32(decode32( <br>\n *\n * @param {String} inStr - The webGl function String\n *\n */\nfunction webGlRegexOptimize(inStr) {\n\treturn inStr.replace(DECODE32_ENCODE32, '((').replace(ENCODE32_DECODE32, '((');\n}\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/function-node.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/kernel-string.js":
/*!******************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/kernel-string.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar kernelRunShortcut = __webpack_require__(/*! ../kernel-run-shortcut */ \"./node_modules/gpu.js/dist/backend/kernel-run-shortcut.js\");\nvar Input = __webpack_require__(/*! ../../core/input */ \"./node_modules/gpu.js/dist/core/input.js\");\nvar Texture = __webpack_require__(/*! ../../core/texture */ \"./node_modules/gpu.js/dist/core/texture.js\");\n\nfunction removeFnNoise(fn) {\n  if (/^function /.test(fn)) {\n    fn = fn.substring(9);\n  }\n  return fn.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction removeNoise(str) {\n  return str.replace(/[_]typeof/g, 'typeof');\n}\n\nmodule.exports = function (gpuKernel, name) {\n  return '() => {\\n    ' + kernelRunShortcut.toString() + ';\\n    const utils = {\\n      allPropertiesOf: ' + removeNoise(utils.allPropertiesOf.toString()) + ',\\n      clone: ' + removeNoise(utils.clone.toString()) + ',\\n      splitArray: ' + removeNoise(utils.splitArray.toString()) + ',\\n      getArgumentType: ' + removeNoise(utils.getArgumentType.toString()) + ',\\n      getDimensions: ' + removeNoise(utils.getDimensions.toString()) + ',\\n      dimToTexSize: ' + removeNoise(utils.dimToTexSize.toString()) + ',\\n      flattenTo: ' + removeNoise(utils.flattenTo.toString()) + ',\\n      flatten2dArrayTo: ' + removeNoise(utils.flatten2dArrayTo.toString()) + ',\\n      flatten3dArrayTo: ' + removeNoise(utils.flatten3dArrayTo.toString()) + ',\\n      systemEndianness: \\'' + removeNoise(utils.systemEndianness()) + '\\',\\n      initWebGl: ' + removeNoise(utils.initWebGl.toString()) + ',\\n      isArray: ' + removeNoise(utils.isArray.toString()) + ',\\n      checkOutput: ' + removeNoise(utils.checkOutput.toString()) + '\\n    };\\n    const Utils = utils;\\n    const canvases = [];\\n    const maxTexSizes = {};\\n    let Texture = function() {};\\n    let Input = function() {}; \\n    class ' + (name || 'Kernel') + ' {\\n      constructor() {\\n        this.maxTexSize = null;\\n        this.argumentsLength = 0;\\n        this.constantsLength = 0;\\n        this._canvas = null;\\n        this._webGl = null;\\n        this.program = null;\\n        this.outputToTexture = ' + (gpuKernel.outputToTexture ? 'true' : 'false') + ';\\n        this.paramNames = ' + JSON.stringify(gpuKernel.paramNames) + ';\\n        this.paramTypes = ' + JSON.stringify(gpuKernel.paramTypes) + ';\\n        this.texSize = ' + JSON.stringify(gpuKernel.texSize) + ';\\n        this.output = ' + JSON.stringify(gpuKernel.output) + ';\\n        this.compiledFragShaderString = `' + gpuKernel.compiledFragShaderString + '`;\\n\\t\\t    this.compiledVertShaderString = `' + gpuKernel.compiledVertShaderString + '`;\\n\\t\\t    this.programUniformLocationCache = {};\\n\\t\\t    this.textureCache = {};\\n\\t\\t    this.subKernelOutputTextures = null;\\n\\t\\t    this.subKernelOutputVariableNames = null;\\n\\t\\t    this.uniform1fCache = {};\\n\\t\\t    this.uniform1iCache = {};\\n\\t\\t    this.uniform2fCache = {};\\n\\t\\t    this.uniform2fvCache = {};\\n\\t\\t    this.uniform2ivCache = {};\\n\\t\\t    this.uniform3fvCache = {};\\n\\t\\t    this.uniform3ivCache = {};\\n      }\\n      _getFragShaderString() { return this.compiledFragShaderString; }\\n      _getVertShaderString() { return this.compiledVertShaderString; }\\n      validateOptions() {}\\n      setupParams() {}\\n      setupConstants() {}\\n      setCanvas(canvas) { this._canvas = canvas; return this; }\\n      setWebGl(webGl) { this._webGl = webGl; return this; }\\n      setTexture(Type) { Texture = Type; }\\n      setInput(Type) { Input = Type; }\\n      ' + removeFnNoise(gpuKernel.getUniformLocation.toString()) + '\\n      ' + removeFnNoise(gpuKernel.build.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.run.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel._addArgument.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel._formatArrayTransfer.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getArgumentTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getTextureCache.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getOutputTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.renderOutput.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.updateMaxTexSize.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel._setupOutputTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.detachTextureCache.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform1f.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform1i.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform2f.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform2fv.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform2iv.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform3fv.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform3iv.toString()) + '\\n    };\\n    return kernelRunShortcut(new Kernel());\\n  };';\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/kernel-string.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/kernel.js":
/*!***********************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/kernel.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar KernelBase = __webpack_require__(/*! ../kernel-base */ \"./node_modules/gpu.js/dist/backend/kernel-base.js\");\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar Texture = __webpack_require__(/*! ../../core/texture */ \"./node_modules/gpu.js/dist/core/texture.js\");\nvar fragShaderString = __webpack_require__(/*! ./shader-frag */ \"./node_modules/gpu.js/dist/backend/web-gl/shader-frag.js\");\nvar vertShaderString = __webpack_require__(/*! ./shader-vert */ \"./node_modules/gpu.js/dist/backend/web-gl/shader-vert.js\");\nvar kernelString = __webpack_require__(/*! ./kernel-string */ \"./node_modules/gpu.js/dist/backend/web-gl/kernel-string.js\");\nvar canvases = [];\nvar maxTexSizes = {};\n\nmodule.exports = function (_KernelBase) {\n\t_inherits(WebGLKernel, _KernelBase);\n\n\t_createClass(WebGLKernel, null, [{\n\t\tkey: 'fragShaderString',\n\t\tget: function get() {\n\t\t\treturn fragShaderString;\n\t\t}\n\t}, {\n\t\tkey: 'vertShaderString',\n\t\tget: function get() {\n\t\t\treturn vertShaderString;\n\t\t}\n\t\t/**\n   * @constructor WebGLKernel\n   *\n   * @desc Kernel Implementation for WebGL.\n   * <p>This builds the shaders and runs them on the GPU,\n   * the outputs the result back as float(enabled by default) and Texture.</p>\n   *\n   * @extends KernelBase\n   *\n   * @prop {Object} textureCache - webGl Texture cache\n   * @prop {Object} threadDim - The thread dimensions, x, y and z\n   * @prop {Object} programUniformLocationCache - Location of program variables in memory\n   * @prop {Object} framebuffer - Webgl frameBuffer\n   * @prop {Object} buffer - WebGL buffer\n   * @prop {Object} program - The webGl Program\n   * @prop {Object} functionBuilder - Function Builder instance bound to this Kernel\n   * @prop {Boolean} outputToTexture - Set output type to Texture, instead of float\n   * @prop {String} endianness - Endian information like Little-endian, Big-endian.\n   * @prop {Array} paramTypes - Types of parameters sent to the Kernel\n   * @prop {number} argumentsLength - Number of parameters sent to the Kernel\n   * @prop {String} compiledFragShaderString - Compiled fragment shader string\n   * @prop {String} compiledVertShaderString - Compiled Vertical shader string\n   */\n\n\t}]);\n\n\tfunction WebGLKernel(fnString, settings) {\n\t\t_classCallCheck(this, WebGLKernel);\n\n\t\tvar _this = _possibleConstructorReturn(this, (WebGLKernel.__proto__ || Object.getPrototypeOf(WebGLKernel)).call(this, fnString, settings));\n\n\t\t_this.textureCache = {};\n\t\t_this.threadDim = {};\n\t\t_this.programUniformLocationCache = {};\n\t\t_this.framebuffer = null;\n\n\t\t_this.buffer = null;\n\t\t_this.program = null;\n\t\t_this.outputToTexture = settings.outputToTexture;\n\t\t_this.endianness = utils.systemEndianness();\n\t\t_this.subKernelOutputTextures = null;\n\t\t_this.subKernelOutputVariableNames = null;\n\t\t_this.argumentsLength = 0;\n\t\t_this.constantsLength = 0;\n\t\t_this.compiledFragShaderString = null;\n\t\t_this.compiledVertShaderString = null;\n\t\t_this.fragShader = null;\n\t\t_this.vertShader = null;\n\t\t_this.drawBuffersMap = null;\n\t\t_this.outputTexture = null;\n\t\t_this.maxTexSize = null;\n\t\t_this.uniform1fCache = {};\n\t\t_this.uniform1iCache = {};\n\t\t_this.uniform2fCache = {};\n\t\t_this.uniform2fvCache = {};\n\t\t_this.uniform2ivCache = {};\n\t\t_this.uniform3fvCache = {};\n\t\t_this.uniform3ivCache = {};\n\t\tif (!_this._webGl) _this._webGl = _this.initWebGl();\n\t\treturn _this;\n\t}\n\n\t_createClass(WebGLKernel, [{\n\t\tkey: 'initWebGl',\n\t\tvalue: function initWebGl() {\n\t\t\treturn utils.initWebGl(this.getCanvas());\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name validateOptions\n   *\n   * @desc Validate options related to Kernel, such as\n   * floatOutputs and Textures, texSize, output,\n   * graphical output.\n   *\n   */\n\n\t}, {\n\t\tkey: 'validateOptions',\n\t\tvalue: function validateOptions() {\n\t\t\tvar isFloatReadPixel = utils.isFloatReadPixelsSupported();\n\t\t\tif (this.floatTextures === true && !utils.OES_texture_float) {\n\t\t\t\tthrow new Error('Float textures are not supported on this browser');\n\t\t\t} else if (this.floatOutput === true && this.floatOutputForce !== true && !isFloatReadPixel) {\n\t\t\t\tthrow new Error('Float texture outputs are not supported on this browser');\n\t\t\t} else if (this.floatTextures === undefined && utils.OES_texture_float) {\n\t\t\t\tthis.floatTextures = true;\n\t\t\t\tthis.floatOutput = isFloatReadPixel;\n\t\t\t}\n\n\t\t\tvar hasIntegerDivisionBug = utils.hasIntegerDivisionAccuracyBug();\n\t\t\tif (this.fixIntegerDivisionAccuracy === null) {\n\t\t\t\tthis.fixIntegerDivisionAccuracy = hasIntegerDivisionBug;\n\t\t\t} else if (this.fixIntegerDivisionAccuracy && !hasIntegerDivisionBug) {\n\t\t\t\tthis.fixIntegerDivisionAccuracy = false;\n\t\t\t}\n\n\t\t\tutils.checkOutput(this.output);\n\n\t\t\tif (!this.output || this.output.length === 0) {\n\t\t\t\tif (arguments.length !== 1) {\n\t\t\t\t\tthrow new Error('Auto output only supported for kernels with only one input');\n\t\t\t\t}\n\n\t\t\t\tvar argType = utils.getArgumentType(arguments[0]);\n\t\t\t\tif (argType === 'Array') {\n\t\t\t\t\tthis.output = utils.getDimensions(argType);\n\t\t\t\t} else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n\t\t\t\t\tthis.output = arguments[0].output;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Auto output not supported for input type: ' + argType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.texSize = utils.dimToTexSize({\n\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t}, this.output, true);\n\n\t\t\tif (this.graphical) {\n\t\t\t\tif (this.output.length !== 2) {\n\t\t\t\t\tthrow new Error('Output must have 2 dimensions on graphical mode');\n\t\t\t\t}\n\n\t\t\t\tif (this.floatOutput) {\n\t\t\t\t\tthis.floatOutput = false;\n\t\t\t\t\tconsole.warn('Cannot use graphical mode and float output at the same time');\n\t\t\t\t}\n\n\t\t\t\tthis.texSize = utils.clone(this.output);\n\t\t\t} else if (this.floatOutput === undefined && utils.OES_texture_float) {\n\t\t\t\tthis.floatOutput = true;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'updateMaxTexSize',\n\t\tvalue: function updateMaxTexSize() {\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar canvas = this._canvas;\n\t\t\tif (this.maxTexSize === null) {\n\t\t\t\tvar canvasIndex = canvases.indexOf(canvas);\n\t\t\t\tif (canvasIndex === -1) {\n\t\t\t\t\tcanvasIndex = canvases.length;\n\t\t\t\t\tcanvases.push(canvas);\n\t\t\t\t\tmaxTexSizes[canvasIndex] = [texSize[0], texSize[1]];\n\t\t\t\t}\n\t\t\t\tthis.maxTexSize = maxTexSizes[canvasIndex];\n\t\t\t}\n\t\t\tif (this.maxTexSize[0] < texSize[0]) {\n\t\t\t\tthis.maxTexSize[0] = texSize[0];\n\t\t\t}\n\t\t\tif (this.maxTexSize[1] < texSize[1]) {\n\t\t\t\tthis.maxTexSize[1] = texSize[1];\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name build\n   *\n   * @desc Builds the Kernel, by compiling Fragment and Vertical Shaders,\n   * and instantiates the program.\n   *\n   */\n\n\t}, {\n\t\tkey: 'build',\n\t\tvalue: function build() {\n\t\t\tthis.validateOptions();\n\t\t\tthis.setupConstants();\n\t\t\tthis.setupParams(arguments);\n\t\t\tthis.updateMaxTexSize();\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar gl = this._webGl;\n\t\t\tvar canvas = this._canvas;\n\t\t\tgl.enable(gl.SCISSOR_TEST);\n\t\t\tgl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n\t\t\tcanvas.width = this.maxTexSize[0];\n\t\t\tcanvas.height = this.maxTexSize[1];\n\t\t\tvar threadDim = this.threadDim = utils.clone(this.output);\n\t\t\twhile (threadDim.length < 3) {\n\t\t\t\tthreadDim.push(1);\n\t\t\t}\n\n\t\t\tif (this.functionBuilder) this._addKernels();\n\n\t\t\tvar compiledVertShaderString = this._getVertShaderString(arguments);\n\t\t\tvar vertShader = gl.createShader(gl.VERTEX_SHADER);\n\t\t\tgl.shaderSource(vertShader, compiledVertShaderString);\n\t\t\tgl.compileShader(vertShader);\n\t\t\tthis.vertShader = vertShader;\n\n\t\t\tvar compiledFragShaderString = this._getFragShaderString(arguments);\n\t\t\tvar fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\t\tgl.shaderSource(fragShader, compiledFragShaderString);\n\t\t\tgl.compileShader(fragShader);\n\t\t\tthis.fragShader = fragShader;\n\n\t\t\tif (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {\n\t\t\t\tconsole.log(compiledVertShaderString);\n\t\t\t\tconsole.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(vertShader));\n\t\t\t\tthrow new Error('Error compiling vertex shader');\n\t\t\t}\n\t\t\tif (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {\n\t\t\t\tconsole.log(compiledFragShaderString);\n\t\t\t\tconsole.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(fragShader));\n\t\t\t\tthrow new Error('Error compiling fragment shader');\n\t\t\t}\n\n\t\t\tif (this.debug) {\n\t\t\t\tconsole.log('Options:');\n\t\t\t\tconsole.dir(this);\n\t\t\t\tconsole.log('GLSL Shader Output:');\n\t\t\t\tconsole.log(compiledFragShaderString);\n\t\t\t}\n\n\t\t\tvar program = this.program = gl.createProgram();\n\t\t\tgl.attachShader(program, vertShader);\n\t\t\tgl.attachShader(program, fragShader);\n\t\t\tgl.linkProgram(program);\n\t\t\tthis.framebuffer = gl.createFramebuffer();\n\t\t\tthis.framebuffer.width = texSize[0];\n\t\t\tthis.framebuffer.height = texSize[1];\n\n\t\t\tvar vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n\t\t\tvar texCoords = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n\n\t\t\tvar texCoordOffset = vertices.byteLength;\n\n\t\t\tvar buffer = this.buffer;\n\t\t\tif (!buffer) {\n\t\t\t\tbuffer = this.buffer = gl.createBuffer();\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);\n\t\t\t} else {\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t}\n\n\t\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\n\t\t\tgl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);\n\n\t\t\tvar aPosLoc = gl.getAttribLocation(this.program, 'aPos');\n\t\t\tgl.enableVertexAttribArray(aPosLoc);\n\t\t\tgl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, gl.FALSE, 0, 0);\n\t\t\tvar aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');\n\t\t\tgl.enableVertexAttribArray(aTexCoordLoc);\n\t\t\tgl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, gl.FALSE, 0, texCoordOffset);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n\t\t\tfor (var p in this.constants) {\n\t\t\t\tvar value = this.constants[p];\n\t\t\t\tvar type = utils.getArgumentType(value);\n\t\t\t\tif (type === 'Float' || type === 'Integer') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tgl.useProgram(this.program);\n\t\t\t\tthis._addConstant(this.constants[p], type, p);\n\t\t\t\tthis.constantsLength++;\n\t\t\t}\n\n\t\t\tif (!this.outputImmutable) {\n\t\t\t\tthis._setupOutputTexture();\n\t\t\t\tif (this.subKernelOutputVariableNames !== null && this.subKernelOutputVariableNames.length > 0) {\n\t\t\t\t\tthis._setupSubOutputTextures(this.subKernelOutputVariableNames.length);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name run\n   *\n   * @desc Run the kernel program, and send the output to renderOutput\n   *\n   * <p> This method calls a helper method *renderOutput* to return the result. </p>\n   *\n   * @returns {Object|Undefined} Result The final output of the program, as float, and as Textures for reuse.\n   *\n   *\n   */\n\n\t}, {\n\t\tkey: 'run',\n\t\tvalue: function run() {\n\t\t\tif (this.program === null) {\n\t\t\t\tthis.build.apply(this, arguments);\n\t\t\t}\n\t\t\tvar paramNames = this.paramNames;\n\t\t\tvar paramTypes = this.paramTypes;\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar gl = this._webGl;\n\n\t\t\tgl.useProgram(this.program);\n\t\t\tgl.scissor(0, 0, texSize[0], texSize[1]);\n\n\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\tthis.setUniform3iv('uOutputDim', this.threadDim);\n\t\t\t\tthis.setUniform2iv('uTexSize', texSize);\n\t\t\t}\n\n\t\t\tthis.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\n\n\t\t\tthis.argumentsLength = 0;\n\t\t\tfor (var texIndex = 0; texIndex < paramNames.length; texIndex++) {\n\t\t\t\tthis._addArgument(arguments[texIndex], paramTypes[texIndex], paramNames[texIndex]);\n\t\t\t}\n\n\t\t\tif (this.graphical) {\n\t\t\t\tif (this.outputToTexture) {\n\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\t\t\t\tif (!this.outputTexture || this.outputImmutable) {\n\t\t\t\t\t\tthis._setupOutputTexture();\n\t\t\t\t\t}\n\t\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\t\t\treturn new Texture(this.outputTexture, texSize, this.threadDim, this.output, this._webGl, 'ArrayTexture(4)');\n\t\t\t\t}\n\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\t\tif (this.outputImmutable) {\n\t\t\t\tthis._setupOutputTexture();\n\t\t\t}\n\t\t\tvar outputTexture = this.outputTexture;\n\n\t\t\tif (this.subKernelOutputVariableNames !== null) {\n\t\t\t\tif (this.outputImmutable) {\n\t\t\t\t\tthis.subKernelOutputTextures = [];\n\t\t\t\t\tthis._setupSubOutputTextures(this.subKernelOutputVariableNames.length);\n\t\t\t\t}\n\t\t\t\tthis.drawBuffers.drawBuffersWEBGL(this.drawBuffersMap);\n\t\t\t}\n\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n\t\t\tif (this.subKernelOutputTextures !== null) {\n\t\t\t\tif (this.subKernels !== null) {\n\t\t\t\t\tvar output = [];\n\t\t\t\t\toutput.result = this.renderOutput(outputTexture);\n\t\t\t\t\tfor (var i = 0; i < this.subKernels.length; i++) {\n\t\t\t\t\t\toutput.push(new Texture(this.subKernelOutputTextures[i], texSize, this.threadDim, this.output, this._webGl));\n\t\t\t\t\t}\n\t\t\t\t\treturn output;\n\t\t\t\t} else if (this.subKernelProperties !== null) {\n\t\t\t\t\tvar _output = {\n\t\t\t\t\t\tresult: this.renderOutput(outputTexture)\n\t\t\t\t\t};\n\t\t\t\t\tvar _i = 0;\n\t\t\t\t\tfor (var p in this.subKernelProperties) {\n\t\t\t\t\t\tif (!this.subKernelProperties.hasOwnProperty(p)) continue;\n\t\t\t\t\t\t_output[p] = new Texture(this.subKernelOutputTextures[_i], texSize, this.threadDim, this.output, this._webGl);\n\t\t\t\t\t\t_i++;\n\t\t\t\t\t}\n\t\t\t\t\treturn _output;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.renderOutput(outputTexture);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name renderOutput\n   *\n   *\n   * @desc Helper function to return webGl function's output.\n   * Since the program runs on GPU, we need to get the\n   * output of the program back to CPU and then return them.\n   *\n   * *Note*: This should not be called directly.\n   *\n   * @param {Object} outputTexture - Output Texture returned by webGl program\n   *\n   * @returns {Object|Array} result\n   *\n   *\n   */\n\n\t}, {\n\t\tkey: 'renderOutput',\n\t\tvalue: function renderOutput(outputTexture) {\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar gl = this._webGl;\n\t\t\tvar threadDim = this.threadDim;\n\t\t\tvar output = this.output;\n\t\t\tif (this.outputToTexture) {\n\t\t\t\treturn new Texture(outputTexture, texSize, this.threadDim, output, this._webGl);\n\t\t\t} else {\n\t\t\t\tvar result = void 0;\n\t\t\t\tif (this.floatOutput) {\n\t\t\t\t\tvar w = texSize[0];\n\t\t\t\t\tvar h = Math.ceil(texSize[1] / 4);\n\t\t\t\t\tresult = new Float32Array(w * h * 4);\n\t\t\t\t\tgl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n\t\t\t\t} else {\n\t\t\t\t\tvar bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\n\t\t\t\t\tgl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, bytes);\n\t\t\t\t\tresult = new Float32Array(bytes.buffer);\n\t\t\t\t}\n\n\t\t\t\tresult = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\n\n\t\t\t\tif (output.length === 1) {\n\t\t\t\t\treturn result;\n\t\t\t\t} else if (output.length === 2) {\n\t\t\t\t\treturn utils.splitArray(result, output[0]);\n\t\t\t\t} else if (output.length === 3) {\n\t\t\t\t\tvar cube = utils.splitArray(result, output[0] * output[1]);\n\t\t\t\t\treturn cube.map(function (x) {\n\t\t\t\t\t\treturn utils.splitArray(x, output[0]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name getOutputTexture\n   *\n   * @desc This return defined outputTexture, which is setup in .build(), or if immutable, is defined in .run()\n   *\n   * @returns {Object} Output Texture Cache\n   *\n   */\n\n\t}, {\n\t\tkey: 'getOutputTexture',\n\t\tvalue: function getOutputTexture() {\n\t\t\treturn this.outputTexture;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _setupOutputTexture\n   * @private\n   *\n   * @desc Setup and replace output texture\n   */\n\n\t}, {\n\t\tkey: '_setupOutputTexture',\n\t\tvalue: function _setupOutputTexture() {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar texture = this.outputTexture = this._webGl.createTexture();\n\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.paramNames.length);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\tif (this.floatOutput) {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t\t}\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @param length\n   * @private\n   *\n   * @desc Setup and replace sub-output textures\n   */\n\n\t}, {\n\t\tkey: '_setupSubOutputTextures',\n\t\tvalue: function _setupSubOutputTextures(length) {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar drawBuffersMap = this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n\t\t\tvar textures = this.subKernelOutputTextures = [];\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar texture = this._webGl.createTexture();\n\t\t\t\ttextures.push(texture);\n\t\t\t\tdrawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.paramNames.length + i);\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\tif (this.floatOutput) {\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t} else {\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t\t\t}\n\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name getArgumentTexture\n   *\n   * @desc This uses *getTextureCache** to get the Texture Cache of the argument supplied\n   *\n   * @param {String} name - Name of the argument\n   *\n   * \tTexture cache for the supplied argument\n   *\n   */\n\n\t}, {\n\t\tkey: 'getArgumentTexture',\n\t\tvalue: function getArgumentTexture(name) {\n\t\t\treturn this.getTextureCache('ARGUMENT_' + name);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @name getTextureCache\n   * @function\n   *\n   * @desc Returns the Texture Cache of the supplied parameter (can be kernel, sub-kernel or argument)\n   *\n   * @param {String} name - Name of the subkernel, argument, or kernel.\n   *\n   * @returns {Object} Texture cache\n   *\n   */\n\n\t}, {\n\t\tkey: 'getTextureCache',\n\t\tvalue: function getTextureCache(name) {\n\t\t\tif (this.textureCache.hasOwnProperty(name)) {\n\t\t\t\treturn this.textureCache[name];\n\t\t\t}\n\t\t\treturn this.textureCache[name] = this._webGl.createTexture();\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @name detachTextureCache\n   * @function\n   * @desc removes a texture from the kernel's cache\n   * @param {String} name - Name of texture\n   */\n\n\t}, {\n\t\tkey: 'detachTextureCache',\n\t\tvalue: function detachTextureCache(name) {\n\t\t\tdelete this.textureCache[name];\n\t\t}\n\t}, {\n\t\tkey: 'setUniform1f',\n\t\tvalue: function setUniform1f(name, value) {\n\t\t\tif (this.uniform1fCache.hasOwnProperty(name)) {\n\t\t\t\tvar cache = this.uniform1fCache[name];\n\t\t\t\tif (value === cache) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.uniform1fCache[name] = value;\n\t\t\tvar loc = this.getUniformLocation(name);\n\t\t\tthis._webGl.uniform1f(loc, value);\n\t\t}\n\t}, {\n\t\tkey: 'setUniform1i',\n\t\tvalue: function setUniform1i(name, value) {\n\t\t\tif (this.uniform1iCache.hasOwnProperty(name)) {\n\t\t\t\tvar cache = this.uniform1iCache[name];\n\t\t\t\tif (value === cache) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.uniform1iCache[name] = value;\n\t\t\tvar loc = this.getUniformLocation(name);\n\t\t\tthis._webGl.uniform1i(loc, value);\n\t\t}\n\t}, {\n\t\tkey: 'setUniform2f',\n\t\tvalue: function setUniform2f(name, value1, value2) {\n\t\t\tif (this.uniform2fCache.hasOwnProperty(name)) {\n\t\t\t\tvar cache = this.uniform2fCache[name];\n\t\t\t\tif (value1 === cache[0] && value2 === cache[1]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.uniform2fCache[name] = [value1, value2];\n\t\t\tvar loc = this.getUniformLocation(name);\n\t\t\tthis._webGl.uniform2f(loc, value1, value2);\n\t\t}\n\t}, {\n\t\tkey: 'setUniform2fv',\n\t\tvalue: function setUniform2fv(name, value) {\n\t\t\tif (this.uniform2fvCache.hasOwnProperty(name)) {\n\t\t\t\tvar cache = this.uniform2fvCache[name];\n\t\t\t\tif (value[0] === cache[0] && value[1] === cache[1]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.uniform2fvCache[name] = value;\n\t\t\tvar loc = this.getUniformLocation(name);\n\t\t\tthis._webGl.uniform2fv(loc, value);\n\t\t}\n\t}, {\n\t\tkey: 'setUniform2iv',\n\t\tvalue: function setUniform2iv(name, value) {\n\t\t\tif (this.uniform2ivCache.hasOwnProperty(name)) {\n\t\t\t\tvar cache = this.uniform2ivCache[name];\n\t\t\t\tif (value[0] === cache[0] && value[1] === cache[1]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.uniform2ivCache[name] = value;\n\t\t\tvar loc = this.getUniformLocation(name);\n\t\t\tthis._webGl.uniform2iv(loc, value);\n\t\t}\n\t}, {\n\t\tkey: 'setUniform3fv',\n\t\tvalue: function setUniform3fv(name, value) {\n\t\t\tif (this.uniform3fvCache.hasOwnProperty(name)) {\n\t\t\t\tvar cache = this.uniform3fvCache[name];\n\t\t\t\tif (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.uniform3fvCache[name] = value;\n\t\t\tvar loc = this.getUniformLocation(name);\n\t\t\tthis._webGl.uniform3fv(loc, value);\n\t\t}\n\t}, {\n\t\tkey: 'setUniform3iv',\n\t\tvalue: function setUniform3iv(name, value) {\n\t\t\tif (this.uniform3ivCache.hasOwnProperty(name)) {\n\t\t\t\tvar cache = this.uniform3ivCache[name];\n\t\t\t\tif (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.uniform3ivCache[name] = value;\n\t\t\tvar loc = this.getUniformLocation(name);\n\t\t\tthis._webGl.uniform3iv(loc, value);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name getUniformLocation\n   *\n   * @desc Return WebGlUniformLocation for various variables\n   * related to webGl program, such as user-defiend variables,\n   * as well as, dimension sizes, etc.\n   *\n   */\n\n\t}, {\n\t\tkey: 'getUniformLocation',\n\t\tvalue: function getUniformLocation(name) {\n\t\t\tif (this.programUniformLocationCache.hasOwnProperty(name)) {\n\t\t\t\treturn this.programUniformLocationCache[name];\n\t\t\t}\n\t\t\treturn this.programUniformLocationCache[name] = this._webGl.getUniformLocation(this.program, name);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getFragShaderArtifactMap\n   *\n   * @desc Generate Shader artifacts for the kernel program.\n   * The final object contains HEADER, KERNEL, MAIN_RESULT, and others.\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   *\n   * @returns {Object} An object containing the Shader Artifacts(CONSTANTS, HEADER, KERNEL, etc.)\n   *\n   */\n\n\t}, {\n\t\tkey: '_getFragShaderArtifactMap',\n\t\tvalue: function _getFragShaderArtifactMap(args) {\n\t\t\treturn {\n\t\t\t\tHEADER: this._getHeaderString(),\n\t\t\t\tLOOP_MAX: this._getLoopMaxString(),\n\t\t\t\tCONSTANTS: this._getConstantsString(),\n\t\t\t\tDECODE32_ENDIANNESS: this._getDecode32EndiannessString(),\n\t\t\t\tENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),\n\t\t\t\tDIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),\n\t\t\t\tGET_WRAPAROUND: this._getGetWraparoundString(),\n\t\t\t\tGET_TEXTURE_CHANNEL: this._getGetTextureChannelString(),\n\t\t\t\tGET_TEXTURE_INDEX: this._getGetTextureIndexString(),\n\t\t\t\tGET_RESULT: this._getGetResultString(),\n\t\t\t\tMAIN_PARAMS: this._getMainParamsString(args),\n\t\t\t\tMAIN_CONSTANTS: this._getMainConstantsString(),\n\t\t\t\tKERNEL: this._getKernelString(),\n\t\t\t\tMAIN_RESULT: this._getMainResultString()\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _addArgument\n   *\n   * @desc Adds kernel parameters to the Argument Texture,\n   * binding it to the webGl instance, etc.\n   *\n   * @param {Array|Texture|Number} value - The actual argument supplied to the kernel\n   * @param {String} type - Type of the argument\n   * @param {String} name - Name of the argument\n   *\n   */\n\n\t}, {\n\t\tkey: '_addArgument',\n\t\tvalue: function _addArgument(value, type, name) {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar argumentTexture = this.getArgumentTexture(name);\n\t\t\tif (value instanceof Texture) {\n\t\t\t\ttype = value.type;\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Array':\n\t\t\t\tcase 'Array(2)':\n\t\t\t\tcase 'Array(3)':\n\t\t\t\tcase 'Array(4)':\n\t\t\t\tcase 'Array2D':\n\t\t\t\tcase 'Array3D':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar dim = utils.getDimensions(value, true);\n\t\t\t\t\t\tvar size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, dim);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar length = size[0] * size[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer2 = this._formatArrayTransfer(value, length),\n\t\t\t\t\t\t    valuesFlat = _formatArrayTransfer2.valuesFlat,\n\t\t\t\t\t\t    bitRatio = _formatArrayTransfer2.bitRatio;\n\n\t\t\t\t\t\tvar buffer = void 0;\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0], size[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0] / bitRatio, size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', dim);\n\t\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', size);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('user_' + name + 'BitRatio', bitRatio);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Integer':\n\t\t\t\tcase 'Float':\n\t\t\t\tcase 'Number':\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setUniform1f('user_' + name, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Input':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar input = value;\n\t\t\t\t\t\tvar _dim = input.size;\n\t\t\t\t\t\tvar _size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, _dim);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar _length = _size[0] * _size[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer3 = this._formatArrayTransfer(value.value, _length),\n\t\t\t\t\t\t    _valuesFlat = _formatArrayTransfer3.valuesFlat,\n\t\t\t\t\t\t    _bitRatio = _formatArrayTransfer3.bitRatio;\n\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, _size[0], _size[1], 0, gl.RGBA, gl.FLOAT, inputArray);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _buffer = new Uint8Array(_valuesFlat.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, _size[0] / _bitRatio, _size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, _buffer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', _dim);\n\t\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', _size);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('user_' + name + 'BitRatio', _bitRatio);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputImage = value;\n\t\t\t\t\t\tvar _dim2 = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\t\tvar _size2 = [inputImage.width, inputImage.height];\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\t\tvar mipLevel = 0; // the largest mip\n\t\t\t\t\t\tvar internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\t\tvar srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\t\tvar srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, srcFormat, srcType, inputImage);\n\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', _dim2);\n\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', _size2);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputTexture = value;\n\t\t\t\t\t\tvar _dim3 = inputTexture.dimensions;\n\t\t\t\t\t\tvar _size3 = inputTexture.size;\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', _dim3);\n\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', _size3);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name + 'BitRatio', 1); // aways float32\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Input type not supported (WebGL): ' + value);\n\t\t\t}\n\t\t\tthis.argumentsLength++;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _addConstant\n   *\n   * @desc Adds kernel parameters to the Argument Texture,\n   * binding it to the webGl instance, etc.\n   *\n   * @param {Array|Texture|Number} value - The actual argument supplied to the kernel\n   * @param {String} type - Type of the argument\n   * @param {String} name - Name of the argument\n   *\n   */\n\n\t}, {\n\t\tkey: '_addConstant',\n\t\tvalue: function _addConstant(value, type, name) {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar argumentTexture = this.getArgumentTexture(name);\n\t\t\tif (value instanceof Texture) {\n\t\t\t\ttype = value.type;\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Array':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar dim = utils.getDimensions(value, true);\n\t\t\t\t\t\tvar size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, dim);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar length = size[0] * size[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer4 = this._formatArrayTransfer(value, length),\n\t\t\t\t\t\t    valuesFlat = _formatArrayTransfer4.valuesFlat,\n\t\t\t\t\t\t    bitRatio = _formatArrayTransfer4.bitRatio;\n\n\t\t\t\t\t\tvar buffer = void 0;\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0], size[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0] / bitRatio, size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', dim);\n\t\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', size);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name + 'BitRatio', bitRatio);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Input':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar input = value;\n\t\t\t\t\t\tvar _dim4 = input.size;\n\t\t\t\t\t\tvar _size4 = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, _dim4);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar _length2 = _size4[0] * _size4[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer5 = this._formatArrayTransfer(value.value, _length2),\n\t\t\t\t\t\t    _valuesFlat2 = _formatArrayTransfer5.valuesFlat,\n\t\t\t\t\t\t    _bitRatio2 = _formatArrayTransfer5.bitRatio;\n\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, _size4[0], _size4[1], 0, gl.RGBA, gl.FLOAT, inputArray);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _buffer2 = new Uint8Array(_valuesFlat2.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, _size4[0] / _bitRatio2, _size4[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, _buffer2);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', _dim4);\n\t\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', _size4);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name + 'BitRatio', _bitRatio2);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputImage = value;\n\t\t\t\t\t\tvar _dim5 = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\t\tvar _size5 = [inputImage.width, inputImage.height];\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\t\tvar mipLevel = 0; // the largest mip\n\t\t\t\t\t\tvar internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\t\tvar srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\t\tvar srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, srcFormat, srcType, inputImage);\n\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', _dim5);\n\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', _size5);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputTexture = value;\n\t\t\t\t\t\tvar _dim6 = inputTexture.dimensions;\n\t\t\t\t\t\tvar _size6 = inputTexture.size;\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', _dim6);\n\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', _size6);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name + 'BitRatio', 1); // aways float32\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Integer':\n\t\t\t\tcase 'Float':\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Input type not supported (WebGL): ' + value);\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _formatArrayTransfer\n   *\n   * @desc Adds kernel parameters to the Argument Texture,\n   * binding it to the webGl instance, etc.\n   *\n   * @param {Array} value - The actual argument supplied to the kernel\n   * @param {String} length - the expected total length of the output array\n   *\n   * @returns {Object} bitRatio - bit storage ratio of source to target 'buffer', i.e. if 8bit array -> 32bit tex = 4\n   * \t\t\t\t     valuesFlat - flattened array to transfer\n   */\n\n\t}, {\n\t\tkey: '_formatArrayTransfer',\n\t\tvalue: function _formatArrayTransfer(value, length) {\n\t\t\tvar bitRatio = 1; // bit storage ratio of source to target 'buffer', i.e. if 8bit array -> 32bit tex = 4\n\t\t\tvar valuesFlat = value;\n\t\t\tif (utils.isArray(value[0]) || this.floatTextures) {\n\t\t\t\t// not already flat\n\t\t\t\tvaluesFlat = new Float32Array(length);\n\t\t\t\tutils.flattenTo(value, valuesFlat);\n\t\t\t} else {\n\n\t\t\t\tswitch (value.constructor) {\n\t\t\t\t\tcase Uint8Array:\n\t\t\t\t\tcase Int8Array:\n\t\t\t\t\t\tbitRatio = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Uint16Array:\n\t\t\t\t\tcase Int16Array:\n\t\t\t\t\t\tbitRatio = 2;\n\t\t\t\t\tcase Float32Array:\n\t\t\t\t\tcase Int32Array:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvaluesFlat = new Float32Array(length);\n\t\t\t\t\t\tutils.flattenTo(value, valuesFlat);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tbitRatio: bitRatio,\n\t\t\t\tvaluesFlat: valuesFlat\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getHeaderString\n   *\n   * @desc Get the header string for the program.\n   * This returns an empty string if no sub-kernels are defined.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getHeaderString',\n\t\tvalue: function _getHeaderString() {\n\t\t\treturn this.subKernels !== null || this.subKernelProperties !== null ?\n\t\t\t//webgl2 '#version 300 es\\n' :\n\t\t\t'#extension GL_EXT_draw_buffers : require\\n' : '';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getLoopMaxString\n   *\n   * @desc Get the maximum loop size String.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getLoopMaxString',\n\t\tvalue: function _getLoopMaxString() {\n\t\t\treturn this.loopMaxIterations ? ' ' + parseInt(this.loopMaxIterations) + '.0;\\n' : ' 1000.0;\\n';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getConstantsString\n   *\n   * @desc Generate transpiled glsl Strings for constant parameters sent to a kernel\n   *\n   * They can be defined by *hardcodeConstants*\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getConstantsString',\n\t\tvalue: function _getConstantsString() {\n\t\t\tvar result = [];\n\t\t\tvar threadDim = this.threadDim;\n\t\t\tvar texSize = this.texSize;\n\t\t\tif (this.hardcodeConstants) {\n\t\t\t\tresult.push('ivec3 uOutputDim = ivec3(' + threadDim[0] + ',' + threadDim[1] + ', ' + threadDim[2] + ')', 'ivec2 uTexSize = ivec2(' + texSize[0] + ', ' + texSize[1] + ')');\n\t\t\t} else {\n\t\t\t\tresult.push('uniform ivec3 uOutputDim', 'uniform ivec2 uTexSize');\n\t\t\t}\n\n\t\t\treturn this._linesToString(result);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getTextureCoordinate\n   *\n   * @desc Get texture coordinate string for the program\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getTextureCoordinate',\n\t\tvalue: function _getTextureCoordinate() {\n\t\t\tvar names = this.subKernelOutputVariableNames;\n\t\t\tif (names === null || names.length < 1) {\n\t\t\t\treturn 'varying vec2 vTexCoord;\\n';\n\t\t\t} else {\n\t\t\t\treturn 'out vec2 vTexCoord;\\n';\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getDecode32EndiannessString\n   *\n   * @desc Get Decode32 endianness string for little-endian and big-endian\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getDecode32EndiannessString',\n\t\tvalue: function _getDecode32EndiannessString() {\n\t\t\treturn this.endianness === 'LE' ? '' : '  rgba.rgba = rgba.abgr;\\n';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getEncode32EndiannessString\n   *\n   * @desc Get Encode32 endianness string for little-endian and big-endian\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getEncode32EndiannessString',\n\t\tvalue: function _getEncode32EndiannessString() {\n\t\t\treturn this.endianness === 'LE' ? '' : '  rgba.rgba = rgba.abgr;\\n';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getDivideWithIntegerCheckString\n   *\n   * @desc if fixIntegerDivisionAccuracy provide method to replace /\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getDivideWithIntegerCheckString',\n\t\tvalue: function _getDivideWithIntegerCheckString() {\n\t\t\treturn this.fixIntegerDivisionAccuracy ? '\\n\\t\\t\\t  float div_with_int_check(float x, float y) {\\n\\t\\t\\t  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\\n\\t\\t\\t    return float(int(x)/int(y));\\n\\t\\t\\t  }\\n\\t\\t\\t  return x / y;\\n\\t\\t\\t}\\n\\t\\t\\t' : '';\n\t\t}\n\n\t\t/**\n   * @function\n   * @memberOf WebGLKernel#\n   * @name _getGetWraparoundString\n   *\n   * @returns {String} wraparound string\n   */\n\n\t}, {\n\t\tkey: '_getGetWraparoundString',\n\t\tvalue: function _getGetWraparoundString() {\n\t\t\treturn this.wraparound ? '  xyz = mod(xyz, texDim);\\n' : '';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getGetTextureChannelString\n   *\n   */\n\n\t}, {\n\t\tkey: '_getGetTextureChannelString',\n\t\tvalue: function _getGetTextureChannelString() {\n\t\t\tif (!this.floatTextures) return '';\n\n\t\t\treturn this._linesToString(['  int channel = integerMod(index, 4)', '  index = index / 4']);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getGetTextureIndexString\n   *\n   * @desc Get generic texture index string, if floatTextures flag is true.\n   *\n   * @example\n   * '  index = float(int(index)/4);\\n'\n   *\n   */\n\n\t}, {\n\t\tkey: '_getGetTextureIndexString',\n\t\tvalue: function _getGetTextureIndexString() {\n\t\t\treturn this.floatTextures ? '  index = index / 4;\\n' : '';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getGetResultString\n   *\n   */\n\n\t}, {\n\t\tkey: '_getGetResultString',\n\t\tvalue: function _getGetResultString() {\n\t\t\tif (!this.floatTextures) {\n\t\t\t\treturn '  return decode(texel, x, bitRatio);';\n\t\t\t}\n\t\t\treturn this._linesToString(['  if (channel == 0) return texel.r', '  if (channel == 1) return texel.g', '  if (channel == 2) return texel.b', '  if (channel == 3) return texel.a']);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getMainParamsString\n   *\n   * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getMainParamsString',\n\t\tvalue: function _getMainParamsString(args) {\n\t\t\tvar result = [];\n\t\t\tvar paramTypes = this.paramTypes;\n\t\t\tvar paramNames = this.paramNames;\n\t\t\tfor (var i = 0; i < paramNames.length; i++) {\n\t\t\t\tvar param = args[i];\n\t\t\t\tvar paramName = paramNames[i];\n\t\t\t\tvar paramType = paramTypes[i];\n\t\t\t\tif (this.hardcodeConstants) {\n\t\t\t\t\tif (paramType === 'Array' || paramType === 'NumberTexture' || paramType === 'ArrayTexture(4)') {\n\t\t\t\t\t\tvar paramDim = utils.getDimensions(param, true);\n\t\t\t\t\t\tvar paramSize = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, paramDim);\n\n\t\t\t\t\t\tresult.push('uniform sampler2D user_' + paramName, 'ivec2 user_' + paramName + 'Size = ivec2(' + paramSize[0] + ', ' + paramSize[1] + ')', 'ivec3 user_' + paramName + 'Dim = ivec3(' + paramDim[0] + ', ' + paramDim[1] + ', ' + paramDim[2] + ')', 'uniform int user_' + paramName + 'BitRatio');\n\t\t\t\t\t} else if (paramType === 'Integer') {\n\t\t\t\t\t\tresult.push('float user_' + paramName + ' = ' + param + '.0');\n\t\t\t\t\t} else if (paramType === 'Float') {\n\t\t\t\t\t\tresult.push('float user_' + paramName + ' = ' + param);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (paramType === 'Array' || paramType === 'NumberTexture' || paramType === 'ArrayTexture(4)' || paramType === 'Input' || paramType === 'HTMLImage') {\n\t\t\t\t\t\tresult.push('uniform sampler2D user_' + paramName, 'uniform ivec2 user_' + paramName + 'Size', 'uniform ivec3 user_' + paramName + 'Dim');\n\t\t\t\t\t\tif (paramType !== 'HTMLImage') {\n\t\t\t\t\t\t\tresult.push('uniform int user_' + paramName + 'BitRatio');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (paramType === 'Integer' || paramType === 'Float') {\n\t\t\t\t\t\tresult.push('uniform float user_' + paramName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Param type ' + paramType + ' not supported in WebGL, only WebGL2');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._linesToString(result);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getMainConstantsString\n   *\n   */\n\n\t}, {\n\t\tkey: '_getMainConstantsString',\n\t\tvalue: function _getMainConstantsString() {\n\t\t\tvar result = [];\n\t\t\tif (this.constants) {\n\t\t\t\tfor (var name in this.constants) {\n\t\t\t\t\tif (!this.constants.hasOwnProperty(name)) continue;\n\t\t\t\t\tvar value = this.constants[name];\n\t\t\t\t\tvar type = utils.getArgumentType(value);\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\t\tresult.push('const float constants_' + name + ' = ' + parseInt(value) + '.0');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Float':\n\t\t\t\t\t\t\tresult.push('const float constants_' + name + ' = ' + parseFloat(value));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tcase 'Input':\n\t\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\t\t\tresult.push('uniform sampler2D constants_' + name, 'uniform ivec2 constants_' + name + 'Size', 'uniform ivec3 constants_' + name + 'Dim', 'uniform int constants_' + name + 'BitRatio');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error('Unsupported constant ' + name + ' type ' + type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._linesToString(result);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getKernelString\n   *\n   * @desc Get Kernel program string (in *glsl*) for a kernel.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getKernelString',\n\t\tvalue: function _getKernelString() {\n\t\t\tvar result = [];\n\t\t\tvar names = this.subKernelOutputVariableNames;\n\t\t\tif (names !== null) {\n\t\t\t\tresult.push('float kernelResult = 0.0');\n\t\t\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\t\t\tresult.push('float ' + names[i] + ' = 0.0');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.push('float kernelResult = 0.0');\n\t\t\t}\n\n\t\t\treturn this._linesToString(result) + this.functionBuilder.getPrototypeString('kernel');\n\t\t}\n\n\t\t/**\n   *\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getMainResultString\n   *\n   * @desc Get main result string with checks for floatOutput, graphical, subKernelsOutputs, etc.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getMainResultString',\n\t\tvalue: function _getMainResultString() {\n\t\t\tvar names = this.subKernelOutputVariableNames;\n\t\t\tvar result = [];\n\n\t\t\tif (this.floatOutput) {\n\t\t\t\tresult.push('  index *= 4');\n\t\t\t}\n\n\t\t\tif (this.graphical) {\n\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = actualColor');\n\t\t\t} else if (this.floatOutput) {\n\t\t\t\tvar channels = ['r', 'g', 'b', 'a'];\n\n\t\t\t\tfor (var i = 0; i < channels.length; ++i) {\n\t\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)');\n\t\t\t\t\tresult.push('  kernel()');\n\n\t\t\t\t\tif (names) {\n\t\t\t\t\t\tresult.push('  gl_FragData[0].' + channels[i] + ' = kernelResult');\n\n\t\t\t\t\t\tfor (var j = 0; j < names.length; ++j) {\n\t\t\t\t\t\t\tresult.push('  gl_FragData[' + (j + 1) + '].' + channels[i] + ' = ' + names[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push('  gl_FragColor.' + channels[i] + ' = kernelResult');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (i < channels.length - 1) {\n\t\t\t\t\t\tresult.push('  index += 1');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (names !== null) {\n\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)');\n\t\t\t\tresult.push('  kernel()');\n\t\t\t\tresult.push('  gl_FragData[0] = encode32(kernelResult)');\n\t\t\t\tfor (var _i2 = 0; _i2 < names.length; _i2++) {\n\t\t\t\t\tresult.push('  gl_FragData[' + (_i2 + 1) + '] = encode32(' + names[_i2] + ')');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = encode32(kernelResult)');\n\t\t\t}\n\n\t\t\treturn this._linesToString(result);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _linesToString\n   *\n   * @param {Array} lines - An Array of strings\n   *\n   * @returns {String} Single combined String, seperated by *\\n*\n   *\n   */\n\n\t}, {\n\t\tkey: '_linesToString',\n\t\tvalue: function _linesToString(lines) {\n\t\t\tif (lines.length > 0) {\n\t\t\t\treturn lines.join(';\\n') + ';\\n';\n\t\t\t} else {\n\t\t\t\treturn '\\n';\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _replaceArtifacts\n   *\n   * @param {String} src - Shader string\n   * @param {Array} map - Variables/Constants associated with shader\n   *\n   */\n\n\t}, {\n\t\tkey: '_replaceArtifacts',\n\t\tvalue: function _replaceArtifacts(src, map) {\n\t\t\treturn src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z])*)__;\\n/g, function (match, artifact) {\n\t\t\t\tif (map.hasOwnProperty(artifact)) {\n\t\t\t\t\treturn map[artifact];\n\t\t\t\t}\n\t\t\t\tthrow 'unhandled artifact ' + artifact;\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _addKernels\n   *\n   * @desc Adds all the sub-kernels supplied with this Kernel instance.\n   *\n   */\n\n\t}, {\n\t\tkey: '_addKernels',\n\t\tvalue: function _addKernels() {\n\t\t\tvar _this2 = this;\n\n\t\t\tvar builder = this.functionBuilder;\n\t\t\tvar gl = this._webGl;\n\n\t\t\tbuilder.addFunctions(this.functions, {\n\t\t\t\tconstants: this.constants,\n\t\t\t\toutput: this.output\n\t\t\t});\n\t\t\tbuilder.addNativeFunctions(this.nativeFunctions);\n\n\t\t\tbuilder.addKernel(this.fnString, {\n\t\t\t\tprototypeOnly: false,\n\t\t\t\tconstants: this.constants,\n\t\t\t\toutput: this.output,\n\t\t\t\tdebug: this.debug,\n\t\t\t\tloopMaxIterations: this.loopMaxIterations,\n\t\t\t\tparamNames: this.paramNames,\n\t\t\t\tparamTypes: this.paramTypes,\n\t\t\t\tconstantTypes: this.constantTypes,\n\t\t\t\tfixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n\t\t\t});\n\n\t\t\tif (this.subKernels !== null) {\n\t\t\t\tvar drawBuffers = this.drawBuffers = gl.getExtension('WEBGL_draw_buffers');\n\t\t\t\tif (!drawBuffers) throw new Error('could not instantiate draw buffers extension');\n\t\t\t\tthis.subKernelOutputVariableNames = [];\n\t\t\t\tthis.subKernels.forEach(function (subKernel) {\n\t\t\t\t\treturn _this2._addSubKernel(subKernel);\n\t\t\t\t});\n\t\t\t} else if (this.subKernelProperties !== null) {\n\t\t\t\tvar _drawBuffers = this.drawBuffers = gl.getExtension('WEBGL_draw_buffers');\n\t\t\t\tif (!_drawBuffers) throw new Error('could not instantiate draw buffers extension');\n\t\t\t\tthis.subKernelOutputVariableNames = [];\n\t\t\t\tObject.keys(this.subKernelProperties).forEach(function (property) {\n\t\t\t\t\treturn _this2._addSubKernel(_this2.subKernelProperties[property]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: '_addSubKernel',\n\t\tvalue: function _addSubKernel(subKernel) {\n\t\t\tthis.functionBuilder.addSubKernel(subKernel, {\n\t\t\t\tprototypeOnly: false,\n\t\t\t\tconstants: this.constants,\n\t\t\t\toutput: this.output,\n\t\t\t\tdebug: this.debug,\n\t\t\t\tloopMaxIterations: this.loopMaxIterations,\n\t\t\t\tfixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n\t\t\t});\n\t\t\tthis.subKernelOutputVariableNames.push(subKernel.name + 'Result');\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getFragShaderString\n   *\n   * @desc Get the fragment shader String.\n   * If the String hasn't been compiled yet,\n   * then this method compiles it as well\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   *\n   * @returns {string} Fragment Shader string\n   *\n   */\n\n\t}, {\n\t\tkey: '_getFragShaderString',\n\t\tvalue: function _getFragShaderString(args) {\n\t\t\tif (this.compiledFragShaderString !== null) {\n\t\t\t\treturn this.compiledFragShaderString;\n\t\t\t}\n\t\t\treturn this.compiledFragShaderString = this._replaceArtifacts(this.constructor.fragShaderString, this._getFragShaderArtifactMap(args));\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getVertShaderString\n   *\n   * @desc Get the vertical shader String\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   *\n   * @returns {string} Vertical Shader string\n   *\n   */\n\n\t}, {\n\t\tkey: '_getVertShaderString',\n\t\tvalue: function _getVertShaderString(args) {\n\t\t\tif (this.compiledVertShaderString !== null) {\n\t\t\t\treturn this.compiledVertShaderString;\n\t\t\t}\n\t\t\treturn this.compiledVertShaderString = this.constructor.vertShaderString;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name toString\n   *\n   * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\n   *\n   */\n\n\t}, {\n\t\tkey: 'toString',\n\t\tvalue: function toString() {\n\t\t\treturn kernelString(this);\n\t\t}\n\t}, {\n\t\tkey: 'addFunction',\n\t\tvalue: function addFunction(fn) {\n\t\t\tthis.functionBuilder.addFunction(null, fn);\n\t\t}\n\t}, {\n\t\tkey: 'destroy',\n\t\tvalue: function destroy(removeCanvasReferences) {\n\t\t\t_get(WebGLKernel.prototype.__proto__ || Object.getPrototypeOf(WebGLKernel.prototype), 'destroy', this).call(this);\n\t\t\tif (this.outputTexture) {\n\t\t\t\tthis._webGl.deleteTexture(this.outputTexture);\n\t\t\t}\n\t\t\tif (this.buffer) {\n\t\t\t\tthis._webGl.deleteBuffer(this.buffer);\n\t\t\t}\n\t\t\tif (this.framebuffer) {\n\t\t\t\tthis._webGl.deleteFramebuffer(this.framebuffer);\n\t\t\t}\n\n\t\t\tif (this.vertShader) {\n\t\t\t\tthis._webGl.deleteShader(this.vertShader);\n\t\t\t}\n\n\t\t\tif (this.fragShader) {\n\t\t\t\tthis._webGl.deleteShader(this.fragShader);\n\t\t\t}\n\n\t\t\tif (this.program) {\n\t\t\t\tthis._webGl.deleteProgram(this.program);\n\t\t\t}\n\n\t\t\tvar keys = Object.keys(this.textureCache);\n\n\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\tvar name = keys[i];\n\t\t\t\tthis._webGl.deleteTexture(this.textureCache[name]);\n\t\t\t}\n\n\t\t\tif (this.subKernelOutputTextures) {\n\t\t\t\tfor (var _i3 = 0; _i3 < this.subKernelOutputTextures.length; _i3++) {\n\t\t\t\t\tthis._webGl.deleteTexture(this.subKernelOutputTextures[_i3]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (removeCanvasReferences) {\n\t\t\t\tvar idx = canvases.indexOf(this._canvas);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tcanvases[idx] = null;\n\t\t\t\t\tmaxTexSizes[idx] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this._webGl;\n\t\t}\n\t}]);\n\n\treturn WebGLKernel;\n}(KernelBase);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/runner.js":
/*!***********************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/runner.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RunnerBase = __webpack_require__(/*! ../runner-base */ \"./node_modules/gpu.js/dist/backend/runner-base.js\");\nvar WebGLKernel = __webpack_require__(/*! ./kernel */ \"./node_modules/gpu.js/dist/backend/web-gl/kernel.js\");\nvar WebGLFunctionBuilder = __webpack_require__(/*! ./function-builder */ \"./node_modules/gpu.js/dist/backend/web-gl/function-builder.js\");\n\nmodule.exports = function (_RunnerBase) {\n\t_inherits(WebGLRunner, _RunnerBase);\n\n\t/**\n  * @constructor WebGLRunner\n  *\n \t * @extends RunnerBase\n  \t * @desc Instantiates a Runner instance for the kernel.\n  * \n  * @param {Object} settings - Settings to instantiate properties in RunnerBase, with given values\n  *\n  */\n\tfunction WebGLRunner(settings) {\n\t\t_classCallCheck(this, WebGLRunner);\n\n\t\tvar _this = _possibleConstructorReturn(this, (WebGLRunner.__proto__ || Object.getPrototypeOf(WebGLRunner)).call(this, new WebGLFunctionBuilder(), settings));\n\n\t\t_this.Kernel = WebGLKernel;\n\t\t_this.kernel = null;\n\t\treturn _this;\n\t}\n\n\t/**\n  * @memberOf WebGLRunner#\n  * @function\n  * @name getMode\n  *\n  * @desc Return the current mode in which gpu.js is executing.\n  * \n  * @returns {String} The current mode; \"cpu\".\n  *\n  */\n\n\n\t_createClass(WebGLRunner, [{\n\t\tkey: 'getMode',\n\t\tvalue: function getMode() {\n\t\t\treturn 'gpu';\n\t\t}\n\t}]);\n\n\treturn WebGLRunner;\n}(RunnerBase);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/runner.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/shader-frag.js":
/*!****************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/shader-frag.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = \"__HEADER__;\\nprecision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\n\\nconst float LOOP_MAX = __LOOP_MAX__;\\n\\n__CONSTANTS__;\\n\\nvarying vec2 vTexCoord;\\n\\nvec4 round(vec4 x) {\\n  return floor(x + 0.5);\\n}\\n\\nfloat round(float x) {\\n  return floor(x + 0.5);\\n}\\n\\nvec2 integerMod(vec2 x, float y) {\\n  vec2 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec3 integerMod(vec3 x, float y) {\\n  vec3 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec4 integerMod(vec4 x, vec4 y) {\\n  vec4 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nfloat integerMod(float x, float y) {\\n  float res = floor(mod(x, y));\\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\\n}\\n\\nint integerMod(int x, int y) {\\n  return x - (y * int(x / y));\\n}\\n\\n__DIVIDE_WITH_INTEGER_CHECK__;\\n\\n// Here be dragons!\\n// DO NOT OPTIMIZE THIS CODE\\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\\nfloat decode32(vec4 rgba) {\\n  __DECODE32_ENDIANNESS__;\\n  rgba *= 255.0;\\n  vec2 gte128;\\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\\n  float res = exp2(round(exponent));\\n  rgba.b = rgba.b - 128.0 * gte128.x;\\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\\n  res *= gte128.y * -2.0 + 1.0;\\n  return res;\\n}\\n\\nvec4 encode32(float f) {\\n  float F = abs(f);\\n  float sign = f < 0.0 ? 1.0 : 0.0;\\n  float exponent = floor(log2(F));\\n  float mantissa = (exp2(-exponent) * F);\\n  // exponent += floor(log2(mantissa));\\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\\n  rgba.rg = integerMod(rgba.rg, 256.0);\\n  rgba.b = integerMod(rgba.b, 128.0);\\n  rgba.a = exponent*0.5 + 63.5;\\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\\n  rgba = floor(rgba);\\n  rgba *= 0.003921569; // 1/255\\n  __ENCODE32_ENDIANNESS__;\\n  return rgba;\\n}\\n// Dragons end here\\n\\nfloat decode(vec4 rgba, int x, int bitRatio) {\\n  if (bitRatio == 1) {\\n    return decode32(rgba);\\n  }\\n  __DECODE32_ENDIANNESS__;\\n  int channel = integerMod(x, bitRatio);\\n  if (bitRatio == 4) {\\n    if (channel == 0) return rgba.r * 255.0;\\n    if (channel == 1) return rgba.g * 255.0;\\n    if (channel == 2) return rgba.b * 255.0;\\n    if (channel == 3) return rgba.a * 255.0;\\n  }\\n  else {\\n    if (channel == 0) return rgba.r * 255.0 + rgba.g * 65280.0;\\n    if (channel == 1) return rgba.b * 255.0 + rgba.a * 65280.0;\\n  }\\n}\\n\\nint index;\\nivec3 threadId;\\n\\nivec3 indexTo3D(int idx, ivec3 texDim) {\\n  int z = int(idx / (texDim.x * texDim.y));\\n  idx -= z * int(texDim.x * texDim.y);\\n  int y = int(idx / texDim.x);\\n  int x = int(integerMod(idx, texDim.x));\\n  return ivec3(x, y, z);\\n}\\n\\nfloat get(sampler2D tex, ivec2 texSize, ivec3 texDim, int bitRatio,  int z, int y, int x) {\\n  ivec3 xyz = ivec3(x, y, z);\\n  __GET_WRAPAROUND__;\\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\\n  __GET_TEXTURE_CHANNEL__;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  __GET_TEXTURE_INDEX__;\\n  vec4 texel = texture2D(tex, st / vec2(texSize));\\n  __GET_RESULT__;\\n  \\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  ivec3 xyz = ivec3(x, y, z);\\n  __GET_WRAPAROUND__;\\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\\n  __GET_TEXTURE_CHANNEL__;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  __GET_TEXTURE_INDEX__;\\n  return texture2D(tex, st / vec2(texSize));\\n}\\n\\nfloat get(sampler2D tex, ivec2 texSize, ivec3 texDim, int bitRatio, int y, int x) {\\n  return get(tex, texSize, texDim, bitRatio, int(0), y, x);\\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int y, int x) {\\n  return getImage2D(tex, texSize, texDim, int(0), y, x);\\n}\\n\\nfloat get(sampler2D tex, ivec2 texSize, ivec3 texDim, int bitRatio, int x) {\\n  return get(tex, texSize, texDim, bitRatio, int(0), int(0), x);\\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int x) {\\n  return getImage2D(tex, texSize, texDim, int(0), int(0), x);\\n}\\n\\n\\nvec4 actualColor;\\nvoid color(float r, float g, float b, float a) {\\n  actualColor = vec4(r,g,b,a);\\n}\\n\\nvoid color(float r, float g, float b) {\\n  color(r,g,b,1.0);\\n}\\n\\nvoid color(sampler2D image) {\\n  actualColor = texture2D(image, vTexCoord);\\n}\\n\\n__MAIN_PARAMS__;\\n__MAIN_CONSTANTS__;\\n__KERNEL__;\\n\\nvoid main(void) {\\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\\n  __MAIN_RESULT__;\\n}\";\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/shader-frag.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/shader-vert.js":
/*!****************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/shader-vert.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = \"precision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\n\\nattribute vec2 aPos;\\nattribute vec2 aTexCoord;\\n\\nvarying vec2 vTexCoord;\\nuniform vec2 ratio;\\n\\nvoid main(void) {\\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\\n  vTexCoord = aTexCoord;\\n}\";\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/shader-vert.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl/validator-kernel.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl/validator-kernel.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar WebGLKernel = __webpack_require__(/*! ./kernel */ \"./node_modules/gpu.js/dist/backend/web-gl/kernel.js\");\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\n\n/**\n * @class WebGLValidatorKernel\n *\n * @desc Helper class for WebGLKernel to validate texture size and dimensions.\n *\n */\nmodule.exports = function (_WebGLKernel) {\n\t_inherits(WebGLValidatorKernel, _WebGLKernel);\n\n\tfunction WebGLValidatorKernel() {\n\t\t_classCallCheck(this, WebGLValidatorKernel);\n\n\t\treturn _possibleConstructorReturn(this, (WebGLValidatorKernel.__proto__ || Object.getPrototypeOf(WebGLValidatorKernel)).apply(this, arguments));\n\t}\n\n\t_createClass(WebGLValidatorKernel, [{\n\t\tkey: 'validateOptions',\n\n\n\t\t/** \n   * @memberOf WebGLValidatorKernel#\n   * @function\n   * @name validateOptions\n   *\n   */\n\t\tvalue: function validateOptions() {\n\t\t\tthis.texSize = utils.dimToTexSize({\n\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t}, this.output, true);\n\t\t}\n\t}]);\n\n\treturn WebGLValidatorKernel;\n}(WebGLKernel);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl/validator-kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl2/function-builder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl2/function-builder.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar FunctionBuilderBase = __webpack_require__(/*! ../function-builder-base */ \"./node_modules/gpu.js/dist/backend/function-builder-base.js\");\nvar WebGL2FunctionNode = __webpack_require__(/*! ./function-node */ \"./node_modules/gpu.js/dist/backend/web-gl2/function-node.js\");\n\n/**\n * @class WebGLFunctionBuilder\n *\n * @extends FunctionBuilderBase\n *\n * @desc Builds webGl functions (shaders) from JavaScript function Strings\n *\n */\nmodule.exports = function (_FunctionBuilderBase) {\n  _inherits(WebGL2FunctionBuilder, _FunctionBuilderBase);\n\n  function WebGL2FunctionBuilder() {\n    _classCallCheck(this, WebGL2FunctionBuilder);\n\n    var _this = _possibleConstructorReturn(this, (WebGL2FunctionBuilder.__proto__ || Object.getPrototypeOf(WebGL2FunctionBuilder)).call(this));\n\n    _this.Node = WebGL2FunctionNode;\n    return _this;\n  }\n\n  return WebGL2FunctionBuilder;\n}(FunctionBuilderBase);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl2/function-builder.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl2/function-node.js":
/*!*******************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl2/function-node.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar WebGLFunctionNode = __webpack_require__(/*! ../web-gl/function-node */ \"./node_modules/gpu.js/dist/backend/web-gl/function-node.js\");\nvar DECODE32_ENCODE32 = /decode32\\(\\s+encode32\\(/g;\nvar ENCODE32_DECODE32 = /encode32\\(\\s+decode32\\(/g;\n\n/** \n * @class WebGL2FunctionNode\n *\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to generate its respective webGL code.\n *\n * @extends WebGLFunctionNode\n *\n * @returns the converted webGL function string\n *\n */\nmodule.exports = function (_WebGLFunctionNode) {\n\t_inherits(WebGL2FunctionNode, _WebGLFunctionNode);\n\n\tfunction WebGL2FunctionNode() {\n\t\t_classCallCheck(this, WebGL2FunctionNode);\n\n\t\treturn _possibleConstructorReturn(this, (WebGL2FunctionNode.__proto__ || Object.getPrototypeOf(WebGL2FunctionNode)).apply(this, arguments));\n\t}\n\n\t_createClass(WebGL2FunctionNode, [{\n\t\tkey: 'generate',\n\t\tvalue: function generate() {\n\t\t\tif (this.debug) {\n\t\t\t\tconsole.log(this);\n\t\t\t}\n\t\t\tif (this.prototypeOnly) {\n\t\t\t\treturn this.astFunctionPrototype(this.getJsAST(), []).join('').trim();\n\t\t\t} else {\n\t\t\t\tthis.functionStringArray = this.astGeneric(this.getJsAST(), []);\n\t\t\t}\n\t\t\tthis.functionString = webGlRegexOptimize(this.functionStringArray.join('').trim());\n\t\t\treturn this.functionString;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2FunctionNode#\n   * @function\n   * @name astIdentifierExpression\n   *\n   * @desc Parses the abstract syntax tree for *identifier* expression\n   *\n   * @param {Object} idtNode - An ast Node\n   * @param {Array} retArr - return array string\n   *\n   * @returns {Array} the append retArr\n   */\n\n\t}, {\n\t\tkey: 'astIdentifierExpression',\n\t\tvalue: function astIdentifierExpression(idtNode, retArr) {\n\t\t\tif (idtNode.type !== 'Identifier') {\n\t\t\t\tthrow this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n\t\t\t}\n\n\t\t\t// do we need to cast addressing vales to float?\n\t\t\tvar castFloat = !this.isState('in-get-call-parameters');\n\n\t\t\tswitch (idtNode.name) {\n\t\t\t\tcase 'gpu_threadX':\n\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\tretArr.push('threadId.x');\n\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_threadY':\n\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\tretArr.push('threadId.y');\n\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_threadZ':\n\t\t\t\t\tcastFloat && retArr.push('float(');\n\t\t\t\t\tretArr.push('threadId.z');\n\t\t\t\t\tcastFloat && retArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputX':\n\t\t\t\t\tretArr.push('uOutputDim.x');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputY':\n\t\t\t\t\tretArr.push('uOutputDim.y');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpu_outputZ':\n\t\t\t\t\tretArr.push('uOutputDim.z');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Infinity':\n\t\t\t\t\tretArr.push('intBitsToFloat(2139095039)');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar userParamName = this.getUserParamName(idtNode.name);\n\t\t\t\t\tif (userParamName !== null) {\n\t\t\t\t\t\tthis.pushParameter(retArr, 'user_' + userParamName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.pushParameter(retArr, 'user_' + idtNode.name);\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn retArr;\n\t\t}\n\t}]);\n\n\treturn WebGL2FunctionNode;\n}(WebGLFunctionNode);\n\n/**\n * @ignore\n * @function\n * @name webgl_regex_optimize\n *\n * @desc [INTERNAL] Takes the near final webgl function string, and do regex search and replacments.\n * For voodoo optimize out the following: \n *\n * - decode32(encode32( <br>\n * - encode32(decode32( <br>\n *\n * @param {String} inStr - The webGl function String\n *\n */\nfunction webGlRegexOptimize(inStr) {\n\treturn inStr.replace(DECODE32_ENCODE32, '((').replace(ENCODE32_DECODE32, '((');\n}\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl2/function-node.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl2/kernel.js":
/*!************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl2/kernel.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar WebGLKernel = __webpack_require__(/*! ../web-gl/kernel */ \"./node_modules/gpu.js/dist/backend/web-gl/kernel.js\");\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar Texture = __webpack_require__(/*! ../../core/texture */ \"./node_modules/gpu.js/dist/core/texture.js\");\nvar fragShaderString = __webpack_require__(/*! ./shader-frag */ \"./node_modules/gpu.js/dist/backend/web-gl2/shader-frag.js\");\nvar vertShaderString = __webpack_require__(/*! ./shader-vert */ \"./node_modules/gpu.js/dist/backend/web-gl2/shader-vert.js\");\n\nmodule.exports = function (_WebGLKernel) {\n\t_inherits(WebGL2Kernel, _WebGLKernel);\n\n\tfunction WebGL2Kernel() {\n\t\t_classCallCheck(this, WebGL2Kernel);\n\n\t\treturn _possibleConstructorReturn(this, (WebGL2Kernel.__proto__ || Object.getPrototypeOf(WebGL2Kernel)).apply(this, arguments));\n\t}\n\n\t_createClass(WebGL2Kernel, [{\n\t\tkey: 'initWebGl',\n\t\tvalue: function initWebGl() {\n\t\t\treturn utils.initWebGl2(this.getCanvas());\n\t\t}\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name validateOptions\n   *\n   * @desc Validate options related to Kernel, such as\n   * floatOutputs and Textures, texSize, output,\n   * graphical output.\n   *\n   */\n\n\t}, {\n\t\tkey: 'validateOptions',\n\t\tvalue: function validateOptions() {\n\t\t\tvar isFloatReadPixel = utils.isFloatReadPixelsSupportedWebGL2();\n\t\t\tif (this.floatOutput === true && this.floatOutputForce !== true && !isFloatReadPixel) {\n\t\t\t\tthrow new Error('Float texture outputs are not supported on this browser');\n\t\t\t} else if (this.floatTextures === undefined) {\n\t\t\t\tthis.floatTextures = true;\n\t\t\t\tthis.floatOutput = isFloatReadPixel;\n\t\t\t}\n\n\t\t\tvar hasIntegerDivisionBug = utils.hasIntegerDivisionAccuracyBug();\n\t\t\tif (this.fixIntegerDivisionAccuracy === null) {\n\t\t\t\tthis.fixIntegerDivisionAccuracy = hasIntegerDivisionBug;\n\t\t\t} else if (this.fixIntegerDivisionAccuracy && !hasIntegerDivisionBug) {\n\t\t\t\tthis.fixIntegerDivisionAccuracy = false;\n\t\t\t}\n\n\t\t\tutils.checkOutput(this.output);\n\n\t\t\tif (!this.output || this.output.length === 0) {\n\t\t\t\tif (arguments.length !== 1) {\n\t\t\t\t\tthrow new Error('Auto output only supported for kernels with only one input');\n\t\t\t\t}\n\n\t\t\t\tvar argType = utils.getArgumentType(arguments[0]);\n\t\t\t\tif (argType === 'Array') {\n\t\t\t\t\tthis.output = utils.getDimensions(argType);\n\t\t\t\t} else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n\t\t\t\t\tthis.output = arguments[0].output;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Auto output not supported for input type: ' + argType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.texSize = utils.dimToTexSize({\n\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t}, this.output, true);\n\n\t\t\tif (this.graphical) {\n\t\t\t\tif (this.output.length !== 2) {\n\t\t\t\t\tthrow new Error('Output must have 2 dimensions on graphical mode');\n\t\t\t\t}\n\n\t\t\t\tif (this.floatOutput) {\n\t\t\t\t\tthis.floatOutput = false;\n\t\t\t\t\tconsole.warn('Cannot use graphical mode and float output at the same time');\n\t\t\t\t}\n\n\t\t\t\tthis.texSize = utils.clone(this.output);\n\t\t\t} else if (this.floatOutput === undefined) {\n\t\t\t\tthis.floatOutput = true;\n\t\t\t}\n\n\t\t\tif (this.floatOutput || this.floatOutputForce) {\n\t\t\t\tthis._webGl.getExtension('EXT_color_buffer_float');\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name run\n   *\n   * @desc Run the kernel program, and send the output to renderOutput\n   *\n   * <p> This method calls a helper method *renderOutput* to return the result. </p>\n   *\n   * @returns {Object|Undefined} Result The final output of the program, as float, and as Textures for reuse.\n   *\n   *\n   */\n\n\t}, {\n\t\tkey: 'run',\n\t\tvalue: function run() {\n\t\t\tif (this.program === null) {\n\t\t\t\tthis.build.apply(this, arguments);\n\t\t\t}\n\t\t\tvar paramNames = this.paramNames;\n\t\t\tvar paramTypes = this.paramTypes;\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar gl = this._webGl;\n\n\t\t\tgl.useProgram(this.program);\n\t\t\tgl.scissor(0, 0, texSize[0], texSize[1]);\n\n\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\tthis.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));\n\t\t\t\tthis.setUniform2iv('uTexSize', texSize);\n\t\t\t}\n\n\t\t\tthis.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\n\n\t\t\tthis.argumentsLength = 0;\n\t\t\tfor (var texIndex = 0; texIndex < paramNames.length; texIndex++) {\n\t\t\t\tthis._addArgument(arguments[texIndex], paramTypes[texIndex], paramNames[texIndex]);\n\t\t\t}\n\n\t\t\tif (this.graphical) {\n\t\t\t\tif (this.outputToTexture) {\n\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\t\t\t\tif (!this.outputTexture || this.outputImmutable) {\n\t\t\t\t\t\tthis._setupOutputTexture();\n\t\t\t\t\t}\n\t\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\t\t\treturn new Texture(this.outputTexture, texSize, this.threadDim, this.output, this._webGl, 'ArrayTexture(4)');\n\t\t\t\t}\n\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\t\tif (this.outputImmutable) {\n\t\t\t\tthis._setupOutputTexture();\n\t\t\t}\n\t\t\tvar outputTexture = this.outputTexture;\n\n\t\t\tif (this.subKernelOutputVariableNames !== null) {\n\t\t\t\tif (this.outputImmutable) {\n\t\t\t\t\tthis.subKernelOutputTextures = [];\n\t\t\t\t\tthis._setupSubOutputTextures(this.subKernelOutputVariableNames.length);\n\t\t\t\t}\n\t\t\t\tgl.drawBuffers(this.drawBuffersMap);\n\t\t\t}\n\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n\t\t\tif (this.subKernelOutputTextures !== null) {\n\t\t\t\tif (this.subKernels !== null) {\n\t\t\t\t\tvar output = [];\n\t\t\t\t\toutput.result = this.renderOutput(outputTexture);\n\t\t\t\t\tfor (var i = 0; i < this.subKernels.length; i++) {\n\t\t\t\t\t\toutput.push(new Texture(this.subKernelOutputTextures[i], texSize, this.threadDim, this.output, this._webGl));\n\t\t\t\t\t}\n\t\t\t\t\treturn output;\n\t\t\t\t} else if (this.subKernelProperties !== null) {\n\t\t\t\t\tvar _output = {\n\t\t\t\t\t\tresult: this.renderOutput(outputTexture)\n\t\t\t\t\t};\n\t\t\t\t\tvar _i = 0;\n\t\t\t\t\tfor (var p in this.subKernelProperties) {\n\t\t\t\t\t\tif (!this.subKernelProperties.hasOwnProperty(p)) continue;\n\t\t\t\t\t\t_output[p] = new Texture(this.subKernelOutputTextures[_i], texSize, this.threadDim, this.output, this._webGl);\n\t\t\t\t\t\t_i++;\n\t\t\t\t\t}\n\t\t\t\t\treturn _output;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.renderOutput(outputTexture);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name getOutputTexture\n   *\n   * @desc This return defined outputTexture, which is setup in .build(), or if immutable, is defined in .run()\n   *\n   * @returns {Object} Output Texture Cache\n   *\n   */\n\n\t}, {\n\t\tkey: 'getOutputTexture',\n\t\tvalue: function getOutputTexture() {\n\t\t\treturn this.outputTexture;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _setupOutputTexture\n   * @private\n   *\n   * @desc Setup and replace output texture\n   */\n\n\t}, {\n\t\tkey: '_setupOutputTexture',\n\t\tvalue: function _setupOutputTexture() {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar texture = this.outputTexture = this._webGl.createTexture();\n\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.paramNames.length);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\tif (this.floatOutput) {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t\t}\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @param length\n   * @private\n   *\n   * @desc Setup and replace sub-output textures\n   */\n\n\t}, {\n\t\tkey: '_setupSubOutputTextures',\n\t\tvalue: function _setupSubOutputTextures(length) {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar texSize = this.texSize;\n\t\t\tvar drawBuffersMap = this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n\t\t\tvar textures = this.subKernelOutputTextures = [];\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar texture = this._webGl.createTexture();\n\t\t\t\ttextures.push(texture);\n\t\t\t\tdrawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.paramNames.length + i);\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\tif (this.floatOutput) {\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t} else {\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t\t\t}\n\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _addArgument\n   *\n   * @desc Adds kernel parameters to the Argument Texture,\n   * binding it to the webGl instance, etc.\n   *\n   * @param {Array|Texture|Number} value - The actual argument supplied to the kernel\n   * @param {String} type - Type of the argument\n   * @param {String} name - Name of the argument\n   *\n   */\n\n\t}, {\n\t\tkey: '_addArgument',\n\t\tvalue: function _addArgument(value, type, name) {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar argumentTexture = this.getArgumentTexture(name);\n\t\t\tif (value instanceof Texture) {\n\t\t\t\ttype = value.type;\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Array':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar dim = utils.getDimensions(value, true);\n\t\t\t\t\t\tvar size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, dim);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar length = size[0] * size[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer = this._formatArrayTransfer(value, length),\n\t\t\t\t\t\t    valuesFlat = _formatArrayTransfer.valuesFlat,\n\t\t\t\t\t\t    bitRatio = _formatArrayTransfer.bitRatio;\n\n\t\t\t\t\t\tvar buffer = void 0;\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, size[0], size[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0] / bitRatio, size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', dim);\n\t\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', size);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('user_' + name + 'BitRatio', bitRatio);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Integer':\n\t\t\t\tcase 'Float':\n\t\t\t\tcase 'Number':\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setUniform1f('user_' + name, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Input':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar input = value;\n\t\t\t\t\t\tvar _dim = input.size;\n\t\t\t\t\t\tvar _size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, _dim);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar _length = _size[0] * _size[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer2 = this._formatArrayTransfer(value.value, _length),\n\t\t\t\t\t\t    _valuesFlat = _formatArrayTransfer2.valuesFlat,\n\t\t\t\t\t\t    _bitRatio = _formatArrayTransfer2.bitRatio;\n\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, _size[0], _size[1], 0, gl.RGBA, gl.FLOAT, inputArray);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _buffer = new Uint8Array(_valuesFlat.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, _size[0] / _bitRatio, _size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, _buffer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', _dim);\n\t\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', _size);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('user_' + name + 'BitRatio', _bitRatio);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputImage = value;\n\t\t\t\t\t\tvar _dim2 = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\t\tvar _size2 = [inputImage.width, inputImage.height];\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\t\tvar mipLevel = 0; // the largest mip\n\t\t\t\t\t\tvar internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\t\tvar srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\t\tvar srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, srcFormat, srcType, inputImage);\n\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', _dim2);\n\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', _size2);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputImages = value;\n\t\t\t\t\t\tvar _dim3 = [inputImages[0].width, inputImages[0].height, inputImages.length];\n\t\t\t\t\t\tvar _size3 = [inputImages[0].width, inputImages[0].height];\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D_ARRAY, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t\t// Upload the images into the texture.\n\t\t\t\t\t\tvar _mipLevel = 0; // the largest mip\n\t\t\t\t\t\tvar _internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\t\tvar width = inputImages[0].width;\n\t\t\t\t\t\tvar height = inputImages[0].height;\n\t\t\t\t\t\tvar textureDepth = inputImages.length;\n\t\t\t\t\t\tvar border = 0;\n\t\t\t\t\t\tvar _srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\t\tvar _srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\t\tgl.texImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel, _internalFormat, width, height, textureDepth, border, _srcFormat, _srcType, null);\n\t\t\t\t\t\tfor (var i = 0; i < inputImages.length; i++) {\n\t\t\t\t\t\t\tvar xOffset = 0;\n\t\t\t\t\t\t\tvar yOffset = 0;\n\t\t\t\t\t\t\tvar imageDepth = 1;\n\t\t\t\t\t\t\tgl.texSubImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel, xOffset, yOffset, i, inputImages[i].width, inputImages[i].height, imageDepth, _srcFormat, _srcType, inputImages[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', _dim3);\n\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', _size3);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputTexture = value;\n\t\t\t\t\t\tvar _dim4 = inputTexture.dimensions;\n\t\t\t\t\t\tvar _size4 = inputTexture.size;\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\t\tthis.setUniform3iv('user_' + name + 'Dim', _dim4);\n\t\t\t\t\t\tthis.setUniform2iv('user_' + name + 'Size', _size4);\n\t\t\t\t\t\tthis.setUniform1i('user_' + name + 'BitRatio', 1); // always float32\n\t\t\t\t\t\tthis.setUniform1i('user_' + name, this.argumentsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Input type not supported (WebGL): ' + value);\n\t\t\t}\n\t\t\tthis.argumentsLength++;\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _getMainConstantsString\n   *\n   */\n\n\t}, {\n\t\tkey: '_getMainConstantsString',\n\t\tvalue: function _getMainConstantsString() {\n\t\t\tvar result = [];\n\t\t\tif (this.constants) {\n\t\t\t\tfor (var name in this.constants) {\n\t\t\t\t\tif (!this.constants.hasOwnProperty(name)) continue;\n\t\t\t\t\tvar value = this.constants[name];\n\t\t\t\t\tvar type = utils.getArgumentType(value);\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\t\tresult.push('const float constants_' + name + ' = ' + parseInt(value) + '.0');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Float':\n\t\t\t\t\t\t\tresult.push('const float constants_' + name + ' = ' + parseFloat(value));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tcase 'Input':\n\t\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t\t\tresult.push('uniform highp sampler2D constants_' + name, 'uniform highp ivec2 constants_' + name + 'Size', 'uniform highp ivec3 constants_' + name + 'Dim', 'uniform highp int constants_' + name + 'BitRatio');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t\t\tresult.push('uniform highp sampler2DArray constants_' + name, 'uniform highp ivec2 constants_' + name + 'Size', 'uniform highp ivec3 constants_' + name + 'Dim', 'uniform highp int constants_' + name + 'BitRatio');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error('Unsupported constant ' + name + ' type ' + type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._linesToString(result);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGLKernel#\n   * @function\n   * @name _addConstant\n   *\n   * @desc Adds kernel parameters to the Argument Texture,\n   * binding it to the webGl instance, etc.\n   *\n   * @param {Array|Texture|Number} value - The actual argument supplied to the kernel\n   * @param {String} type - Type of the argument\n   * @param {String} name - Name of the argument\n   *\n   */\n\n\t}, {\n\t\tkey: '_addConstant',\n\t\tvalue: function _addConstant(value, type, name) {\n\t\t\tvar gl = this._webGl;\n\t\t\tvar argumentTexture = this.getArgumentTexture(name);\n\t\t\tif (value instanceof Texture) {\n\t\t\t\ttype = value.type;\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Array':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar dim = utils.getDimensions(value, true);\n\t\t\t\t\t\tvar size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, dim);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar length = size[0] * size[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer3 = this._formatArrayTransfer(value, length),\n\t\t\t\t\t\t    valuesFlat = _formatArrayTransfer3.valuesFlat,\n\t\t\t\t\t\t    bitRatio = _formatArrayTransfer3.bitRatio;\n\n\t\t\t\t\t\tvar buffer = void 0;\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0], size[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0] / bitRatio, size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', dim);\n\t\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', size);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name + 'BitRatio', bitRatio);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Input':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar input = value;\n\t\t\t\t\t\tvar _dim5 = input.size;\n\t\t\t\t\t\tvar _size5 = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, _dim5);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tvar _length2 = _size5[0] * _size5[1];\n\n\t\t\t\t\t\tvar _formatArrayTransfer4 = this._formatArrayTransfer(value.value, _length2),\n\t\t\t\t\t\t    _valuesFlat2 = _formatArrayTransfer4.valuesFlat,\n\t\t\t\t\t\t    _bitRatio2 = _formatArrayTransfer4.bitRatio;\n\n\t\t\t\t\t\tif (this.floatTextures) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, _size5[0], _size5[1], 0, gl.RGBA, gl.FLOAT, inputArray);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _buffer2 = new Uint8Array(_valuesFlat2.buffer);\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, _size5[0] / _bitRatio2, _size5[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, _buffer2);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', _dim5);\n\t\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', _size5);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name + 'BitRatio', _bitRatio2);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputImage = value;\n\t\t\t\t\t\tvar _dim6 = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\t\tvar _size6 = [inputImage.width, inputImage.height];\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\t\tvar mipLevel = 0; // the largest mip\n\t\t\t\t\t\tvar internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\t\tvar srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\t\tvar srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, srcFormat, srcType, inputImage);\n\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', _dim6);\n\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', _size6);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputImages = value;\n\t\t\t\t\t\tvar _dim7 = [inputImages[0].width, inputImages[0].height, inputImages.length];\n\t\t\t\t\t\tvar _size7 = [inputImages[0].width, inputImages[0].height];\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D_ARRAY, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t\t// Upload the images into the texture.\n\t\t\t\t\t\tvar _mipLevel2 = 0; // the largest mip\n\t\t\t\t\t\tvar _internalFormat2 = gl.RGBA; // format we want in the texture\n\t\t\t\t\t\tvar width = inputImages[0].width;\n\t\t\t\t\t\tvar height = inputImages[0].height;\n\t\t\t\t\t\tvar textureDepth = inputImages.length;\n\t\t\t\t\t\tvar border = 0;\n\t\t\t\t\t\tvar _srcFormat2 = gl.RGBA; // format of data we are supplying\n\t\t\t\t\t\tvar _srcType2 = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\t\tgl.texImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel2, _internalFormat2, width, height, textureDepth, border, _srcFormat2, _srcType2, null);\n\t\t\t\t\t\tfor (var i = 0; i < inputImages.length; i++) {\n\t\t\t\t\t\t\tvar xOffset = 0;\n\t\t\t\t\t\t\tvar yOffset = 0;\n\t\t\t\t\t\t\tvar imageDepth = 1;\n\t\t\t\t\t\t\tgl.texSubImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel2, xOffset, yOffset, i, inputImages[i].width, inputImages[i].height, imageDepth, _srcFormat2, _srcType2, inputImages[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', _dim7);\n\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', _size7);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inputTexture = value;\n\t\t\t\t\t\tvar _dim8 = inputTexture.dimensions;\n\t\t\t\t\t\tvar _size8 = inputTexture.size;\n\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\t\tthis.setUniform3iv('constants_' + name + 'Dim', _dim8);\n\t\t\t\t\t\tthis.setUniform2iv('constants_' + name + 'Size', _size8);\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name + 'BitRatio', 1); // aways float32\n\t\t\t\t\t\tthis.setUniform1i('constants_' + name, this.constantsLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 'Integer':\n\t\t\t\tcase 'Float':\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Input type not supported (WebGL): ' + value);\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getGetResultString\n   *\n   */\n\n\t}, {\n\t\tkey: '_getGetResultString',\n\t\tvalue: function _getGetResultString() {\n\t\t\tif (!this.floatTextures) {\n\t\t\t\treturn '  return decode(texel, x, bitRatio);';\n\t\t\t}\n\t\t\treturn '  return texel[channel];';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getHeaderString\n   *\n   * @desc Get the header string for the program.\n   * This returns an empty string if no sub-kernels are defined.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getHeaderString',\n\t\tvalue: function _getHeaderString() {\n\t\t\treturn '';\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getTextureCoordinate\n   *\n   * @desc Get texture coordinate string for the program\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getTextureCoordinate',\n\t\tvalue: function _getTextureCoordinate() {\n\t\t\tvar names = this.subKernelOutputVariableNames;\n\t\t\tif (names === null || names.length < 1) {\n\t\t\t\treturn 'in highp vec2 vTexCoord;\\n';\n\t\t\t} else {\n\t\t\t\treturn 'out highp vec2 vTexCoord;\\n';\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getMainParamsString\n   *\n   * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getMainParamsString',\n\t\tvalue: function _getMainParamsString(args) {\n\t\t\tvar result = [];\n\t\t\tvar paramTypes = this.paramTypes;\n\t\t\tvar paramNames = this.paramNames;\n\t\t\tfor (var i = 0; i < paramNames.length; i++) {\n\t\t\t\tvar param = args[i];\n\t\t\t\tvar paramName = paramNames[i];\n\t\t\t\tvar paramType = paramTypes[i];\n\t\t\t\tif (this.hardcodeConstants) {\n\t\t\t\t\tif (paramType === 'Array' || paramType === 'NumberTexture' || paramType === 'ArrayTexture(4)') {\n\t\t\t\t\t\tvar paramDim = utils.getDimensions(param, true);\n\t\t\t\t\t\tvar paramSize = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t\t\t\t}, paramDim);\n\n\t\t\t\t\t\tresult.push('uniform highp sampler2D user_' + paramName, 'highp ivec2 user_' + paramName + 'Size = ivec2(' + paramSize[0] + ', ' + paramSize[1] + ')', 'highp ivec3 user_' + paramName + 'Dim = ivec3(' + paramDim[0] + ', ' + paramDim[1] + ', ' + paramDim[2] + ')', 'uniform highp int user_' + paramName + 'BitRatio');\n\t\t\t\t\t} else if (paramType === 'Integer') {\n\t\t\t\t\t\tresult.push('highp float user_' + paramName + ' = ' + param + '.0');\n\t\t\t\t\t} else if (paramType === 'Float') {\n\t\t\t\t\t\tresult.push('highp float user_' + paramName + ' = ' + param);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (paramType === 'Array' || paramType === 'NumberTexture' || paramType === 'ArrayTexture(4)' || paramType === 'Input' || paramType === 'HTMLImage') {\n\t\t\t\t\t\tresult.push('uniform highp sampler2D user_' + paramName, 'uniform highp ivec2 user_' + paramName + 'Size', 'uniform highp ivec3 user_' + paramName + 'Dim');\n\t\t\t\t\t\tif (paramType !== 'HTMLImage') {\n\t\t\t\t\t\t\tresult.push('uniform highp int user_' + paramName + 'BitRatio');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (paramType === 'HTMLImageArray') {\n\t\t\t\t\t\tresult.push('uniform highp sampler2DArray user_' + paramName, 'uniform highp ivec2 user_' + paramName + 'Size', 'uniform highp ivec3 user_' + paramName + 'Dim');\n\t\t\t\t\t} else if (paramType === 'Integer' || paramType === 'Float') {\n\t\t\t\t\t\tresult.push('uniform float user_' + paramName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._linesToString(result);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getKernelString\n   *\n   * @desc Get Kernel program string (in *glsl*) for a kernel.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getKernelString',\n\t\tvalue: function _getKernelString() {\n\t\t\tvar result = [];\n\t\t\tvar names = this.subKernelOutputVariableNames;\n\t\t\tif (names !== null) {\n\t\t\t\tresult.push('float kernelResult = 0.0');\n\t\t\t\tresult.push('layout(location = 0) out vec4 data0');\n\t\t\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\t\t\tresult.push('float ' + names[i] + ' = 0.0', 'layout(location = ' + (i + 1) + ') out vec4 data' + (i + 1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.push('out vec4 data0');\n\t\t\t\tresult.push('float kernelResult = 0.0');\n\t\t\t}\n\n\t\t\treturn this._linesToString(result) + this.functionBuilder.getPrototypeString('kernel');\n\t\t}\n\n\t\t/**\n   *\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getMainResultString\n   *\n   * @desc Get main result string with checks for floatOutput, graphical, subKernelsOutputs, etc.\n   *\n   * @returns {String} result\n   *\n   */\n\n\t}, {\n\t\tkey: '_getMainResultString',\n\t\tvalue: function _getMainResultString() {\n\t\t\tvar names = this.subKernelOutputVariableNames;\n\t\t\tvar result = [];\n\n\t\t\tif (this.floatOutput) {\n\t\t\t\tresult.push('  index *= 4');\n\t\t\t}\n\n\t\t\tif (this.graphical) {\n\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = actualColor');\n\t\t\t} else if (this.floatOutput) {\n\t\t\t\tvar channels = ['r', 'g', 'b', 'a'];\n\n\t\t\t\tfor (var i = 0; i < channels.length; ++i) {\n\t\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)');\n\t\t\t\t\tresult.push('  kernel()');\n\n\t\t\t\t\tif (names) {\n\t\t\t\t\t\tresult.push('  data0.' + channels[i] + ' = kernelResult');\n\n\t\t\t\t\t\tfor (var j = 0; j < names.length; ++j) {\n\t\t\t\t\t\t\tresult.push('  data' + (j + 1) + '.' + channels[i] + ' = ' + names[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push('  data0.' + channels[i] + ' = kernelResult');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (i < channels.length - 1) {\n\t\t\t\t\t\tresult.push('  index += 1');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (names !== null) {\n\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)');\n\t\t\t\tresult.push('  kernel()');\n\t\t\t\tresult.push('  data0 = encode32(kernelResult)');\n\t\t\t\tfor (var _i2 = 0; _i2 < names.length; _i2++) {\n\t\t\t\t\tresult.push('  data' + (_i2 + 1) + ' = encode32(' + names[_i2] + ')');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = encode32(kernelResult)');\n\t\t\t}\n\n\t\t\treturn this._linesToString(result);\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _addKernels\n   *\n   * @desc Adds all the sub-kernels supplied with this Kernel instance.\n   *\n   */\n\n\t}, {\n\t\tkey: '_addKernels',\n\t\tvalue: function _addKernels() {\n\t\t\tvar _this2 = this;\n\n\t\t\tvar builder = this.functionBuilder;\n\t\t\tvar gl = this._webGl;\n\n\t\t\tbuilder.addFunctions(this.functions, {\n\t\t\t\tconstants: this.constants,\n\t\t\t\toutput: this.output\n\t\t\t});\n\t\t\tbuilder.addNativeFunctions(this.nativeFunctions);\n\n\t\t\tbuilder.addKernel(this.fnString, {\n\t\t\t\tprototypeOnly: false,\n\t\t\t\tconstants: this.constants,\n\t\t\t\toutput: this.output,\n\t\t\t\tdebug: this.debug,\n\t\t\t\tloopMaxIterations: this.loopMaxIterations,\n\t\t\t\tparamNames: this.paramNames,\n\t\t\t\tparamTypes: this.paramTypes,\n\t\t\t\tconstantTypes: this.constantTypes,\n\t\t\t\tfixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n\t\t\t});\n\n\t\t\tif (this.subKernels !== null) {\n\t\t\t\tthis.subKernelOutputTextures = [];\n\t\t\t\tthis.subKernelOutputVariableNames = [];\n\t\t\t\tthis.subKernels.forEach(function (subKernel) {\n\t\t\t\t\treturn _this2._addSubKernel(subKernel);\n\t\t\t\t});\n\t\t\t} else if (this.subKernelProperties !== null) {\n\t\t\t\tthis.subKernelOutputTextures = [];\n\t\t\t\tthis.subKernelOutputVariableNames = [];\n\t\t\t\tObject.keys(this.subKernelProperties).forEach(function (property) {\n\t\t\t\t\treturn _this2._addSubKernel(_this2.subKernelProperties[property]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getFragShaderString\n   *\n   * @desc Get the fragment shader String.\n   * If the String hasn't been compiled yet,\n   * then this method compiles it as well\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   *\n   * @returns {string} Fragment Shader string\n   *\n   */\n\n\t}, {\n\t\tkey: '_getFragShaderString',\n\t\tvalue: function _getFragShaderString(args) {\n\t\t\tif (this.compiledFragShaderString !== null) {\n\t\t\t\treturn this.compiledFragShaderString;\n\t\t\t}\n\t\t\treturn this.compiledFragShaderString = this._replaceArtifacts(this.constructor.fragShaderString, this._getFragShaderArtifactMap(args));\n\t\t}\n\n\t\t/**\n   * @memberOf WebGL2Kernel#\n   * @function\n   * @name _getVertShaderString\n   *\n   * @desc Get the vertical shader String\n   *\n   * @param {Array} args - The actual parameters sent to the Kernel\n   *\n   * @returns {string} Vertical Shader string\n   *\n   */\n\n\t}, {\n\t\tkey: '_getVertShaderString',\n\t\tvalue: function _getVertShaderString(args) {\n\t\t\tif (this.compiledVertShaderString !== null) {\n\t\t\t\treturn this.compiledVertShaderString;\n\t\t\t}\n\t\t\treturn this.compiledVertShaderString = this.constructor.vertShaderString;\n\t\t}\n\t}], [{\n\t\tkey: 'fragShaderString',\n\t\tget: function get() {\n\t\t\treturn fragShaderString;\n\t\t}\n\t}, {\n\t\tkey: 'vertShaderString',\n\t\tget: function get() {\n\t\t\treturn vertShaderString;\n\t\t}\n\t}]);\n\n\treturn WebGL2Kernel;\n}(WebGLKernel);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl2/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl2/runner.js":
/*!************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl2/runner.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RunnerBase = __webpack_require__(/*! ../runner-base */ \"./node_modules/gpu.js/dist/backend/runner-base.js\");\nvar WebGL2FunctionBuilder = __webpack_require__(/*! ./function-builder */ \"./node_modules/gpu.js/dist/backend/web-gl2/function-builder.js\");\nvar WebGL2Kernel = __webpack_require__(/*! ./kernel */ \"./node_modules/gpu.js/dist/backend/web-gl2/kernel.js\");\n\nmodule.exports = function (_RunnerBase) {\n\t_inherits(WebGL2Runner, _RunnerBase);\n\n\t/**\n  * @constructor WebGL2Runner\n  *\n  * @extends RunnerBase\n \t * @desc Instantiates a Runner instance for the kernel.\n  *\n  * @param {Object} settings - Settings to instantiate properties in RunnerBase, with given values\n  *\n  */\n\tfunction WebGL2Runner(settings) {\n\t\t_classCallCheck(this, WebGL2Runner);\n\n\t\tvar _this = _possibleConstructorReturn(this, (WebGL2Runner.__proto__ || Object.getPrototypeOf(WebGL2Runner)).call(this, new WebGL2FunctionBuilder(), settings));\n\n\t\t_this.Kernel = WebGL2Kernel;\n\t\t_this.kernel = null;\n\t\treturn _this;\n\t}\n\n\t/**\n  * @memberOf WebGL2Runner#\n  * @function\n  * @name getMode\n  *\n  * @desc Return the current mode in which gpu.js is executing.\n  *\n  * @returns {String} The current mode; \"gpu\".\n  *\n  */\n\n\n\t_createClass(WebGL2Runner, [{\n\t\tkey: 'getMode',\n\t\tvalue: function getMode() {\n\t\t\treturn 'gpu';\n\t\t}\n\t}]);\n\n\treturn WebGL2Runner;\n}(RunnerBase);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl2/runner.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl2/shader-frag.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl2/shader-frag.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = \"#version 300 es\\n__HEADER__;\\nprecision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\n\\nconst float LOOP_MAX = __LOOP_MAX__;\\n\\n__CONSTANTS__;\\n\\nin vec2 vTexCoord;\\n\\nvec2 integerMod(vec2 x, float y) {\\n  vec2 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec3 integerMod(vec3 x, float y) {\\n  vec3 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nvec4 integerMod(vec4 x, vec4 y) {\\n  vec4 res = floor(mod(x, y));\\n  return res * step(1.0 - floor(y), -res);\\n}\\n\\nfloat integerMod(float x, float y) {\\n  float res = floor(mod(x, y));\\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\\n}\\n\\nint integerMod(int x, int y) {\\n  return x - (y * int(x/y));\\n}\\n\\n__DIVIDE_WITH_INTEGER_CHECK__;\\n\\n// Here be dragons!\\n// DO NOT OPTIMIZE THIS CODE\\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\\nfloat decode32(vec4 rgba) {\\n  __DECODE32_ENDIANNESS__;\\n  rgba *= 255.0;\\n  vec2 gte128;\\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\\n  float res = exp2(round(exponent));\\n  rgba.b = rgba.b - 128.0 * gte128.x;\\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\\n  res *= gte128.y * -2.0 + 1.0;\\n  return res;\\n}\\n\\nvec4 encode32(float f) {\\n  float F = abs(f);\\n  float sign = f < 0.0 ? 1.0 : 0.0;\\n  float exponent = floor(log2(F));\\n  float mantissa = (exp2(-exponent) * F);\\n  // exponent += floor(log2(mantissa));\\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\\n  rgba.rg = integerMod(rgba.rg, 256.0);\\n  rgba.b = integerMod(rgba.b, 128.0);\\n  rgba.a = exponent*0.5 + 63.5;\\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\\n  rgba = floor(rgba);\\n  rgba *= 0.003921569; // 1/255\\n  __ENCODE32_ENDIANNESS__;\\n  return rgba;\\n}\\n// Dragons end here\\n\\nfloat decode(vec4 rgba, int x, int bitRatio) {\\n  if (bitRatio == 1) {\\n    return decode32(rgba);\\n  }\\n  __DECODE32_ENDIANNESS__;\\n  int channel = integerMod(x, bitRatio);\\n  if (bitRatio == 4) {\\n    return rgba[channel] * 255.0;\\n  }\\n  else {\\n    return rgba[channel*2] * 255.0 + rgba[channel*2 + 1] * 65280.0;\\n  }\\n}\\n\\nint index;\\nivec3 threadId;\\n\\nivec3 indexTo3D(int idx, ivec3 texDim) {\\n  int z = int(idx / (texDim.x * texDim.y));\\n  idx -= z * int(texDim.x * texDim.y);\\n  int y = int(idx / texDim.x);\\n  int x = int(integerMod(idx, texDim.x));\\n  return ivec3(x, y, z);\\n}\\n\\nfloat get(sampler2D tex, ivec2 texSize, ivec3 texDim, int bitRatio,  int z, int y, int x) {\\n  ivec3 xyz = ivec3(x, y, z);\\n  __GET_WRAPAROUND__;\\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\\n  __GET_TEXTURE_CHANNEL__;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  __GET_TEXTURE_INDEX__;\\n  vec4 texel = texture(tex, st / vec2(texSize));\\n  __GET_RESULT__;\\n  \\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  ivec3 xyz = ivec3(x, y, z);\\n  __GET_WRAPAROUND__;\\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\\n  __GET_TEXTURE_CHANNEL__;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  __GET_TEXTURE_INDEX__;\\n  return texture(tex, st / vec2(texSize));\\n}\\n\\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\\n  ivec3 xyz = ivec3(x, y, z);\\n  __GET_WRAPAROUND__;\\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\\n  __GET_TEXTURE_CHANNEL__;\\n  int w = texSize.x;\\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\\n  __GET_TEXTURE_INDEX__;\\n  return texture(tex, vec3(st / vec2(texSize), z));\\n}\\n\\nfloat get(sampler2D tex, ivec2 texSize, ivec3 texDim, int bitRatio, int y, int x) {\\n  return get(tex, texSize, texDim, bitRatio, 0, y, x);\\n}\\n\\nfloat get(sampler2D tex, ivec2 texSize, ivec3 texDim, int bitRatio, int x) {\\n  return get(tex, texSize, texDim, bitRatio, 0, 0, x);\\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int y, int x) {\\n  return getImage2D(tex, texSize, texDim, 0, y, x);\\n}\\n\\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int x) {\\n  return getImage2D(tex, texSize, texDim, 0, 0, x);\\n}\\n\\nvec4 actualColor;\\nvoid color(float r, float g, float b, float a) {\\n  actualColor = vec4(r,g,b,a);\\n}\\n\\nvoid color(float r, float g, float b) {\\n  color(r,g,b,1.0);\\n}\\n\\n__MAIN_PARAMS__;\\n__MAIN_CONSTANTS__;\\n__KERNEL__;\\n\\nvoid main(void) {\\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\\n  __MAIN_RESULT__;\\n}\";\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl2/shader-frag.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl2/shader-vert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl2/shader-vert.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\n\\nin vec2 aPos;\\nin vec2 aTexCoord;\\n\\nout vec2 vTexCoord;\\nuniform vec2 ratio;\\n\\nvoid main(void) {\\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\\n  vTexCoord = aTexCoord;\\n}\";\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl2/shader-vert.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/backend/web-gl2/validator-kernel.js":
/*!**********************************************************************!*\
  !*** ./node_modules/gpu.js/dist/backend/web-gl2/validator-kernel.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar WebGLKernel = __webpack_require__(/*! ./kernel */ \"./node_modules/gpu.js/dist/backend/web-gl2/kernel.js\");\nvar utils = __webpack_require__(/*! ../../core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\n\n/**\n * @class WebGLValidatorKernel\n *\n * @desc Helper class for WebGLKernel to validate texture size and dimensions.\n *\n */\nmodule.exports = function (_WebGLKernel) {\n\t_inherits(WebGL2ValidatorKernel, _WebGLKernel);\n\n\tfunction WebGL2ValidatorKernel() {\n\t\t_classCallCheck(this, WebGL2ValidatorKernel);\n\n\t\treturn _possibleConstructorReturn(this, (WebGL2ValidatorKernel.__proto__ || Object.getPrototypeOf(WebGL2ValidatorKernel)).apply(this, arguments));\n\t}\n\n\t_createClass(WebGL2ValidatorKernel, [{\n\t\tkey: 'validateOptions',\n\n\n\t\t/** \n   * @memberOf WebGLValidatorKernel#\n   * @function\n   * @name validateOptions\n   *\n   */\n\t\tvalue: function validateOptions() {\n\t\t\tthis._webGl.getExtension('EXT_color_buffer_float');\n\t\t\tthis.texSize = utils.dimToTexSize({\n\t\t\t\tfloatTextures: this.floatTextures,\n\t\t\t\tfloatOutput: this.floatOutput\n\t\t\t}, this.output, true);\n\t\t}\n\t}]);\n\n\treturn WebGL2ValidatorKernel;\n}(WebGLKernel);\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/backend/web-gl2/validator-kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/core/alias.js":
/*!************************************************!*\
  !*** ./node_modules/gpu.js/dist/core/alias.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nmodule.exports = function alias(name, fn) {\n\tvar fnString = fn.toString();\n\treturn new Function('return function ' + name + ' (' + utils.getParamNamesFromString(fnString).join(', ') + ') {' + utils.getFunctionBodyFromString(fnString) + '}')();\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/core/alias.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/core/gpu-core.js":
/*!***************************************************!*\
  !*** ./node_modules/gpu.js/dist/core/gpu-core.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UtilsCore = __webpack_require__(/*! ./utils-core */ \"./node_modules/gpu.js/dist/core/utils-core.js\");\n\n/**\n * This is a minimalistic version of GPU.js used \n * to run precompiled GPU.JS code.\n *\n * This intentionally excludes the JS AST compiller : which is 400kb alone/\n *\n * @class GPUCore\n */\nmodule.exports = function () {\n\tfunction GPUCore() {\n\t\t_classCallCheck(this, GPUCore);\n\t}\n\n\t_createClass(GPUCore, null, [{\n\t\tkey: \"validateKernelObj\",\n\n\n\t\t/**\n   * @name validateKernelObj\n   * @function\n   * @static\n   * @memberOf GPUCore\n   *\n   * @description Validates the KernelObj to comply with the defined format\n   * Note that this does only a limited sanity check, and does not  \n   * guarantee a full working validation.\n   *\n   * For the kernel object format see : <kernelObj-format>\n   *\n   * @param {Object|String} kernelObj - KernelObj used to validate\n   *\n   * @returns {Object} The validated kernel object, converted from JSON if needed\n   *\n   */\n\t\tvalue: function validateKernelObj(kernelObj) {\n\n\t\t\t// NULL validation\n\t\t\tif (kernelObj === null) {\n\t\t\t\tthrow \"KernelObj being validated is NULL\";\n\t\t\t}\n\n\t\t\t// String JSON conversion\n\t\t\tif (typeof kernelObj === \"string\") {\n\t\t\t\ttry {\n\t\t\t\t\tkernelObj = JSON.parse(kernelObj);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tthrow \"Failed to convert KernelObj from JSON string\";\n\t\t\t\t}\n\n\t\t\t\t// NULL validation\n\t\t\t\tif (kernelObj === null) {\n\t\t\t\t\tthrow \"Invalid (NULL) KernelObj JSON string representation\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check for kernel obj flag\n\t\t\tif (kernelObj.isKernelObj !== true) {\n\t\t\t\tthrow \"Failed missing isKernelObj flag check\";\n\t\t\t}\n\n\t\t\t// Return the validated kernelObj\n\t\t\treturn kernelObj;\n\t\t}\n\n\t\t/**\n   * @name loadKernelObj\n   * @function\n   * @static\n   * @memberOf GPUCore\n   *\n   * @description Loads the precompiled kernel object. For GPUCore this is the ONLY way to create the kernel.\n   * To generate the kernelObj use <Kernel.exportKernelObj>\n   *\n   * Note that this function calls <validateKernelObj> internally, and throws an exception if it fails.\n   *\n   * @see GPUCore.validateKernelObj\n   * @see\tKernel.exportKernelObj\n   *\n   * @param {Object} kernelObj - The precompiled kernel object\n   * @param {Object} inOpt - [Optional] the option overrides to use\n   *\n   * @returns {Function} The kernel function\n   * \n   */\n\n\t}, {\n\t\tkey: \"loadKernelObj\",\n\t\tvalue: function loadKernelObj(kernelObj, inOpt) {\n\n\t\t\t// Validates the kernelObj, throws an exception if it fails\n\t\t\tkernelObj = validateKernelObj(kernelObj);\n\t\t}\n\t}]);\n\n\treturn GPUCore;\n}();\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/core/gpu-core.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/core/gpu.js":
/*!**********************************************!*\
  !*** ./node_modules/gpu.js/dist/core/gpu.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar WebGLRunner = __webpack_require__(/*! ../backend/web-gl/runner */ \"./node_modules/gpu.js/dist/backend/web-gl/runner.js\");\nvar WebGL2Runner = __webpack_require__(/*! ../backend/web-gl2/runner */ \"./node_modules/gpu.js/dist/backend/web-gl2/runner.js\");\nvar CPURunner = __webpack_require__(/*! ../backend/cpu/runner */ \"./node_modules/gpu.js/dist/backend/cpu/runner.js\");\nvar WebGLValidatorKernel = __webpack_require__(/*! ../backend/web-gl/validator-kernel */ \"./node_modules/gpu.js/dist/backend/web-gl/validator-kernel.js\");\nvar WebGL2ValidatorKernel = __webpack_require__(/*! ../backend/web-gl2/validator-kernel */ \"./node_modules/gpu.js/dist/backend/web-gl2/validator-kernel.js\");\nvar GPUCore = __webpack_require__(/*! ./gpu-core */ \"./node_modules/gpu.js/dist/core/gpu-core.js\");\n\n/**\n * Initialises the GPU.js library class which manages the webGlContext for the created functions.\n * @class\n * @extends GPUCore\n */\n\nvar GPU = function (_GPUCore) {\n\t_inherits(GPU, _GPUCore);\n\n\t/**\n  * Creates an instance of GPU.\n  * @param {any} settings - Settings to set mode, andother properties. See #GPUCore\n  * @memberOf GPU#\n  */\n\tfunction GPU(settings) {\n\t\t_classCallCheck(this, GPU);\n\n\t\tvar _this = _possibleConstructorReturn(this, (GPU.__proto__ || Object.getPrototypeOf(GPU)).call(this, settings));\n\n\t\tsettings = settings || {};\n\t\t_this._canvas = settings.canvas || null;\n\t\t_this._webGl = settings.webGl || null;\n\t\tvar mode = settings.mode;\n\t\tvar detectedMode = void 0;\n\t\tif (!utils.isWebGlSupported()) {\n\t\t\tif (mode && mode !== 'cpu') {\n\t\t\t\tthrow new Error('A requested mode of \"' + mode + '\" and is not supported');\n\t\t\t} else {\n\t\t\t\tconsole.warn('Warning: gpu not supported, falling back to cpu support');\n\t\t\t\tdetectedMode = 'cpu';\n\t\t\t}\n\t\t} else {\n\t\t\tif (_this._webGl) {\n\t\t\t\tif (typeof WebGL2RenderingContext !== 'undefined' && _this._webGl.constructor === WebGL2RenderingContext) {\n\t\t\t\t\tdetectedMode = 'webgl2';\n\t\t\t\t} else if (typeof WebGLRenderingContext !== 'undefined' && _this._webGl.constructor === WebGLRenderingContext) {\n\t\t\t\t\tdetectedMode = 'webgl';\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('unknown WebGL Context');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdetectedMode = mode || 'gpu';\n\t\t\t}\n\t\t}\n\t\t_this.kernels = [];\n\n\t\tvar runnerSettings = {\n\t\t\tcanvas: _this._canvas,\n\t\t\twebGl: _this._webGl\n\t\t};\n\n\t\tswitch (detectedMode) {\n\t\t\t// public options\n\t\t\tcase 'cpu':\n\t\t\t\t_this._runner = new CPURunner(runnerSettings);\n\t\t\t\tbreak;\n\t\t\tcase 'gpu':\n\t\t\t\tvar Runner = _this.getGPURunner();\n\t\t\t\t_this._runner = new Runner(runnerSettings);\n\t\t\t\tbreak;\n\n\t\t\t// private explicit options for testing\n\t\t\tcase 'webgl2':\n\t\t\t\t_this._runner = new WebGL2Runner(runnerSettings);\n\t\t\t\tbreak;\n\t\t\tcase 'webgl':\n\t\t\t\t_this._runner = new WebGLRunner(runnerSettings);\n\t\t\t\tbreak;\n\n\t\t\t// private explicit options for internal\n\t\t\tcase 'webgl2-validator':\n\t\t\t\t_this._runner = new WebGL2Runner(runnerSettings);\n\t\t\t\t_this._runner.Kernel = WebGL2ValidatorKernel;\n\t\t\t\tbreak;\n\t\t\tcase 'webgl-validator':\n\t\t\t\t_this._runner = new WebGLRunner(runnerSettings);\n\t\t\t\t_this._runner.Kernel = WebGLValidatorKernel;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('\"' + mode + '\" mode is not defined');\n\t\t}\n\t\treturn _this;\n\t}\n\t/**\n  *\n  * This creates a callable function object to call the kernel function with the argument parameter set\n  *\n  * @name createKernel\n  * @function\n  * @memberOf GPU##\n  *\n  * @param {Function} fn - The calling to perform the conversion\n  * @param {Object} [settings] - The parameter configuration object\n  * @property {String} settings.dimensions - Thread dimension array (Defaults to [1024])\n  * @property {String} settings.mode - CPU / GPU configuration mode (Defaults to null)\n  *\n  * The following modes are supported\n  * *'falsey'* : Attempts to build GPU mode, else fallbacks\n  * *'gpu'* : Attempts to build GPU mode, else fallbacks\n  * *'cpu'* : Forces JS fallback mode only\n  *\n  *\n  * @returns {Function} callable function to run\n  *\n  */\n\n\n\t_createClass(GPU, [{\n\t\tkey: 'createKernel',\n\t\tvalue: function createKernel(fn, settings) {\n\t\t\t//\n\t\t\t// basic parameters safety checks\n\t\t\t//\n\t\t\tif (typeof fn === 'undefined') {\n\t\t\t\tthrow 'Missing fn parameter';\n\t\t\t}\n\t\t\tif (!utils.isFunction(fn) && typeof fn !== 'string') {\n\t\t\t\tthrow 'fn parameter not a function';\n\t\t\t}\n\n\t\t\tvar mergedSettings = Object.assign({\n\t\t\t\twebGl: this._webGl,\n\t\t\t\tcanvas: this._canvas\n\t\t\t}, settings || {});\n\n\t\t\tvar kernel = this._runner.buildKernel(fn, mergedSettings);\n\n\t\t\t//if canvas didn't come from this, propagate from kernel\n\t\t\tif (!this._canvas) {\n\t\t\t\tthis._canvas = kernel.getCanvas();\n\t\t\t}\n\t\t\tif (!this._runner.canvas) {\n\t\t\t\tthis._runner.canvas = kernel.getCanvas();\n\t\t\t}\n\n\t\t\tthis.kernels.push(kernel);\n\n\t\t\treturn kernel;\n\t\t}\n\n\t\t/**\n   *\n   * Create a super kernel which executes sub kernels\n   * and saves their output to be used with the next sub kernel.\n   * This can be useful if we want to save the output on one kernel,\n   * and then use it as an input to another kernel. *Machine Learning*\n   *\n   * @name createKernelMap\n   * @function\n   * @memberOf GPU#\n   *\n   * @param {Object|Array} subKernels - Sub kernels for this kernel\n   * @param {Function} rootKernel - Root kernel\n   *\n   * @returns {Function} callable kernel function\n   *\n   * @example\n   * const megaKernel = gpu.createKernelMap({\n   *   addResult: function add(a, b) {\n   *     return a[this.thread.x] + b[this.thread.x];\n   *   },\n   *   multiplyResult: function multiply(a, b) {\n   *     return a[this.thread.x] * b[this.thread.x];\n   *   },\n   *  }, function(a, b, c) {\n   *       return multiply(add(a, b), c);\n   * });\n   *\n   * megaKernel(a, b, c);\n   *\n   * Note: You can also define subKernels as an array of functions.\n   * > [add, multiply]\n   *\n   */\n\n\t}, {\n\t\tkey: 'createKernelMap',\n\t\tvalue: function createKernelMap() {\n\t\t\tvar fn = void 0;\n\t\t\tvar settings = void 0;\n\t\t\tif (typeof arguments[arguments.length - 2] === 'function') {\n\t\t\t\tfn = arguments[arguments.length - 2];\n\t\t\t\tsettings = arguments[arguments.length - 1];\n\t\t\t} else {\n\t\t\t\tfn = arguments[arguments.length - 1];\n\t\t\t}\n\n\t\t\tif (!utils.isWebGlDrawBuffersSupported()) {\n\t\t\t\tthis._runner = new CPURunner(settings);\n\t\t\t}\n\n\t\t\tvar kernel = this.createKernel(fn, settings);\n\t\t\tif (Array.isArray(arguments[0])) {\n\t\t\t\tvar functions = arguments[0];\n\t\t\t\tfor (var i = 0; i < functions.length; i++) {\n\t\t\t\t\tkernel.addSubKernel(functions[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _functions = arguments[0];\n\t\t\t\tfor (var p in _functions) {\n\t\t\t\t\tif (!_functions.hasOwnProperty(p)) continue;\n\t\t\t\t\tkernel.addSubKernelProperty(p, _functions[p]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn kernel;\n\t\t}\n\n\t\t/**\n   *\n   * Combine different kernels into one super Kernel,\n   * useful to perform multiple operations inside one\n   * kernel without the penalty of data transfer between\n   * cpu and gpu.\n   *\n   * The number of kernel functions sent to this method can be variable.\n   * You can send in one, two, etc.\n   *\n   * @name combineKernels\n   * @function\n   * @memberOf GPU#\n   *\n   * @param {Function} subKernels - Kernel function(s) to combine.\n   * @param {Function} rootKernel - Root kernel to combine kernels into\n   *\n   * @example\n   * \tcombineKernels(add, multiply, function(a,b,c){\n   *\t \treturn add(multiply(a,b), c)\n   *\t})\n   *\n   * @returns {Function} Callable kernel function\n   *\n   */\n\n\t}, {\n\t\tkey: 'combineKernels',\n\t\tvalue: function combineKernels() {\n\t\t\tvar lastKernel = arguments[arguments.length - 2];\n\t\t\tvar combinedKernel = arguments[arguments.length - 1];\n\t\t\tif (this.getMode() === 'cpu') return combinedKernel;\n\n\t\t\tvar canvas = arguments[0].getCanvas();\n\t\t\tvar webGl = arguments[0].getWebGl();\n\n\t\t\tfor (var i = 0; i < arguments.length - 1; i++) {\n\t\t\t\targuments[i].setCanvas(canvas).setWebGl(webGl).setOutputToTexture(true);\n\t\t\t}\n\n\t\t\treturn function () {\n\t\t\t\tcombinedKernel.apply(null, arguments);\n\t\t\t\tvar texSize = lastKernel.texSize;\n\t\t\t\tvar gl = lastKernel.getWebGl();\n\t\t\t\tvar threadDim = lastKernel.threadDim;\n\t\t\t\tvar result = void 0;\n\t\t\t\tif (lastKernel.floatOutput) {\n\t\t\t\t\tvar w = texSize[0];\n\t\t\t\t\tvar h = Math.ceil(texSize[1] / 4);\n\t\t\t\t\tresult = new Float32Array(w * h * 4);\n\t\t\t\t\tgl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n\t\t\t\t} else {\n\t\t\t\t\tvar bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\n\t\t\t\t\tgl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, bytes);\n\t\t\t\t\tresult = new Float32Array(bytes.buffer);\n\t\t\t\t}\n\n\t\t\t\tresult = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\n\n\t\t\t\tif (lastKernel.output.length === 1) {\n\t\t\t\t\treturn result;\n\t\t\t\t} else if (lastKernel.output.length === 2) {\n\t\t\t\t\treturn utils.splitArray(result, lastKernel.output[0]);\n\t\t\t\t} else if (lastKernel.output.length === 3) {\n\t\t\t\t\tvar cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);\n\t\t\t\t\treturn cube.map(function (x) {\n\t\t\t\t\t\treturn utils.splitArray(x, lastKernel.output[0]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: 'getGPURunner',\n\t\tvalue: function getGPURunner() {\n\t\t\tif (typeof WebGL2RenderingContext !== 'undefined' && utils.isWebGl2Supported()) return WebGL2Runner;\n\t\t\tif (typeof WebGLRenderingContext !== 'undefined') return WebGLRunner;\n\t\t}\n\n\t\t/**\n   *\n   * Adds additional functions, that the kernel may call.\n   *\n   * @name addFunction\n   * @function\n   * @memberOf GPU#\n   *\n   * @param {Function|String} fn - JS Function to do conversion\n   * @param {Object} options\n   *\n   * @returns {GPU} returns itself\n   *\n   */\n\n\t}, {\n\t\tkey: 'addFunction',\n\t\tvalue: function addFunction(fn, options) {\n\t\t\tthis._runner.functionBuilder.addFunction(null, fn, options);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   *\n   * Adds additional native functions, that the kernel may call.\n   *\n   * @name addNativeFunction\n   * @function\n   * @memberOf GPU#\n   *\n   * @param {String} name - native function name, used for reverse lookup\n   * @param {String} nativeFunction - the native function implementation, as it would be defined in it's entirety\n   *\n   * @returns {GPU} returns itself\n   *\n   */\n\n\t}, {\n\t\tkey: 'addNativeFunction',\n\t\tvalue: function addNativeFunction(name, nativeFunction) {\n\t\t\tthis._runner.functionBuilder.addNativeFunction(name, nativeFunction);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   *\n   * Return the current mode in which gpu.js is executing.\n   * @name getMode\n   * @function\n   * @memberOf GPU#\n   *\n   * @returns {String} The current mode, \"cpu\", \"webgl\", etc.\n   *\n   */\n\n\t}, {\n\t\tkey: 'getMode',\n\t\tvalue: function getMode() {\n\t\t\treturn this._runner.getMode();\n\t\t}\n\n\t\t/**\n   *\n   * Return TRUE, if browser supports WebGl AND Canvas\n   *\n   * @name get isWebGlSupported\n   * @function\n   * @memberOf GPU#\n   *\n   * Note: This function can also be called directly `GPU.isWebGlSupported()`\n   *\n   * @returns {Boolean} TRUE if browser supports webGl\n   *\n   */\n\n\t}, {\n\t\tkey: 'isWebGlSupported',\n\t\tvalue: function isWebGlSupported() {\n\t\t\treturn utils.isWebGlSupported();\n\t\t}\n\n\t\t/**\n   *\n   * Return TRUE, if system has integer division accuracy issue\n   *\n   * @name get hasIntegerDivisionAccuracyBug\n   * @function\n   * @memberOf GPU#\n   *\n   * Note: This function can also be called directly `GPU.hasIntegerDivisionAccuracyBug()`\n   *\n   * @returns {Boolean} TRUE if system has integer division accuracy issue\n   *\n   *\n   */\n\n\t}, {\n\t\tkey: 'hasIntegerDivisionAccuracyBug',\n\t\tvalue: function hasIntegerDivisionAccuracyBug() {\n\t\t\treturn utils.hasIntegerDivisionAccuracyBug();\n\t\t}\n\n\t\t/**\n   *\n   * Return the canvas object bound to this gpu instance.\n   *\n   * @name getCanvas\n   * @function\n   * @memberOf GPU#\n   *\n   * @returns {Object} Canvas object if present\n   *\n   */\n\n\t}, {\n\t\tkey: 'getCanvas',\n\t\tvalue: function getCanvas() {\n\t\t\treturn this._canvas;\n\t\t}\n\n\t\t/**\n   *\n   * Return the webGl object bound to this gpu instance.\n   *\n   * @name getWebGl\n   * @function\n   * @memberOf GPU#\n   *\n   * @returns {Object} WebGl object if present\n   *\n   */\n\n\t}, {\n\t\tkey: 'getWebGl',\n\t\tvalue: function getWebGl() {\n\t\t\treturn this._webGl;\n\t\t}\n\n\t\t/**\n   *\n   * Destroys all memory associated with gpu.js & the webGl if we created it\n   *\n   * @name destroy\n   * @function\n   * @memberOf GPU#\n   *\n   *\n   */\n\n\t}, {\n\t\tkey: 'destroy',\n\t\tvalue: function destroy() {\n\t\t\tvar _this2 = this;\n\n\t\t\t// perform on next runloop - for some reason we dont get lose context events \n\t\t\t// if webGl is created and destroyed in the same run loop.\n\t\t\tsetTimeout(function () {\n\t\t\t\tvar kernels = _this2.kernels;\n\n\t\t\t\tvar destroyWebGl = !_this2._webGl && kernels.length && kernels[0]._webGl;\n\t\t\t\tfor (var i = 0; i < _this2.kernels.length; i++) {\n\t\t\t\t\t_this2.kernels[i].destroy(true); // remove canvas if exists\n\t\t\t\t}\n\n\t\t\t\tif (destroyWebGl) {\n\t\t\t\t\tdestroyWebGl.OES_texture_float = null;\n\t\t\t\t\tdestroyWebGl.OES_texture_float_linear = null;\n\t\t\t\t\tdestroyWebGl.OES_element_index_uint = null;\n\t\t\t\t\tvar loseContextExt = destroyWebGl.getExtension('WEBGL_lose_context');\n\t\t\t\t\tif (loseContextExt) {\n\t\t\t\t\t\tloseContextExt.loseContext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t}\n\t}]);\n\n\treturn GPU;\n}(GPUCore);\n\n;\n\n// This ensure static methods are \"inherited\"\n// See: https://stackoverflow.com/questions/5441508/how-to-inherit-static-methods-from-base-class-in-javascript\nObject.assign(GPU, GPUCore);\n\nmodule.exports = GPU;\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/core/gpu.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/core/input.js":
/*!************************************************!*\
  !*** ./node_modules/gpu.js/dist/core/input.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function Input(value, size) {\n\t_classCallCheck(this, Input);\n\n\tthis.value = value;\n\tif (Array.isArray(size)) {\n\t\tthis.size = [];\n\t\tfor (var i = 0; i < size.length; i++) {\n\t\t\tthis.size[i] = size[i];\n\t\t}\n\t\twhile (this.size.length < 3) {\n\t\t\tthis.size.push(1);\n\t\t}\n\t} else {\n\t\tif (size.z) {\n\t\t\tthis.size = [size.x, size.y, size.z];\n\t\t} else if (size.y) {\n\t\t\tthis.size = [size.x, size.y, 1];\n\t\t} else {\n\t\t\tthis.size = [size.x, 1, 1];\n\t\t}\n\t}\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/core/input.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/core/texture.js":
/*!**************************************************!*\
  !*** ./node_modules/gpu.js/dist/core/texture.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n\n\t/**\n  * @desc WebGl Texture implementation in JS\n  * @constructor Texture\n  * @param {Object} texture\n  * @param {Array} size\n  * @param dimensions\n  * @param {Array} output\n  * @param {Object} webGl\n  * @param {String} [type]\n  */\n\tfunction Texture(texture, size, dimensions, output, webGl) {\n\t\tvar type = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NumberTexture';\n\n\t\t_classCallCheck(this, Texture);\n\n\t\tthis.texture = texture;\n\t\tthis.size = size;\n\t\tthis.dimensions = dimensions;\n\t\tthis.output = output;\n\t\tthis.webGl = webGl;\n\t\tthis.kernel = null;\n\t\tthis.type = type;\n\t}\n\n\t/**\n  * @name toArray\n  * @function\n  * @memberOf Texture#\n  *\n  * @desc Converts the Texture into a JavaScript Array.\n  * \n  * @param {Object} The `gpu` Object\n  *\n  */\n\n\n\t_createClass(Texture, [{\n\t\tkey: 'toArray',\n\t\tvalue: function toArray(gpu) {\n\t\t\tif (!gpu) throw new Error('You need to pass the GPU object for toArray to work.');\n\t\t\tif (this.kernel) return this.kernel(this);\n\n\t\t\tthis.kernel = gpu.createKernel(function (x) {\n\t\t\t\treturn x[this.thread.z][this.thread.y][this.thread.x];\n\t\t\t}).setOutput(this.output);\n\n\t\t\treturn this.kernel(this);\n\t\t}\n\n\t\t/**\n   * @name delete\n   * @desc Deletes the Texture.\n   * @function\n   * @memberOf Texture#\n   *\n   *\n   */\n\n\t}, {\n\t\tkey: 'delete',\n\t\tvalue: function _delete() {\n\t\t\treturn this.webGl.deleteTexture(this.texture);\n\t\t}\n\t}]);\n\n\treturn Texture;\n}();\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/core/texture.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/core/utils-core.js":
/*!*****************************************************!*\
  !*** ./node_modules/gpu.js/dist/core/utils-core.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n *\n * @desc Reduced subset of Utils, used exclusively in gpu-core.js\n * Various utility functions / snippets of code that GPU.JS uses internally.\\\n * This covers various snippets of code that is not entirely gpu.js specific (ie. may find uses elsewhere)\n *\n * Note that all methods in this class is 'static' by nature `UtilsCore.functionName()`\n *\n * @class UtilsCore\n *\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UtilsCore = function () {\n\tfunction UtilsCore() {\n\t\t_classCallCheck(this, UtilsCore);\n\t}\n\n\t_createClass(UtilsCore, null, [{\n\t\tkey: 'isCanvas',\n\n\n\t\t/**\n   * @typedef {Object} webGlContext\n   */\n\n\t\t/**\n   * @typedef {Object} CanvasDOMObject\n   */\n\n\t\t//-----------------------------------------------------------------------------\n\t\t//\n\t\t//  Canvas validation and support\n\t\t//\n\t\t//-----------------------------------------------------------------------------\n\n\t\t/**\n   * @name isCanvas\n   * @static\n   * @function\n   * @memberOf UtilsCore\n   *\n   *\n   * @desc Return TRUE, on a valid DOM canvas or OffscreenCanvas object\n   *\n   * Note: This does just a VERY simply sanity check. And may give false positives.\n   *\n   * @param {CanvasDOMObject} canvasObj - Object to validate\n   *\n   * @returns {Boolean} TRUE if the object is a DOM canvas or OffscreenCanvas\n   *\n   */\n\t\tvalue: function isCanvas(canvasObj) {\n\t\t\treturn canvasObj !== null && (canvasObj.nodeName && canvasObj.getContext && canvasObj.nodeName.toUpperCase() === 'CANVAS' || typeof OffscreenCanvas !== 'undefined' && canvasObj instanceof OffscreenCanvas);\n\t\t}\n\n\t\t/**\n   * @name isCanvasSupported\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Return TRUE, if browser supports canvas\n   *\n   * @returns {Boolean} TRUE if browser supports canvas\n   *\n   */\n\n\t}, {\n\t\tkey: 'isCanvasSupported',\n\t\tvalue: function isCanvasSupported() {\n\t\t\treturn _isCanvasSupported;\n\t\t}\n\n\t\t/**\n   * @name initCanvas\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Initiate and returns a canvas, for usage in init_webgl.\n   * Returns only if canvas is supported by browser.\n   *\n   * @returns {CanvasDOMObject} CanvasDOMObject if supported by browser, else null\n   *\n   */\n\n\t}, {\n\t\tkey: 'initCanvas',\n\t\tvalue: function initCanvas() {\n\t\t\t// Fail fast if browser previously detected no support\n\t\t\tif (!_isCanvasSupported) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Create a new canvas DOM\n\t\t\tvar canvas = typeof document !== 'undefined' ? document.createElement('canvas') : new OffscreenCanvas(0, 0);\n\n\t\t\t// Default width and height, to fix webgl issue in safari\n\t\t\tcanvas.width = 2;\n\t\t\tcanvas.height = 2;\n\n\t\t\t// Returns the canvas\n\t\t\treturn canvas;\n\t\t}\n\n\t\t//-----------------------------------------------------------------------------\n\t\t//\n\t\t//  Webgl validation and support\n\t\t//\n\t\t//-----------------------------------------------------------------------------\n\n\n\t\t/**\n   *\n   * @name isWebGl\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Return TRUE, on a valid webGlContext object\n   *\n   * Note: This does just a VERY simply sanity check. And may give false positives.\n   *\n   * @param {webGlContext} webGlObj - Object to validate\n   *\n   * @returns {Boolean} TRUE if the object is a webGlContext object\n   *\n   */\n\n\t}, {\n\t\tkey: 'isWebGl',\n\t\tvalue: function isWebGl(webGlObj) {\n\t\t\treturn webGlObj && typeof webGlObj.getExtension === 'function';\n\t\t}\n\n\t\t/**\n   *\n   * @name isWebGl2\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Return TRUE, on a valid webGl2Context object\n   *\n   * Note: This does just a VERY simply sanity check. And may give false positives.\n   *\n   * @param {webGlContext} webGl2Obj - Object to validate\n   *\n   * @returns {Boolean} TRUE if the object is a webGl2Context object\n   *\n   */\n\n\t}, {\n\t\tkey: 'isWebGl2',\n\t\tvalue: function isWebGl2(webGl2Obj) {\n\t\t\treturn webGl2Obj && typeof WebGL2RenderingContext !== 'undefined' && webGl2Obj instanceof WebGL2RenderingContext;\n\t\t}\n\n\t\t/**\n   * @name isWebGlSupported\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Return TRUE, if browser supports webgl\n   *\n   * @returns {Boolean} TRUE if browser supports webgl\n   *\n   */\n\n\t}, {\n\t\tkey: 'isWebGlSupported',\n\t\tvalue: function isWebGlSupported() {\n\t\t\treturn _isWebGlSupported;\n\t\t}\n\n\t\t/**\n   * @name isWebGlSupported2\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Return TRUE, if browser supports webgl2\n   *\n   * @returns {Boolean} TRUE if browser supports webgl2\n   *\n   */\n\n\t}, {\n\t\tkey: 'isWebGl2Supported',\n\t\tvalue: function isWebGl2Supported() {\n\t\t\treturn _isWebGl2Supported;\n\t\t}\n\t}, {\n\t\tkey: 'isWebGlDrawBuffersSupported',\n\t\tvalue: function isWebGlDrawBuffersSupported() {\n\t\t\treturn _isWebGlDrawBuffersSupported;\n\t\t}\n\n\t\t// Default webgl options to use\n\n\t}, {\n\t\tkey: 'initWebGlDefaultOptions',\n\t\tvalue: function initWebGlDefaultOptions() {\n\t\t\treturn {\n\t\t\t\talpha: false,\n\t\t\t\tdepth: false,\n\t\t\t\tantialias: false\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * @name initWebGl\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Initiate and returns a webGl, from a canvas object\n   * Returns only if webGl is supported by browser.\n   *\n   * @param {CanvasDOMObject} canvasObj - Object to validate\n   *\n   * @returns {CanvasDOMObject} CanvasDOMObject if supported by browser, else null\n   *\n   */\n\n\t}, {\n\t\tkey: 'initWebGl',\n\t\tvalue: function initWebGl(canvasObj) {\n\n\t\t\t// First time setup, does the browser support check memorizer\n\t\t\tif (typeof _isCanvasSupported !== 'undefined' || canvasObj === null) {\n\t\t\t\tif (!_isCanvasSupported) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fail fast for invalid canvas object\n\t\t\tif (!UtilsCore.isCanvas(canvasObj)) {\n\t\t\t\tthrow new Error('Invalid canvas object - ' + canvasObj);\n\t\t\t}\n\n\t\t\t// Create a new canvas DOM\n\t\t\tvar webGl = null;\n\t\t\tvar defaultOptions = UtilsCore.initWebGlDefaultOptions();\n\t\t\ttry {\n\t\t\t\twebGl = canvasObj.getContext('experimental-webgl', defaultOptions);\n\t\t\t} catch (e) {\n\t\t\t\t// 'experimental-webgl' is not a supported context type\n\t\t\t\t// fallback to 'webgl2' or 'webgl' below\n\t\t\t}\n\n\t\t\tif (webGl === null) {\n\t\t\t\twebGl = canvasObj.getContext('webgl2', defaultOptions) || canvasObj.getContext('webgl', defaultOptions);\n\t\t\t}\n\n\t\t\tif (webGl) {\n\t\t\t\t// Get the extension that is needed\n\t\t\t\twebGl.OES_texture_float = webGl.getExtension('OES_texture_float');\n\t\t\t\twebGl.OES_texture_float_linear = webGl.getExtension('OES_texture_float_linear');\n\t\t\t\twebGl.OES_element_index_uint = webGl.getExtension('OES_element_index_uint');\n\t\t\t}\n\n\t\t\t// Returns the canvas\n\t\t\treturn webGl;\n\t\t}\n\n\t\t/**\n   * @name initWebGl2\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   *\n   * @desc Initiate and returns a webGl, from a canvas object\n   * Returns only if webGl is supported by browser.\n   *\n   * @param {CanvasDOMObject} canvasObj - Object to validate\n   *\n   * @returns {CanvasDOMObject} CanvasDOMObject if supported by browser, else null\n   *\n   */\n\n\t}, {\n\t\tkey: 'initWebGl2',\n\t\tvalue: function initWebGl2(canvasObj) {\n\n\t\t\t// First time setup, does the browser support check memorizer\n\t\t\tif (typeof _isCanvasSupported !== 'undefined' || canvasObj === null) {\n\t\t\t\tif (!_isCanvasSupported) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fail fast for invalid canvas object\n\t\t\tif (!UtilsCore.isCanvas(canvasObj)) {\n\t\t\t\tthrow new Error('Invalid canvas object - ' + canvasObj);\n\t\t\t}\n\n\t\t\t// Create a new canvas DOM\n\t\t\treturn canvasObj.getContext('webgl2', UtilsCore.initWebGlDefaultOptions());\n\t\t}\n\n\t\t/**\n   * @function\n   * @static\n   * @memberOf UtilsCore\n   * @param {number[]} output\n   * @throws if not correctly defined\n   */\n\n\t}, {\n\t\tkey: 'checkOutput',\n\t\tvalue: function checkOutput(output) {\n\t\t\tif (!output || !Array.isArray(output)) throw new Error('kernel.output not an array');\n\t\t\tfor (var i = 0; i < output.length; i++) {\n\t\t\t\tif (isNaN(output[i]) || output[i] < 1) {\n\t\t\t\t\tthrow new Error('kernel.output[' + i + '] incorrectly defined as `' + output[i] + '`, needs to be numeric, and greater than 0');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn UtilsCore;\n}();\n\n//-----------------------------------------------------------------------------\n//\n//  Canvas & Webgl validation and support constants\n//\n//-----------------------------------------------------------------------------\n\nvar _isCanvasSupported = typeof document !== 'undefined' ? UtilsCore.isCanvas(document.createElement('canvas')) : typeof OffscreenCanvas !== 'undefined';\nvar _testingWebGl = UtilsCore.initWebGl(UtilsCore.initCanvas());\nvar _testingWebGl2 = UtilsCore.initWebGl2(UtilsCore.initCanvas());\nvar _isWebGlSupported = UtilsCore.isWebGl(_testingWebGl);\nvar _isWebGl2Supported = UtilsCore.isWebGl2(_testingWebGl2);\nvar _isWebGlDrawBuffersSupported = _isWebGlSupported && Boolean(_testingWebGl.getExtension('WEBGL_draw_buffers'));\n\nif (_isWebGlSupported) {\n\tUtilsCore.OES_texture_float = _testingWebGl.OES_texture_float;\n\tUtilsCore.OES_texture_float_linear = _testingWebGl.OES_texture_float_linear;\n\tUtilsCore.OES_element_index_uint = _testingWebGl.OES_element_index_uint;\n} else {\n\tUtilsCore.OES_texture_float = false;\n\tUtilsCore.OES_texture_float_linear = false;\n\tUtilsCore.OES_element_index_uint = false;\n}\n\nmodule.exports = UtilsCore;\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/core/utils-core.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/core/utils.js":
/*!************************************************!*\
  !*** ./node_modules/gpu.js/dist/core/utils.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * \n * @classdesc Various utility functions / snippets of code that GPU.JS uses internally.\\\n * This covers various snippets of code that is not entirely gpu.js specific (ie. may find uses elsewhere)\n *\n * Note that all methods in this class are *static* by nature `Utils.functionName()`\n * \n * @class Utils\n * @extends UtilsCore\n *\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar UtilsCore = __webpack_require__(/*! ./utils-core */ \"./node_modules/gpu.js/dist/core/utils-core.js\");\nvar Input = __webpack_require__(/*! ./input */ \"./node_modules/gpu.js/dist/core/input.js\");\nvar Texture = __webpack_require__(/*! ./texture */ \"./node_modules/gpu.js/dist/core/texture.js\");\n// FUNCTION_NAME regex\nvar FUNCTION_NAME = /function ([^(]*)/;\n\n// STRIP COMMENTS regex\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n// ARGUMENT NAMES regex\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n\nvar _systemEndianness = function () {\n\tvar b = new ArrayBuffer(4);\n\tvar a = new Uint32Array(b);\n\tvar c = new Uint8Array(b);\n\ta[0] = 0xdeadbeef;\n\tif (c[0] === 0xef) return 'LE';\n\tif (c[0] === 0xde) return 'BE';\n\tthrow new Error('unknown endianness');\n}();\n\nvar _isFloatReadPixelsSupported = null;\nvar _isFloatReadPixelsSupportedWebGL2 = null;\n\nvar _isMixedIdentifiersSupported = function () {\n\ttry {\n\t\tnew Function('let i = 1; const j = 1;')();\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}();\n\nvar _hasIntegerDivisionAccuracyBug = null;\n\n/**\n * @class\n * @extends UtilsCore\n */\n\nvar Utils = function (_UtilsCore) {\n\t_inherits(Utils, _UtilsCore);\n\n\tfunction Utils() {\n\t\t_classCallCheck(this, Utils);\n\n\t\treturn _possibleConstructorReturn(this, (Utils.__proto__ || Object.getPrototypeOf(Utils)).apply(this, arguments));\n\t}\n\n\t_createClass(Utils, null, [{\n\t\tkey: 'systemEndianness',\n\n\n\t\t//-----------------------------------------------------------------------------\n\t\t//\n\t\t//  System values support (currently only endianness)\n\t\t//\n\t\t//-----------------------------------------------------------------------------\n\n\t\t/**\n   * @memberOf Utils\n   * @name systemEndianness\n   * @function\n   * @static\n   *\n   * Gets the system endianness, and cache it\n   *\n   * @returns {String} 'LE' or 'BE' depending on system architecture\n   *\n   * Credit: https://gist.github.com/TooTallNate/4750953\n   */\n\t\tvalue: function systemEndianness() {\n\t\t\treturn _systemEndianness;\n\t\t}\n\n\t\t//-----------------------------------------------------------------------------\n\t\t//\n\t\t//  Function and function string validations\n\t\t//\n\t\t//-----------------------------------------------------------------------------\n\n\t\t/**\n   * @memberOf Utils\n   * @name isFunction\n   * @function\n   * @static\n   *\n   * Return TRUE, on a JS function\n   *\n   * @param {Function} funcObj - Object to validate if its a function\n   *\n   * @returns\t{Boolean} TRUE if the object is a JS function\n   *\n   */\n\n\t}, {\n\t\tkey: 'isFunction',\n\t\tvalue: function isFunction(funcObj) {\n\t\t\treturn typeof funcObj === 'function';\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name isFunctionString\n   * @function\n   * @static\n   *\n   * Return TRUE, on a valid JS function string\n   *\n   * Note: This does just a VERY simply sanity check. And may give false positives.\n   *\n   * @param {String} funcStr - String of JS function to validate\n   *\n   * @returns {Boolean} TRUE if the string passes basic validation\n   *\n   */\n\n\t}, {\n\t\tkey: 'isFunctionString',\n\t\tvalue: function isFunctionString(funcStr) {\n\t\t\tif (funcStr !== null) {\n\t\t\t\treturn funcStr.toString().slice(0, 'function'.length).toLowerCase() === 'function';\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name getFunctionName_fromString\n   * @function\n   * @static\n   *\n   * Return the function name from a JS function string\n   *\n   * @param {String} funcStr - String of JS function to validate\n   *\n   * @returns {String} Function name string (if found)\n   *\n   */\n\n\t}, {\n\t\tkey: 'getFunctionNameFromString',\n\t\tvalue: function getFunctionNameFromString(funcStr) {\n\t\t\treturn FUNCTION_NAME.exec(funcStr)[1];\n\t\t}\n\t}, {\n\t\tkey: 'getFunctionBodyFromString',\n\t\tvalue: function getFunctionBodyFromString(funcStr) {\n\t\t\treturn funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name getParamNames_fromString\n   * @function\n   * @static\n   *\n   * Return list of parameter names extracted from the JS function string\n   *\n   * @param {String} funcStr - String of JS function to validate\n   *\n   * @returns {String[]}  Array representing all the parameter names\n   *\n   */\n\n\t}, {\n\t\tkey: 'getParamNamesFromString',\n\t\tvalue: function getParamNamesFromString(func) {\n\t\t\tvar fnStr = func.toString().replace(STRIP_COMMENTS, '');\n\t\t\tvar result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n\t\t\tif (result === null) result = [];\n\t\t\treturn result;\n\t\t}\n\n\t\t//-----------------------------------------------------------------------------\n\t\t//\n\t\t//  Object / function cloning and manipulation\n\t\t//\n\t\t//-----------------------------------------------------------------------------\n\n\t\t/**\n   * @memberOf Utils\n   * @name clone\n   * @function\n   * @static\n   *\n   * Returns a clone\n   *\n   * @param {Object} obj - Object to clone\n   *\n   * @returns {Object}  Cloned object\n   *\n   */\n\n\t}, {\n\t\tkey: 'clone',\n\t\tvalue: function clone(obj) {\n\t\t\tif (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;\n\n\t\t\tvar temp = obj.constructor(); // changed\n\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t\t\t\t\tobj.isActiveClone = null;\n\t\t\t\t\ttemp[key] = Utils.clone(obj[key]);\n\t\t\t\t\tdelete obj.isActiveClone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn temp;\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name newPromise\n   * @function\n   * @static\n   *\n   * Returns a `new Promise` object based on the underlying implmentation\n   *\n   * @param {Function} executor - Promise builder function\n   *\n   * @returns {Promise}  Promise object\n   *\n   */\n\n\t}, {\n\t\tkey: 'newPromise',\n\t\tvalue: function newPromise(executor) {\n\t\t\tvar simple = Promise || small_promise;\n\t\t\tif (simple === null) {\n\t\t\t\tthrow TypeError('Browser is missing Promise implementation. Consider adding small_promise.js polyfill');\n\t\t\t}\n\t\t\treturn new simple(executor);\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name functionBinder\n   * @function\n   * @static\n   *\n   * Limited implementation of Function.bind, with fallback\n   *\n   * @param {Function} inFunc - to setup bind on\n   * @param {Object} thisObj - The this parameter to assume inside the binded function\n   *\n   * @returns {Function}  The binded function\n   *\n   */\n\n\t}, {\n\t\tkey: 'functionBinder',\n\t\tvalue: function functionBinder(inFunc, thisObj) {\n\t\t\tif (inFunc.bind) {\n\t\t\t\treturn inFunc.bind(thisObj);\n\t\t\t}\n\n\t\t\treturn function () {\n\t\t\t\tvar args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n\t\t\t\treturn inFunc.apply(thisObj, args);\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name isArray\n   * @function\n   * @static\n   *\n   * * Checks if is an array or Array-like object\n   *\n   * @param {Object} arg - The argument object to check if is array\n   *\n   * @returns {Boolean}  true if is array or Array-like object\n   *\n   */\n\n\t}, {\n\t\tkey: 'isArray',\n\t\tvalue: function isArray(array) {\n\t\t\tif (isNaN(array.length)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name getArgumentType\n   * @function\n   * @static\n   *\n   * Evaluate the argument type, to apply respective logic for it\n   *\n   * @param {Object} arg - The argument object to evaluate type\n   *\n   * @returns {String}  Argument type Array/Number/Float/Texture/Unknown\n   *\n   */\n\n\t}, {\n\t\tkey: 'getArgumentType',\n\t\tvalue: function getArgumentType(arg) {\n\t\t\tif (Utils.isArray(arg)) {\n\t\t\t\tif (arg[0].nodeName === 'IMG') {\n\t\t\t\t\treturn 'HTMLImageArray';\n\t\t\t\t}\n\t\t\t\treturn 'Array';\n\t\t\t} else if (typeof arg === 'number') {\n\t\t\t\tif (Number.isInteger(arg)) {\n\t\t\t\t\treturn 'Integer';\n\t\t\t\t}\n\t\t\t\treturn 'Float';\n\t\t\t} else if (arg instanceof Texture) {\n\t\t\t\treturn arg.type;\n\t\t\t} else if (arg instanceof Input) {\n\t\t\t\treturn 'Input';\n\t\t\t} else if (arg.nodeName === 'IMG') {\n\t\t\t\treturn 'HTMLImage';\n\t\t\t} else {\n\t\t\t\treturn 'Unknown';\n\t\t\t}\n\t\t}\n\t\t/**\n   * @typedef {Object} gpuJSObject\n   */\n\n\t\t/**\n   * @memberOf Utils\n   * @name isFloatReadPixelsSupported\n   * @function\n   * @static\n   *\n   * Checks if the browser supports readPixels with float type\n   *\n   * @returns {Boolean} true if browser supports\n   *\n   */\n\n\t}, {\n\t\tkey: 'isFloatReadPixelsSupported',\n\t\tvalue: function isFloatReadPixelsSupported() {\n\t\t\tif (_isFloatReadPixelsSupported !== null) {\n\t\t\t\treturn _isFloatReadPixelsSupported;\n\t\t\t}\n\n\t\t\tvar GPU = __webpack_require__(/*! ../index */ \"./node_modules/gpu.js/dist/index.js\");\n\t\t\tvar gpu = new GPU({\n\t\t\t\tmode: 'webgl-validator'\n\t\t\t});\n\t\t\tvar x = gpu.createKernel(function () {\n\t\t\t\treturn 1;\n\t\t\t}, {\n\t\t\t\toutput: [2],\n\t\t\t\tfloatTextures: true,\n\t\t\t\tfloatOutput: true,\n\t\t\t\tfloatOutputForce: true\n\t\t\t})();\n\n\t\t\t_isFloatReadPixelsSupported = x[0] === 1;\n\t\t\tgpu.destroy();\n\t\t\treturn _isFloatReadPixelsSupported;\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name isFloatReadPixelsSupportedWebGL2\n   * @function\n   * @static\n   *\n   * Checks if the browser supports readPixels with float type\n   *\n   * @returns {Boolean} true if browser supports\n   *\n   */\n\n\t}, {\n\t\tkey: 'isFloatReadPixelsSupportedWebGL2',\n\t\tvalue: function isFloatReadPixelsSupportedWebGL2() {\n\t\t\tif (_isFloatReadPixelsSupportedWebGL2 !== null) {\n\t\t\t\treturn _isFloatReadPixelsSupportedWebGL2;\n\t\t\t}\n\n\t\t\tvar GPU = __webpack_require__(/*! ../index */ \"./node_modules/gpu.js/dist/index.js\");\n\t\t\tvar gpu = new GPU({\n\t\t\t\tmode: 'webgl2-validator'\n\t\t\t});\n\t\t\tvar x = gpu.createKernel(function () {\n\t\t\t\treturn 1;\n\t\t\t}, {\n\t\t\t\toutput: [2],\n\t\t\t\tfloatTextures: true,\n\t\t\t\tfloatOutput: true,\n\t\t\t\tfloatOutputForce: true\n\t\t\t})();\n\n\t\t\t_isFloatReadPixelsSupportedWebGL2 = x[0] === 1;\n\t\t\tgpu.destroy();\n\t\t\treturn _isFloatReadPixelsSupportedWebGL2;\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name hasIntegerDivisionAccuracyBug\n   * @function\n   * @static\n   *\n   * Checks if the system has inaccuracies when dividing integers\n   *\n   * @returns {Boolean} true if bug is exhibited on this system\n   *\n   */\n\n\t}, {\n\t\tkey: 'hasIntegerDivisionAccuracyBug',\n\t\tvalue: function hasIntegerDivisionAccuracyBug() {\n\t\t\tif (_hasIntegerDivisionAccuracyBug !== null) {\n\t\t\t\treturn _hasIntegerDivisionAccuracyBug;\n\t\t\t}\n\n\t\t\tvar GPU = __webpack_require__(/*! ../index */ \"./node_modules/gpu.js/dist/index.js\");\n\t\t\tvar gpu = new GPU({\n\t\t\t\tmode: 'webgl-validator'\n\t\t\t});\n\t\t\tvar x = gpu.createKernel(function (v1, v2) {\n\t\t\t\treturn v1[this.thread.x] / v2[this.thread.x];\n\t\t\t}, {\n\t\t\t\toutput: [1]\n\t\t\t})([6, 6030401], [3, 3991]);\n\n\t\t\t// have we not got whole numbers for 6/3 or 6030401/3991\n\t\t\t// add more here if others see this problem\n\t\t\t_hasIntegerDivisionAccuracyBug = x[0] !== 2 || x[1] !== 1511;\n\t\t\tgpu.destroy();\n\t\t\treturn _hasIntegerDivisionAccuracyBug;\n\t\t}\n\t}, {\n\t\tkey: 'isMixedIdentifiersSupported',\n\t\tvalue: function isMixedIdentifiersSupported() {\n\t\t\treturn _isMixedIdentifiersSupported;\n\t\t}\n\t}, {\n\t\tkey: 'dimToTexSize',\n\t\tvalue: function dimToTexSize(opt, dimensions, output) {\n\t\t\tvar numTexels = dimensions[0];\n\t\t\tvar w = dimensions[0];\n\t\t\tvar h = dimensions[1];\n\t\t\tfor (var i = 1; i < dimensions.length; i++) {\n\t\t\t\tnumTexels *= dimensions[i];\n\t\t\t}\n\n\t\t\tif (opt.floatTextures && (!output || opt.floatOutput)) {\n\t\t\t\tw = numTexels = Math.ceil(numTexels / 4);\n\t\t\t}\n\t\t\t// if given dimensions == a 2d image\n\t\t\tif (h > 1 && w * h === numTexels) {\n\t\t\t\treturn [w, h];\n\t\t\t}\n\t\t\t// find as close to square width, height sizes as possible\n\t\t\tvar sqrt = Math.sqrt(numTexels);\n\t\t\tvar high = Math.ceil(sqrt);\n\t\t\tvar low = Math.floor(sqrt);\n\t\t\twhile (high * low > numTexels) {\n\t\t\t\thigh--;\n\t\t\t\tlow = Math.ceil(numTexels / high);\n\t\t\t}\n\t\t\tw = low;\n\t\t\th = Math.ceil(numTexels / w);\n\t\t\treturn [w, h];\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name getDimensions\n   * @function\n   * @static\n   *\n   * Return the dimension of an array.\n   * \n   * @param {Array|String} x - The array\n   * @param {number} [pad] - To include padding in the dimension calculation [Optional]\n   *\n   *\n   *\n   */\n\n\t}, {\n\t\tkey: 'getDimensions',\n\t\tvalue: function getDimensions(x, pad) {\n\t\t\tvar ret = void 0;\n\t\t\tif (Utils.isArray(x)) {\n\t\t\t\tvar dim = [];\n\t\t\t\tvar temp = x;\n\t\t\t\twhile (Utils.isArray(temp)) {\n\t\t\t\t\tdim.push(temp.length);\n\t\t\t\t\ttemp = temp[0];\n\t\t\t\t}\n\t\t\t\tret = dim.reverse();\n\t\t\t} else if (x instanceof Texture) {\n\t\t\t\tret = x.output;\n\t\t\t} else if (x instanceof Input) {\n\t\t\t\tret = x.size;\n\t\t\t} else {\n\t\t\t\tthrow 'Unknown dimensions of ' + x;\n\t\t\t}\n\n\t\t\tif (pad) {\n\t\t\t\tret = Utils.clone(ret);\n\t\t\t\twhile (ret.length < 3) {\n\t\t\t\t\tret.push(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return ret;\n\t\t\treturn new Int32Array(ret);\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name pad\n   * @function\n   * @static\n   *\n   * Pad an array AND its elements with leading and ending zeros\n   *\n   * @param {Array} arr - the array to pad zeros to\n   * @param {number} padding - amount of padding\n   *\n   * @returns {Array} Array with leading and ending zeros, and all the elements padded by zeros.\n   *\n   */\n\n\t}, {\n\t\tkey: 'pad',\n\t\tvalue: function pad(arr, padding) {\n\t\t\tfunction zeros(n) {\n\t\t\t\treturn Array.apply(null, new Array(n)).map(Number.prototype.valueOf, 0);\n\t\t\t}\n\n\t\t\tvar len = arr.length + padding * 2;\n\n\t\t\tvar ret = arr.map(function (x) {\n\t\t\t\treturn [].concat(zeros(padding), x, zeros(padding));\n\t\t\t});\n\n\t\t\tfor (var i = 0; i < padding; i++) {\n\t\t\t\tret = [].concat([zeros(len)], ret, [zeros(len)]);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name flatten2dArrayTo\n   * @function\n   * @static\n   *\n   * Puts a nested 2d array into a one-dimensional target array\n   * @param {Array|*} array\n   * @param {Float32Array|Float64Array} target\n   */\n\n\t}, {\n\t\tkey: 'flatten2dArrayTo',\n\t\tvalue: function flatten2dArrayTo(array, target) {\n\t\t\tvar offset = 0;\n\t\t\tfor (var y = 0; y < array.length; y++) {\n\t\t\t\ttarget.set(array[y], offset);\n\t\t\t\toffset += array[y].length;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name flatten3dArrayTo\n   * @function\n   * @static\n   *\n   * Puts a nested 3d array into a one-dimensional target array\n   * @param {Array|*} array\n   * @param {Float32Array|Float64Array} target\n   */\n\n\t}, {\n\t\tkey: 'flatten3dArrayTo',\n\t\tvalue: function flatten3dArrayTo(array, target) {\n\t\t\tvar offset = 0;\n\t\t\tfor (var z = 0; z < array.length; z++) {\n\t\t\t\tfor (var y = 0; y < array[z].length; y++) {\n\t\t\t\t\ttarget.set(array[z][y], offset);\n\t\t\t\t\toffset += array[z][y].length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name flatten3dArrayTo\n   * @function\n   * @static\n   *\n   * Puts a nested 1d, 2d, or 3d array into a one-dimensional target array\n   * @param {Array|*} array\n   * @param {Float32Array|Float64Array} target\n   */\n\n\t}, {\n\t\tkey: 'flattenTo',\n\t\tvalue: function flattenTo(array, target) {\n\t\t\tif (Utils.isArray(array[0])) {\n\t\t\t\tif (Utils.isArray(array[0][0])) {\n\t\t\t\t\tUtils.flatten3dArrayTo(array, target);\n\t\t\t\t} else {\n\t\t\t\t\tUtils.flatten2dArrayTo(array, target);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttarget.set(array);\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * @memberOf Utils\n   * @name splitArray\n   * @function\n   * @static\n   *\n   * Splits an array into smaller arrays.\n   * Number of elements in one small chunk is given by `part`\n   *\n   * @param {Array} array - The array to split into chunks\n   * @param {Array} part - elements in one chunk\n   *\n  \t * @returns {Array} An array of smaller chunks\n   *\n   */\n\n\t}, {\n\t\tkey: 'splitArray',\n\t\tvalue: function splitArray(array, part) {\n\t\t\tvar result = [];\n\t\t\tfor (var i = 0; i < array.length; i += part) {\n\t\t\t\tresult.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}, {\n\t\tkey: 'getAstString',\n\t\tvalue: function getAstString(source, ast) {\n\t\t\tvar lines = Array.isArray(source) ? source : source.split(/\\r?\\n/g);\n\t\t\tvar start = ast.loc.start;\n\t\t\tvar end = ast.loc.end;\n\t\t\tvar result = [];\n\t\t\tresult.push(lines[start.line - 1].slice(start.column));\n\t\t\tfor (var i = start.line; i < end.line - 1; i++) {\n\t\t\t\tresult.push(lines[i]);\n\t\t\t}\n\t\t\tresult.push(lines[end.line - 1].slice(0, end.column));\n\t\t\treturn result.join('\\n');\n\t\t}\n\t}, {\n\t\tkey: 'allPropertiesOf',\n\t\tvalue: function allPropertiesOf(obj) {\n\t\t\tvar props = [];\n\n\t\t\tdo {\n\t\t\t\tprops.push.apply(props, Object.getOwnPropertyNames(obj));\n\t\t\t} while (obj = Object.getPrototypeOf(obj));\n\n\t\t\treturn props;\n\t\t}\n\t}]);\n\n\treturn Utils;\n}(UtilsCore);\n\n// This ensure static methods are \"inherited\"\n// See: https://stackoverflow.com/questions/5441508/how-to-inherit-static-methods-from-base-class-in-javascript\n\n\nObject.assign(Utils, UtilsCore);\n\nmodule.exports = Utils;\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/core/utils.js?");

/***/ }),

/***/ "./node_modules/gpu.js/dist/index.js":
/*!*******************************************!*\
  !*** ./node_modules/gpu.js/dist/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar GPU = __webpack_require__(/*! ./core/gpu */ \"./node_modules/gpu.js/dist/core/gpu.js\");\nvar alias = __webpack_require__(/*! ./core/alias */ \"./node_modules/gpu.js/dist/core/alias.js\");\nvar utils = __webpack_require__(/*! ./core/utils */ \"./node_modules/gpu.js/dist/core/utils.js\");\nvar Input = __webpack_require__(/*! ./core/input */ \"./node_modules/gpu.js/dist/core/input.js\");\nvar Texture = __webpack_require__(/*! ./core/texture */ \"./node_modules/gpu.js/dist/core/texture.js\");\n\nvar CPUFunctionBuilder = __webpack_require__(/*! ./backend/cpu/function-builder */ \"./node_modules/gpu.js/dist/backend/cpu/function-builder.js\");\nvar CPUFunctionNode = __webpack_require__(/*! ./backend/cpu/function-node */ \"./node_modules/gpu.js/dist/backend/cpu/function-node.js\");\nvar CPUKernel = __webpack_require__(/*! ./backend/cpu/kernel */ \"./node_modules/gpu.js/dist/backend/cpu/kernel.js\");\nvar CPURunner = __webpack_require__(/*! ./backend/cpu/runner */ \"./node_modules/gpu.js/dist/backend/cpu/runner.js\");\n\nvar WebGLFunctionBuilder = __webpack_require__(/*! ./backend/web-gl/function-builder */ \"./node_modules/gpu.js/dist/backend/web-gl/function-builder.js\");\nvar WebGLFunctionNode = __webpack_require__(/*! ./backend/web-gl/function-node */ \"./node_modules/gpu.js/dist/backend/web-gl/function-node.js\");\nvar WebGLKernel = __webpack_require__(/*! ./backend/web-gl/kernel */ \"./node_modules/gpu.js/dist/backend/web-gl/kernel.js\");\nvar WebGLRunner = __webpack_require__(/*! ./backend/web-gl/runner */ \"./node_modules/gpu.js/dist/backend/web-gl/runner.js\");\n\nvar WebGL2FunctionBuilder = __webpack_require__(/*! ./backend/web-gl2/function-builder */ \"./node_modules/gpu.js/dist/backend/web-gl2/function-builder.js\");\nvar WebGL2FunctionNode = __webpack_require__(/*! ./backend/web-gl2/function-node */ \"./node_modules/gpu.js/dist/backend/web-gl2/function-node.js\");\nvar WebGL2Kernel = __webpack_require__(/*! ./backend/web-gl2/kernel */ \"./node_modules/gpu.js/dist/backend/web-gl2/kernel.js\");\nvar WebGL2Runner = __webpack_require__(/*! ./backend/web-gl2/runner */ \"./node_modules/gpu.js/dist/backend/web-gl2/runner.js\");\n\nGPU.alias = alias;\nGPU.utils = utils;\nGPU.Texture = Texture;\nGPU.Input = Input;\nGPU.input = function (value, size) {\n\treturn new Input(value, size);\n};\n\nGPU.CPUFunctionBuilder = CPUFunctionBuilder;\nGPU.CPUFunctionNode = CPUFunctionNode;\nGPU.CPUKernel = CPUKernel;\nGPU.CPURunner = CPURunner;\n\nGPU.WebGLFunctionBuilder = WebGLFunctionBuilder;\nGPU.WebGLFunctionNode = WebGLFunctionNode;\nGPU.WebGLKernel = WebGLKernel;\nGPU.WebGLRunner = WebGLRunner;\n\nGPU.WebGL2FunctionBuilder = WebGL2FunctionBuilder;\nGPU.WebGL2FunctionNode = WebGL2FunctionNode;\nGPU.WebGL2Kernel = WebGL2Kernel;\nGPU.WebGL2Runner = WebGL2Runner;\n\nif (true) {\n\tmodule.exports = GPU;\n}\nif (typeof window !== 'undefined') {\n\twindow.GPU = GPU;\n}\nif (typeof self !== 'undefined') {\n\tself.GPU = GPU;\n}\n\n//# sourceURL=webpack:///./node_modules/gpu.js/dist/index.js?");

/***/ }),

/***/ "./node_modules/gpu.js/node_modules/acorn/dist/acorn.es.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gpu.js/node_modules/acorn/dist/acorn.es.js ***!
  \*****************************************************************/
/*! exports provided: version, parse, parseExpressionAt, tokenizer, parse_dammit, LooseParser, pluginsLoose, addLooseExports, Parser, plugins, defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, tokTypes, keywordTypes, TokContext, tokContexts, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseExpressionAt\", function() { return parseExpressionAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenizer\", function() { return tokenizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse_dammit\", function() { return parse_dammit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LooseParser\", function() { return LooseParser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pluginsLoose\", function() { return pluginsLoose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addLooseExports\", function() { return addLooseExports; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"plugins\", function() { return plugins; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultOptions\", function() { return defaultOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Position\", function() { return Position; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SourceLocation\", function() { return SourceLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLineInfo\", function() { return getLineInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Node\", function() { return Node; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TokenType\", function() { return TokenType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokTypes\", function() { return types; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keywordTypes\", function() { return keywords$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TokContext\", function() { return TokContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokContexts\", function() { return types$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isIdentifierChar\", function() { return isIdentifierChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isIdentifierStart\", function() { return isIdentifierStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Token\", function() { return Token; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNewLine\", function() { return isNewLine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lineBreak\", function() { return lineBreak; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lineBreakG\", function() { return lineBreakG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nonASCIIwhitespace\", function() { return nonASCIIwhitespace; });\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,190,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,26,230,43,117,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,68,12,0,67,12,65,1,31,6129,15,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Registered plugins\nvar plugins = {};\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = keywordRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = keywordRegexp(reservedStrict);\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Load plugins\n  this.loadPlugins(options.plugins);\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Flags to track whether we are in a function, a generator, an async function.\n  this.inFunction = this.inGenerator = this.inAsync = false;\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = 0;\n  // Labels in scope.\n  this.labels = [];\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterFunctionScope();\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\n// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\nParser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\nParser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\nParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name];\n    if (!plugin) { throw new Error(\"Plugin '\" + name + \"' not found\") }\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\"|;)/;\npp.strictDirective = function(start) {\n  var this$1 = this;\n\n  for (;;) {\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    var match = literal.exec(this$1.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") { return true }\n    start += match[0].length;\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(true, true, exports);\n    node.body.push(stmt);\n  }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function() {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh === 123) { return true } // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(declaration, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet()) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    if (!declaration && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false)\n  case types._class:\n    if (!declaration) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (!declaration && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock()\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (!declaration) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterLexicalScope();\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init)) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync) {\n  this.next();\n  return this.parseFunction(node, true, false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(!this.strict && this.type === types._function);\n  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type === types._function) : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterLexicalScope();\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n      if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) { this$1.unexpected(); }\n      cur.consequent.push(this$1.parseStatement(true));\n    }\n  }\n  this.exitLexicalScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      this.enterLexicalScope();\n      this.checkLVal(clause.param, \"let\");\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterLexicalScope();\n    }\n    clause.body = this.parseBlock(false);\n    this.exitLexicalScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this$1.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this$1.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(true);\n  if (node.body.type === \"ClassDeclaration\" ||\n      node.body.type === \"VariableDeclaration\" && node.body.kind !== \"var\" ||\n      node.body.type === \"FunctionDeclaration\" && (this.strict || node.body.generator || node.body.async))\n    { this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\"); }\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope) {\n  var this$1 = this;\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n\n  var node = this.startNode();\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) {\n    this.enterLexicalScope();\n  }\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(true);\n    node.body.push(stmt);\n  }\n  if (createNewLexicalScope) {\n    this.exitLexicalScope();\n  }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  if (type === \"ForInStatement\") {\n    if (init.type === \"AssignmentPattern\" ||\n      (init.type === \"VariableDeclaration\" && init.declarations[0].init != null &&\n       (this.strict || init.declarations[0].id.type !== \"Identifier\")))\n      { this.raise(init.start, \"Invalid assignment in for-in loop head\"); }\n  }\n  node.left = init;\n  node.right = type === \"ForInStatement\" ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type)\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl, kind);\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    if (!this$1.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom(kind);\n  this.checkLVal(decl.id, kind, false);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync)\n    { node.generator = this.eat(types.star); }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (isStatement) {\n    node.id = isStatement === \"nullableID\" && this.type !== types.name ? null : this.parseIdent();\n    if (node.id) {\n      this.checkLVal(node.id, this.inModule && !this.inFunction ? \"let\" : \"var\");\n    }\n  }\n\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  if (!isStatement)\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next();\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    var member = this$1.parseClassMember(classBody);\n    if (member && member.type === \"MethodDefinition\" && member.kind === \"constructor\") {\n      if (hadConstructor) { this$1.raise(member.start, \"Duplicate constructor in the same class\"); }\n      hadConstructor = true;\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassMember = function(classBody) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(classBody, method, isGenerator, isAsync);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, \"nullableID\", false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        var spec = list[i];\n\n        this$1.checkUnreserved(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this$1.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this$1.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this$1.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(true);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, \"let\");\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, \"let\");\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      this$1.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this$1.checkLVal(node$2.local, \"let\");\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Can not use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this$1.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this$1.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding);\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this$1.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this$1.expect(types.comma); }\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRestBinding();\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n      this$1.expect(close);\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType && bindingType !== \"none\") {\n      if (\n        bindingType === \"var\" && !this.canDeclareVarName(expr.name) ||\n        bindingType !== \"var\" && !this.canDeclareLexicalName(expr.name)\n      ) {\n        this.raiseRecoverable(expr.start, (\"Identifier '\" + (expr.name) + \"' has already been declared\"));\n      }\n      if (bindingType === \"var\") {\n        this.declareVarName(expr.name);\n      } else {\n        this.declareLexicalName(expr.name);\n      }\n    }\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this$1.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }\n        // Backwards-compat kludge. Can be removed in version 6.0\n        else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) { return this.parseYield() }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  for (var computed = (void 0);;) {\n    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);\n      node.computed = !!computed;\n      if (computed) { this$1.expect(types.bracketR); }\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this$1.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;\n      this$1.yieldPos = 0;\n      this$1.awaitPos = 0;\n      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, false);\n        this$1.checkYieldAwaitInDefaultParams();\n        this$1.yieldPos = oldYieldPos;\n        this$1.awaitPos = oldAwaitPos;\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this$1.checkExpressionErrors(refDestructuringErrors, true);\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this$1.finishNode(node$1, \"CallExpression\");\n    } else if (this$1.type === types.backQuote) {\n      var node$2 = this$1.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this$1.parseTemplate({isTagged: true});\n      base = this$1.finishNode(node$2, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.inFunction)\n      { this.raise(this.start, \"'super' outside of function or class\"); }\n    node = this.startNode();\n    this.next();\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super Arguments\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(this.type !== types.name);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent();\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));\n        if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\" || containsEsc)\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n    if (!this.inFunction)\n      { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  var this$1 = this;\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this$1.type === types.eof) { this$1.raise(this$1.pos, \"Unterminated template literal\"); }\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    this.checkUnreserved(prop.key);\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.enterFunctionScope();\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = false;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitFunctionScope();\n\n  if (this.strict && node.id) {\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    this.checkLVal(node.id, \"none\");\n  }\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var this$1 = this;\n\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this$1.checkLVal(param, \"var\", allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this$1.type === types.comma)\n      { elt = null; }\n    else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this$1.start; }\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Can not use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Can not use 'await' as identifier inside an async function\"); }\n  if (this.isKeyword(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Can not use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved === \"never\") { liberal = false; }\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) { this.checkUnreserved(node); }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function() {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\n// Object.assign polyfill\nvar assign = Object.assign || function(target) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  for (var i = 0, list = sources; i < list.length; i += 1) {\n    var source = list[i];\n\n    for (var key in source) {\n      if (has(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterFunctionScope = function() {\n  // var: a hash of var-declared names in the current lexical scope\n  // lexical: a hash of lexically-declared names in the current lexical scope\n  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)\n  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)\n  this.scopeStack.push({var: {}, lexical: {}, childVar: {}, parentLexical: {}});\n};\n\npp$5.exitFunctionScope = function() {\n  this.scopeStack.pop();\n};\n\npp$5.enterLexicalScope = function() {\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n  var childScope = {var: {}, lexical: {}, childVar: {}, parentLexical: {}};\n\n  this.scopeStack.push(childScope);\n  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);\n};\n\npp$5.exitLexicalScope = function() {\n  var childScope = this.scopeStack.pop();\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  assign(parentScope.childVar, childScope.var, childScope.childVar);\n};\n\n/**\n * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`\n * in the current lexical scope or any of the parent lexical scopes in this function.\n */\npp$5.canDeclareVarName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name)\n};\n\n/**\n * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`\n * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in\n * any child lexical scopes in this function.\n */\npp$5.canDeclareLexicalName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name)\n};\n\npp$5.declareVarName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].var[name] = true;\n};\n\npp$5.declareLexicalName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  var this$1 = this;\n\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this$1.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\nvar data = {\n  \"$LONE\": [\n    \"ASCII\",\n    \"ASCII_Hex_Digit\",\n    \"AHex\",\n    \"Alphabetic\",\n    \"Alpha\",\n    \"Any\",\n    \"Assigned\",\n    \"Bidi_Control\",\n    \"Bidi_C\",\n    \"Bidi_Mirrored\",\n    \"Bidi_M\",\n    \"Case_Ignorable\",\n    \"CI\",\n    \"Cased\",\n    \"Changes_When_Casefolded\",\n    \"CWCF\",\n    \"Changes_When_Casemapped\",\n    \"CWCM\",\n    \"Changes_When_Lowercased\",\n    \"CWL\",\n    \"Changes_When_NFKC_Casefolded\",\n    \"CWKCF\",\n    \"Changes_When_Titlecased\",\n    \"CWT\",\n    \"Changes_When_Uppercased\",\n    \"CWU\",\n    \"Dash\",\n    \"Default_Ignorable_Code_Point\",\n    \"DI\",\n    \"Deprecated\",\n    \"Dep\",\n    \"Diacritic\",\n    \"Dia\",\n    \"Emoji\",\n    \"Emoji_Component\",\n    \"Emoji_Modifier\",\n    \"Emoji_Modifier_Base\",\n    \"Emoji_Presentation\",\n    \"Extender\",\n    \"Ext\",\n    \"Grapheme_Base\",\n    \"Gr_Base\",\n    \"Grapheme_Extend\",\n    \"Gr_Ext\",\n    \"Hex_Digit\",\n    \"Hex\",\n    \"IDS_Binary_Operator\",\n    \"IDSB\",\n    \"IDS_Trinary_Operator\",\n    \"IDST\",\n    \"ID_Continue\",\n    \"IDC\",\n    \"ID_Start\",\n    \"IDS\",\n    \"Ideographic\",\n    \"Ideo\",\n    \"Join_Control\",\n    \"Join_C\",\n    \"Logical_Order_Exception\",\n    \"LOE\",\n    \"Lowercase\",\n    \"Lower\",\n    \"Math\",\n    \"Noncharacter_Code_Point\",\n    \"NChar\",\n    \"Pattern_Syntax\",\n    \"Pat_Syn\",\n    \"Pattern_White_Space\",\n    \"Pat_WS\",\n    \"Quotation_Mark\",\n    \"QMark\",\n    \"Radical\",\n    \"Regional_Indicator\",\n    \"RI\",\n    \"Sentence_Terminal\",\n    \"STerm\",\n    \"Soft_Dotted\",\n    \"SD\",\n    \"Terminal_Punctuation\",\n    \"Term\",\n    \"Unified_Ideograph\",\n    \"UIdeo\",\n    \"Uppercase\",\n    \"Upper\",\n    \"Variation_Selector\",\n    \"VS\",\n    \"White_Space\",\n    \"space\",\n    \"XID_Continue\",\n    \"XIDC\",\n    \"XID_Start\",\n    \"XIDS\"\n  ],\n  \"General_Category\": [\n    \"Cased_Letter\",\n    \"LC\",\n    \"Close_Punctuation\",\n    \"Pe\",\n    \"Connector_Punctuation\",\n    \"Pc\",\n    \"Control\",\n    \"Cc\",\n    \"cntrl\",\n    \"Currency_Symbol\",\n    \"Sc\",\n    \"Dash_Punctuation\",\n    \"Pd\",\n    \"Decimal_Number\",\n    \"Nd\",\n    \"digit\",\n    \"Enclosing_Mark\",\n    \"Me\",\n    \"Final_Punctuation\",\n    \"Pf\",\n    \"Format\",\n    \"Cf\",\n    \"Initial_Punctuation\",\n    \"Pi\",\n    \"Letter\",\n    \"L\",\n    \"Letter_Number\",\n    \"Nl\",\n    \"Line_Separator\",\n    \"Zl\",\n    \"Lowercase_Letter\",\n    \"Ll\",\n    \"Mark\",\n    \"M\",\n    \"Combining_Mark\",\n    \"Math_Symbol\",\n    \"Sm\",\n    \"Modifier_Letter\",\n    \"Lm\",\n    \"Modifier_Symbol\",\n    \"Sk\",\n    \"Nonspacing_Mark\",\n    \"Mn\",\n    \"Number\",\n    \"N\",\n    \"Open_Punctuation\",\n    \"Ps\",\n    \"Other\",\n    \"C\",\n    \"Other_Letter\",\n    \"Lo\",\n    \"Other_Number\",\n    \"No\",\n    \"Other_Punctuation\",\n    \"Po\",\n    \"Other_Symbol\",\n    \"So\",\n    \"Paragraph_Separator\",\n    \"Zp\",\n    \"Private_Use\",\n    \"Co\",\n    \"Punctuation\",\n    \"P\",\n    \"punct\",\n    \"Separator\",\n    \"Z\",\n    \"Space_Separator\",\n    \"Zs\",\n    \"Spacing_Mark\",\n    \"Mc\",\n    \"Surrogate\",\n    \"Cs\",\n    \"Symbol\",\n    \"S\",\n    \"Titlecase_Letter\",\n    \"Lt\",\n    \"Unassigned\",\n    \"Cn\",\n    \"Uppercase_Letter\",\n    \"Lu\"\n  ],\n  \"Script\": [\n    \"Adlam\",\n    \"Adlm\",\n    \"Ahom\",\n    \"Anatolian_Hieroglyphs\",\n    \"Hluw\",\n    \"Arabic\",\n    \"Arab\",\n    \"Armenian\",\n    \"Armn\",\n    \"Avestan\",\n    \"Avst\",\n    \"Balinese\",\n    \"Bali\",\n    \"Bamum\",\n    \"Bamu\",\n    \"Bassa_Vah\",\n    \"Bass\",\n    \"Batak\",\n    \"Batk\",\n    \"Bengali\",\n    \"Beng\",\n    \"Bhaiksuki\",\n    \"Bhks\",\n    \"Bopomofo\",\n    \"Bopo\",\n    \"Brahmi\",\n    \"Brah\",\n    \"Braille\",\n    \"Brai\",\n    \"Buginese\",\n    \"Bugi\",\n    \"Buhid\",\n    \"Buhd\",\n    \"Canadian_Aboriginal\",\n    \"Cans\",\n    \"Carian\",\n    \"Cari\",\n    \"Caucasian_Albanian\",\n    \"Aghb\",\n    \"Chakma\",\n    \"Cakm\",\n    \"Cham\",\n    \"Cherokee\",\n    \"Cher\",\n    \"Common\",\n    \"Zyyy\",\n    \"Coptic\",\n    \"Copt\",\n    \"Qaac\",\n    \"Cuneiform\",\n    \"Xsux\",\n    \"Cypriot\",\n    \"Cprt\",\n    \"Cyrillic\",\n    \"Cyrl\",\n    \"Deseret\",\n    \"Dsrt\",\n    \"Devanagari\",\n    \"Deva\",\n    \"Duployan\",\n    \"Dupl\",\n    \"Egyptian_Hieroglyphs\",\n    \"Egyp\",\n    \"Elbasan\",\n    \"Elba\",\n    \"Ethiopic\",\n    \"Ethi\",\n    \"Georgian\",\n    \"Geor\",\n    \"Glagolitic\",\n    \"Glag\",\n    \"Gothic\",\n    \"Goth\",\n    \"Grantha\",\n    \"Gran\",\n    \"Greek\",\n    \"Grek\",\n    \"Gujarati\",\n    \"Gujr\",\n    \"Gurmukhi\",\n    \"Guru\",\n    \"Han\",\n    \"Hani\",\n    \"Hangul\",\n    \"Hang\",\n    \"Hanunoo\",\n    \"Hano\",\n    \"Hatran\",\n    \"Hatr\",\n    \"Hebrew\",\n    \"Hebr\",\n    \"Hiragana\",\n    \"Hira\",\n    \"Imperial_Aramaic\",\n    \"Armi\",\n    \"Inherited\",\n    \"Zinh\",\n    \"Qaai\",\n    \"Inscriptional_Pahlavi\",\n    \"Phli\",\n    \"Inscriptional_Parthian\",\n    \"Prti\",\n    \"Javanese\",\n    \"Java\",\n    \"Kaithi\",\n    \"Kthi\",\n    \"Kannada\",\n    \"Knda\",\n    \"Katakana\",\n    \"Kana\",\n    \"Kayah_Li\",\n    \"Kali\",\n    \"Kharoshthi\",\n    \"Khar\",\n    \"Khmer\",\n    \"Khmr\",\n    \"Khojki\",\n    \"Khoj\",\n    \"Khudawadi\",\n    \"Sind\",\n    \"Lao\",\n    \"Laoo\",\n    \"Latin\",\n    \"Latn\",\n    \"Lepcha\",\n    \"Lepc\",\n    \"Limbu\",\n    \"Limb\",\n    \"Linear_A\",\n    \"Lina\",\n    \"Linear_B\",\n    \"Linb\",\n    \"Lisu\",\n    \"Lycian\",\n    \"Lyci\",\n    \"Lydian\",\n    \"Lydi\",\n    \"Mahajani\",\n    \"Mahj\",\n    \"Malayalam\",\n    \"Mlym\",\n    \"Mandaic\",\n    \"Mand\",\n    \"Manichaean\",\n    \"Mani\",\n    \"Marchen\",\n    \"Marc\",\n    \"Masaram_Gondi\",\n    \"Gonm\",\n    \"Meetei_Mayek\",\n    \"Mtei\",\n    \"Mende_Kikakui\",\n    \"Mend\",\n    \"Meroitic_Cursive\",\n    \"Merc\",\n    \"Meroitic_Hieroglyphs\",\n    \"Mero\",\n    \"Miao\",\n    \"Plrd\",\n    \"Modi\",\n    \"Mongolian\",\n    \"Mong\",\n    \"Mro\",\n    \"Mroo\",\n    \"Multani\",\n    \"Mult\",\n    \"Myanmar\",\n    \"Mymr\",\n    \"Nabataean\",\n    \"Nbat\",\n    \"New_Tai_Lue\",\n    \"Talu\",\n    \"Newa\",\n    \"Nko\",\n    \"Nkoo\",\n    \"Nushu\",\n    \"Nshu\",\n    \"Ogham\",\n    \"Ogam\",\n    \"Ol_Chiki\",\n    \"Olck\",\n    \"Old_Hungarian\",\n    \"Hung\",\n    \"Old_Italic\",\n    \"Ital\",\n    \"Old_North_Arabian\",\n    \"Narb\",\n    \"Old_Permic\",\n    \"Perm\",\n    \"Old_Persian\",\n    \"Xpeo\",\n    \"Old_South_Arabian\",\n    \"Sarb\",\n    \"Old_Turkic\",\n    \"Orkh\",\n    \"Oriya\",\n    \"Orya\",\n    \"Osage\",\n    \"Osge\",\n    \"Osmanya\",\n    \"Osma\",\n    \"Pahawh_Hmong\",\n    \"Hmng\",\n    \"Palmyrene\",\n    \"Palm\",\n    \"Pau_Cin_Hau\",\n    \"Pauc\",\n    \"Phags_Pa\",\n    \"Phag\",\n    \"Phoenician\",\n    \"Phnx\",\n    \"Psalter_Pahlavi\",\n    \"Phlp\",\n    \"Rejang\",\n    \"Rjng\",\n    \"Runic\",\n    \"Runr\",\n    \"Samaritan\",\n    \"Samr\",\n    \"Saurashtra\",\n    \"Saur\",\n    \"Sharada\",\n    \"Shrd\",\n    \"Shavian\",\n    \"Shaw\",\n    \"Siddham\",\n    \"Sidd\",\n    \"SignWriting\",\n    \"Sgnw\",\n    \"Sinhala\",\n    \"Sinh\",\n    \"Sora_Sompeng\",\n    \"Sora\",\n    \"Soyombo\",\n    \"Soyo\",\n    \"Sundanese\",\n    \"Sund\",\n    \"Syloti_Nagri\",\n    \"Sylo\",\n    \"Syriac\",\n    \"Syrc\",\n    \"Tagalog\",\n    \"Tglg\",\n    \"Tagbanwa\",\n    \"Tagb\",\n    \"Tai_Le\",\n    \"Tale\",\n    \"Tai_Tham\",\n    \"Lana\",\n    \"Tai_Viet\",\n    \"Tavt\",\n    \"Takri\",\n    \"Takr\",\n    \"Tamil\",\n    \"Taml\",\n    \"Tangut\",\n    \"Tang\",\n    \"Telugu\",\n    \"Telu\",\n    \"Thaana\",\n    \"Thaa\",\n    \"Thai\",\n    \"Tibetan\",\n    \"Tibt\",\n    \"Tifinagh\",\n    \"Tfng\",\n    \"Tirhuta\",\n    \"Tirh\",\n    \"Ugaritic\",\n    \"Ugar\",\n    \"Vai\",\n    \"Vaii\",\n    \"Warang_Citi\",\n    \"Wara\",\n    \"Yi\",\n    \"Yiii\",\n    \"Zanabazar_Square\",\n    \"Zanb\"\n  ]\n};\nArray.prototype.push.apply(data.$LONE, data.General_Category);\ndata.gc = data.General_Category;\ndata.sc = data.Script_Extensions = data.scx = data.Script;\n\nvar pp$9 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current () {\n  return this.at(this.pos)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead () {\n  return this.at(this.nextIndex(this.pos))\n};\n\nRegExpValidationState.prototype.advance = function advance () {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpFlags = function(state) {\n  var this$1 = this;\n\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this$1.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this$1.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$9.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$9.regexp_disjunction = function(state) {\n  var this$1 = this;\n\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this$1.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$9.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    {  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$9.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$9.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$9.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$9.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$9.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$9.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$9.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$9.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$9.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$9.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$9.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$9.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\npp$9.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\npp$9.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\npp$9.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$9.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$9.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$9.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$9.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$9.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$9.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      state.switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$9.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$9.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$9.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$9.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!data.hasOwnProperty(name) || data[name].indexOf(value) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\npp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (data.$LONE.indexOf(nameOrValue) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$9.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$9.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* [ */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$9.regexp_classRanges = function(state) {\n  var this$1 = this;\n\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$9.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* [ */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$9.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$9.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$9.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$9.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$9.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$8 = Parser.prototype;\n\n// Move to the next token\n\npp$8.next = function() {\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$8.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$8[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$8.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$8.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$8.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$8.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$8.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$8.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this$1.input.charCodeAt(++this$1.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$8.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this$1.pos;\n      break\n    case 13:\n      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n        ++this$1.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this$1.pos;\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n      case 42: // '*'\n        this$1.skipBlockComment();\n        break\n      case 47:\n        this$1.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this$1.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$8.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$8.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$8.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$8.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$8.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$8.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$8.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$8.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$8.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$8.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n  case 63: ++this.pos; return this.finishToken(types.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$8.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$8.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(start, \"Unterminated regular expression\"); }\n    var ch = this$1.input.charAt(this$1.pos);\n    if (lineBreak.test(ch)) { this$1.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this$1.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$8.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\npp$8.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$8.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$8.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$8.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch, this$1.options.ecmaVersion >= 10)) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n      ++this$1.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$8.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$8.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$8.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated template\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL)\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n      switch (ch) {\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$8.readInvalidTemplateToken = function() {\n  var this$1 = this;\n\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this$1.input[this$1.pos]) {\n    case \"\\\\\":\n      ++this$1.pos;\n      break\n\n    case \"$\":\n      if (this$1.input[this$1.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$8.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$8.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$8.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n      if (this$1.input.charCodeAt(++this$1.pos) !== 117) // \"u\"\n        { this$1.invalidStringToken(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this$1.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$8.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nvar version = \"5.7.3\";\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new Parser(options, input)\n}\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\nvar parse_dammit;\nvar LooseParser;\nvar pluginsLoose; // eslint-disable-line camelcase\nfunction addLooseExports(parse, Parser$$1, plugins$$1) {\n  parse_dammit = parse; // eslint-disable-line camelcase\n  LooseParser = Parser$$1;\n  pluginsLoose = plugins$$1;\n}\n\n\n\n\n//# sourceURL=webpack:///./node_modules/gpu.js/node_modules/acorn/dist/acorn.es.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/process-nextick-args/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/duplex-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_duplex.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/readable-stream/node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = __webpack_require__(/*! util */ 0);\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ \"./node_modules/readable-stream/lib/internal/streams/BufferList.js\");\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_readable.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\n\nmodule.exports = Transform;\n\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_transform.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: __webpack_require__(/*! util-deprecate */ \"./node_modules/util-deprecate/browser.js\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/readable-stream/node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_writable.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/readable-stream/node_modules/safe-buffer/index.js\").Buffer;\nvar util = __webpack_require__(/*! util */ 1);\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/internal/streams/BufferList.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/internal/streams/destroy.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/node_modules/safe-buffer/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/readable-stream/node_modules/safe-buffer/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/readable-stream/readable-browser.js\").PassThrough\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/passthrough.js?");

/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\nexports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\nexports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\nexports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"./node_modules/readable-stream/lib/_stream_passthrough.js\");\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/readable-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/readable-stream/readable-browser.js\").Transform\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/transform.js?");

/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/writable-browser.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\ninherits(Stream, EE);\nStream.Readable = __webpack_require__(/*! readable-stream/readable.js */ \"./node_modules/readable-stream/readable-browser.js\");\nStream.Writable = __webpack_require__(/*! readable-stream/writable.js */ \"./node_modules/readable-stream/writable-browser.js\");\nStream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ \"./node_modules/readable-stream/duplex-browser.js\");\nStream.Transform = __webpack_require__(/*! readable-stream/transform.js */ \"./node_modules/readable-stream/transform.js\");\nStream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ \"./node_modules/readable-stream/passthrough.js\");\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n//# sourceURL=webpack:///./node_modules/stream-browserify/index.js?");

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/string_decoder/node_modules/safe-buffer/index.js\").Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n//# sourceURL=webpack:///./node_modules/string_decoder/lib/string_decoder.js?");

/***/ }),

/***/ "./node_modules/string_decoder/node_modules/safe-buffer/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/string_decoder/node_modules/safe-buffer/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack:///./node_modules/string_decoder/node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/thaw.js/dist/block.js":
/*!********************************************!*\
  !*** ./node_modules/thaw.js/dist/block.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = __webpack_require__(/*! ./ */ \"./node_modules/thaw.js/dist/index.js\");\n\nvar _2 = _interopRequireDefault(_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *\n * @param {Object} [options]\n * @param {Number} [count]\n * @constructor\n */\nvar Block = function () {\n  function Block(options, count) {\n    _classCallCheck(this, Block);\n\n    this.index = 0;\n    this.thaws = [];\n    this.count = count || 200;\n    this.options = options;\n  }\n\n  /**\n   * add an item to the end of items\n   * @param item\n   * @returns {Block}\n   */\n\n\n  _createClass(Block, [{\n    key: 'add',\n    value: function add(item) {\n      var next = this._next();\n      next.add(item);\n\n      return this;\n    }\n\n    /**\n     * add an Array to the end of items\n     * @param items\n     * @returns {Block}\n     */\n\n  }, {\n    key: 'addArray',\n    value: function addArray(items) {\n      var next = this._next();\n      next.addArray(items);\n\n      return this;\n    }\n\n    /**\n     * insert an item into items @ current position\n     * @param item\n     * @returns {Block}\n     */\n\n  }, {\n    key: 'insert',\n    value: function insert(item) {\n      var next = this._next();\n      next.insert(item);\n\n      return this;\n    }\n\n    /**\n     * insert and array into items @ current position\n     * @param items\n     * @returns {Block}\n     */\n\n  }, {\n    key: 'insertArray',\n    value: function insertArray(items) {\n      var next = this._next();\n      next.insertArray(items);\n\n      return this;\n    }\n\n    /**\n     * Stops all thaws in this block\n     * @returns {Block}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      for (var i = 0; i < this.thaws.length; i++) {\n        this.thaws[i].stop();\n      }\n      return this;\n    }\n\n    /**\n     * Get next available in block\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_next',\n    value: function _next() {\n      var thaw = null;\n      var thaws = this.thaws;\n\n      if (thaws.length < this.count) {\n        thaws.push(thaw = new _2.default([], this.options));\n      } else {\n        thaw = thaws[this.index];\n      }\n      this.index++;\n      if (this.index >= this.count) {\n        this.index = 0;\n      }\n\n      return thaw;\n    }\n  }]);\n\n  return Block;\n}();\n\nexports.default = Block;\n;\n//# sourceMappingURL=block.js.map\n\n//# sourceURL=webpack:///./node_modules/thaw.js/dist/block.js?");

/***/ }),

/***/ "./node_modules/thaw.js/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/thaw.js/dist/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Block = undefined;\n\nvar _thaw = __webpack_require__(/*! ./thaw */ \"./node_modules/thaw.js/dist/thaw.js\");\n\nvar _thaw2 = _interopRequireDefault(_thaw);\n\nvar _block = __webpack_require__(/*! ./block */ \"./node_modules/thaw.js/dist/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _thaw2.default;\nexports.Block = _block2.default;\n\n\nif (typeof window !== 'undefined') {\n  window.Thaw = _thaw2.default;\n  window.Thaw.Block = _block2.default;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/thaw.js/dist/index.js?");

/***/ }),

/***/ "./node_modules/thaw.js/dist/thaw.js":
/*!*******************************************!*\
  !*** ./node_modules/thaw.js/dist/thaw.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.thaw = thaw;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//private variables\nvar thawing = false;\nvar thaws = [];\n\n/**\n * thaw an array of items\n * @param {Array} items\n * @param {Object} [options]\n * @constructor\n */\n\nvar Thaw = function () {\n  _createClass(Thaw, null, [{\n    key: \"stopAll\",\n\n\n    /**\n     * Stops all Thaw instances\n     */\n    value: function stopAll() {\n      for (var i = 0; i < thaws.length; i++) {\n        thaws[i].stop();\n      }\n    }\n  }, {\n    key: \"defaultSettings\",\n\n    /**\n     *\n     * @type {{each: null, done: null}}\n     */\n    get: function get() {\n      return {\n        each: null,\n        done: null\n      };\n    }\n\n    /**\n     * returns if Thaw.js is thawing\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isThawing\",\n    get: function get() {\n      return thawing;\n    }\n  }]);\n\n  function Thaw(items) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Thaw);\n\n    var _constructor$defaultS = _extends({}, this.constructor.defaultSettings, options),\n        each = _constructor$defaultS.each,\n        done = _constructor$defaultS.done;\n\n    this.items = items;\n    this.i = 0;\n    this.options = options;\n    var tick = this.tick = function () {\n      if (_this.i < 0) return;\n\n      _this.timeout = setTimeout(tick, 0);\n\n      if (thawing) return;\n      var item = items[_this.i];\n      if (_this.i >= items.length) {\n        if (done !== null) {\n          thawing = true;\n          done(item, _this.i);\n          thawing = false;\n        }\n\n        _this.i = -1;\n        clearTimeout(_this.timeout);\n        return;\n      }\n      if (each !== null) {\n        thawing = true;\n        each(item, _this.i);\n        thawing = false;\n      } else if (item !== undefined) {\n        item();\n      }\n      _this.i++;\n    };\n\n    thaws.push(this);\n    if (!options.delay) {\n      tick();\n    }\n  }\n\n  /**\n   * readies thaw to continue\n   * @returns {boolean} if had to get ready\n   */\n\n\n  _createClass(Thaw, [{\n    key: \"makeReady\",\n    value: function makeReady() {\n      if (this.i < 0) {\n        this.i = this.items.length;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Adds an item to the end of this instance of Thaw and readies Thaw to process it\n     * @param item\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var doTick = this.makeReady();\n\n      this.items.push(item);\n\n      if (doTick) {\n        this.tick();\n      }\n      return this;\n    }\n\n    /**\n     * Inserts an item just after the current item being processed in Thaw and readies Thaw to process it\n     * @param item\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(item) {\n      var doTick = this.makeReady();\n\n      this.items.splice(this.i, 0, item);\n\n      if (doTick) {\n        this.tick();\n      }\n\n      return this;\n    }\n\n    /**\n     * Adds an Array to the end of this instance of Thaw and readies Thaw to process it\n     * @param {Array} items\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"addArray\",\n    value: function addArray(items) {\n      var doTick = this.makeReady();\n\n      this.items = this.items.concat(items);\n\n      if (doTick) {\n        this.tick();\n      }\n\n      return this;\n    }\n\n    /**\n     * Inserts an Array just after the current item being processed in Thaw and readies Thaw to process them\n     * @param {Array} items\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"insertArray\",\n    value: function insertArray(items) {\n      var doTick = this.makeReady();\n      var left = this.items;\n      var middle = items;\n      var right = this.items.splice(this.i, this.items.length - this.i + 1);\n\n      this.items = left.concat(middle, right);\n\n      if (doTick) {\n        this.tick();\n      }\n      return this;\n    }\n\n    /**\n     * Stops this instance of Thaw\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.i = -1;\n      clearTimeout(this.timeout);\n      if (this.options.done) {\n        this.options.done();\n      }\n      return this;\n    }\n  }]);\n\n  return Thaw;\n}();\n\n/**\n * simple thaw\n * @param {Array} items\n * @param {Object} [options]\n * @returns Thaw\n */\n\n\nexports.default = Thaw;\nfunction thaw(items) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return new Thaw(items, options);\n}\n//# sourceMappingURL=thaw.js.map\n\n//# sourceURL=webpack:///./node_modules/thaw.js/dist/thaw.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/util-deprecate/browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const brain = __webpack_require__(/*! brain.js */ \"./node_modules/brain.js/index.js\");\n\nconst d = new DCanvas(document.getElementById('canv'));\n\nd.drawGrid();\n\nfunction DCanvas(el) {\n    const ctx = el.getContext('2d');\n    const pixel = 20;\n\n    let is_mouse_down = false;\n\n    el.width = 500;\n    el.height = 500;\n\n    this.drawLine = function (x1, y1, x2, y2, color = 'green') {\n        ctx.beginPath();\n        ctx.strokeStyle = color;\n        ctx.lineJoin = 'miter';\n        ctx.lineWidth = 1;\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n    };\n\n    this.drawCell = function (x, y, w, h) {\n        ctx.fillStyle = 'blue';\n        ctx.strokeStyle = 'blue';\n        ctx.lineJoin = 'miter';\n        ctx.lineWidth = 1;\n        ctx.rect(x, y, w, h);\n        ctx.fill();\n    };\n\n    this.clear = function () {\n        ctx.clearRect(0,0, el.width, el.height);\n    };\n\n    this.drawGrid = function() {\n        const w = el.width;\n        const h = el.height;\n        const p = w / pixel;\n\n        const xStep = w / p;\n        const yStep = h / p;\n\n        for( let x = 0; x < w; x += xStep )\n        {\n            this.drawLine(x, 0, x, h);\n        }\n\n        for( let y = 0; y < h; y += yStep )\n        {\n            this.drawLine(0, y, w, y);\n        }\n    };\n\n    this.calculate = function(draw = false) {\n        const w = el.width;\n        const h = el.height;\n        const p = w / pixel;\n\n        const xStep = w / p;\n        const yStep = h / p;\n\n        const vector = [];\n        let __draw = [];\n\n        for (let x = 0; x < w; x += xStep) {\n            for(let y = 0; y < h; y += yStep) {\n                const data = ctx.getImageData(x, y, xStep, yStep);\n\n                let nonEmptyPixelsCount = 0;\n                for( i = 0; i < data.data.length; i += 10 ) {\n                    const isEmpty = data.data[i] === 0;\n\n                    if( !isEmpty ) {\n                        nonEmptyPixelsCount += 1;\n                    }\n                }\n\n                if( nonEmptyPixelsCount > 1 && draw ) {\n                    __draw.push([x, y, xStep, yStep]);\n                }\n\n                vector.push(nonEmptyPixelsCount > 1 ? 1 : 0);\n            }\n        }\n\n        if(draw) {\n            this.clear();\n            this.drawGrid();\n\n            for(_d in __draw) {\n                this.drawCell( __draw[_d][0], __draw[_d][1], __draw[_d][2], __draw[_d][3] );\n            }\n        }\n\n        return vector;\n    };\n    \n    el.addEventListener('mousedown', function () {\n        is_mouse_down = true;\n        ctx.beginPath();\n    });\n    \n    el.addEventListener('mouseup', function () {\n        is_mouse_down = false;\n    });\n\n    el.addEventListener('mousemove', function(e) {\n        if (is_mouse_down) {\n            ctx.fillStyle = 'red';\n            ctx.strokeStyle = 'red';\n            ctx.lineWidth = pixel;\n\n            ctx.lineTo(e.offsetX, e.offsetY);\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.arc(e.offsetX, e.offsetY, pixel / 2, 0, Math.PI * 2);\n            ctx.fill();\n\n            ctx.beginPath();\n            ctx.moveTo(e.offsetX, e.offsetY);\n        }\n    });\n}\n\n//# sourceURL=webpack:///./src/js/index.js?");

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ })

/******/ });